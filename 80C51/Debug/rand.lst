                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.0 #6037 (Oct 31 2010) (MINGW32)
                              4 ; This file was generated Mon Jan 23 19:51:00 2017
                              5 ;--------------------------------------------------------
                              6 	.module rand
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _testRand
                             13 	.globl _testTrueRandom
                             14 	.globl _rand_interval
                             15 	.globl _rand_interval_PARM_2
                             16 ;--------------------------------------------------------
                             17 ; special function registers
                             18 ;--------------------------------------------------------
                             19 	.area RSEG    (ABS,DATA)
   0000                      20 	.org 0x0000
                             21 ;--------------------------------------------------------
                             22 ; special function bits
                             23 ;--------------------------------------------------------
                             24 	.area RSEG    (ABS,DATA)
   0000                      25 	.org 0x0000
                             26 ;--------------------------------------------------------
                             27 ; overlayable register banks
                             28 ;--------------------------------------------------------
                             29 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      30 	.ds 8
                             31 ;--------------------------------------------------------
                             32 ; internal ram data
                             33 ;--------------------------------------------------------
                             34 	.area DSEG    (DATA)
                             35 ;--------------------------------------------------------
                             36 ; overlayable items in internal ram 
                             37 ;--------------------------------------------------------
                             38 	.area OSEG    (OVR,DATA)
                             39 ;--------------------------------------------------------
                             40 ; indirectly addressable internal ram data
                             41 ;--------------------------------------------------------
                             42 	.area ISEG    (DATA)
                             43 ;--------------------------------------------------------
                             44 ; absolute internal ram data
                             45 ;--------------------------------------------------------
                             46 	.area IABS    (ABS,DATA)
                             47 	.area IABS    (ABS,DATA)
                             48 ;--------------------------------------------------------
                             49 ; bit data
                             50 ;--------------------------------------------------------
                             51 	.area BSEG    (BIT)
                             52 ;--------------------------------------------------------
                             53 ; paged external ram data
                             54 ;--------------------------------------------------------
                             55 	.area PSEG    (PAG,XDATA)
                             56 ;--------------------------------------------------------
                             57 ; external ram data
                             58 ;--------------------------------------------------------
                             59 	.area XSEG    (XDATA)
                    0000     60 Lrand_interval$max$1$1==.
   0000                      61 _rand_interval_PARM_2:
   0000                      62 	.ds 2
                    0002     63 Lrand_interval$min$1$1==.
   0002                      64 _rand_interval_min_1_1:
   0002                      65 	.ds 2
                             66 ;--------------------------------------------------------
                             67 ; absolute external ram data
                             68 ;--------------------------------------------------------
                             69 	.area XABS    (ABS,XDATA)
                             70 ;--------------------------------------------------------
                             71 ; external initialized ram data
                             72 ;--------------------------------------------------------
                             73 	.area XISEG   (XDATA)
                             74 	.area HOME    (CODE)
                             75 	.area GSINIT0 (CODE)
                             76 	.area GSINIT1 (CODE)
                             77 	.area GSINIT2 (CODE)
                             78 	.area GSINIT3 (CODE)
                             79 	.area GSINIT4 (CODE)
                             80 	.area GSINIT5 (CODE)
                             81 	.area GSINIT  (CODE)
                             82 	.area GSFINAL (CODE)
                             83 	.area CSEG    (CODE)
                             84 ;--------------------------------------------------------
                             85 ; global & static initialisations
                             86 ;--------------------------------------------------------
                             87 	.area HOME    (CODE)
                             88 	.area GSINIT  (CODE)
                             89 	.area GSFINAL (CODE)
                             90 	.area GSINIT  (CODE)
                             91 ;--------------------------------------------------------
                             92 ; Home
                             93 ;--------------------------------------------------------
                             94 	.area HOME    (CODE)
                             95 	.area HOME    (CODE)
                             96 ;--------------------------------------------------------
                             97 ; code
                             98 ;--------------------------------------------------------
                             99 	.area CSEG    (CODE)
                            100 ;------------------------------------------------------------
                            101 ;Allocation info for local variables in function 'rand_interval'
                            102 ;------------------------------------------------------------
                            103 ;max                       Allocated with name '_rand_interval_PARM_2'
                            104 ;min                       Allocated with name '_rand_interval_min_1_1'
                            105 ;r                         Allocated with name '_rand_interval_r_1_1'
                            106 ;------------------------------------------------------------
                    0000    107 	G$rand_interval$0$0 ==.
                    0000    108 	C$rand.c$15$0$0 ==.
                            109 ;	../rand.c:15: unsigned char rand_interval(int min, int max)
                            110 ;	-----------------------------------------
                            111 ;	 function rand_interval
                            112 ;	-----------------------------------------
   0000                     113 _rand_interval:
                    0002    114 	ar2 = 0x02
                    0003    115 	ar3 = 0x03
                    0004    116 	ar4 = 0x04
                    0005    117 	ar5 = 0x05
                    0006    118 	ar6 = 0x06
                    0007    119 	ar7 = 0x07
                    0000    120 	ar0 = 0x00
                    0001    121 	ar1 = 0x01
                    0000    122 	C$rand.c$19$1$1 ==.
                            123 ;	../rand.c:19: do
   0000 AA 83               124 	mov	r2,dph
   0002 E5 82               125 	mov	a,dpl
   0004 90s00r02            126 	mov	dptr,#_rand_interval_min_1_1
   0007 F0                  127 	movx	@dptr,a
   0008 A3                  128 	inc	dptr
   0009 CA                  129 	xch	a,r2
   000A F0                  130 	movx	@dptr,a
   000B FB                  131 	mov	r3,a
   000C 90s00r00            132 	mov	dptr,#_rand_interval_PARM_2
   000F E0                  133 	movx	a,@dptr
   0010 FC                  134 	mov	r4,a
   0011 A3                  135 	inc	dptr
   0012 E0                  136 	movx	a,@dptr
   0013 FD                  137 	mov	r5,a
   0014                     138 00102$:
                    0014    139 	C$rand.c$21$2$2 ==.
                            140 ;	../rand.c:21: r = rand();
   0014 C0 02               141 	push	ar2
   0016 C0 03               142 	push	ar3
   0018 C0 04               143 	push	ar4
   001A C0 05               144 	push	ar5
   001C 12s00r00            145 	lcall	_rand
   001F AE 82               146 	mov	r6,dpl
   0021 D0 05               147 	pop	ar5
   0023 D0 04               148 	pop	ar4
   0025 D0 03               149 	pop	ar3
   0027 D0 02               150 	pop	ar2
                    0029    151 	C$rand.c$22$1$1 ==.
                            152 ;	../rand.c:22: } while (r < min || r > max );
   0029 8E 07               153 	mov	ar7,r6
   002B 78 00               154 	mov	r0,#0x00
   002D C3                  155 	clr	c
   002E EF                  156 	mov	a,r7
   002F 9A                  157 	subb	a,r2
   0030 E8                  158 	mov	a,r0
   0031 64 80               159 	xrl	a,#0x80
   0033 8B F0               160 	mov	b,r3
   0035 63 F0 80            161 	xrl	b,#0x80
   0038 95 F0               162 	subb	a,b
   003A 40 D8               163 	jc	00102$
   003C EC                  164 	mov	a,r4
   003D 9F                  165 	subb	a,r7
   003E ED                  166 	mov	a,r5
   003F 64 80               167 	xrl	a,#0x80
   0041 88 F0               168 	mov	b,r0
   0043 63 F0 80            169 	xrl	b,#0x80
   0046 95 F0               170 	subb	a,b
   0048 40 CA               171 	jc	00102$
                    004A    172 	C$rand.c$24$1$1 ==.
                            173 ;	../rand.c:24: return r;
   004A 8E 82               174 	mov	dpl,r6
                    004C    175 	C$rand.c$25$1$1 ==.
                    004C    176 	XG$rand_interval$0$0 ==.
   004C 22                  177 	ret
                            178 ;------------------------------------------------------------
                            179 ;Allocation info for local variables in function 'testTrueRandom'
                            180 ;------------------------------------------------------------
                            181 ;testsInError              Allocated with name '_testTrueRandom_testsInError_1_1'
                            182 ;c                         Allocated with name '_testTrueRandom_c_1_1'
                            183 ;d                         Allocated with name '_testTrueRandom_d_1_1'
                            184 ;------------------------------------------------------------
                    004D    185 	G$testTrueRandom$0$0 ==.
                    004D    186 	C$rand.c$30$1$1 ==.
                            187 ;	../rand.c:30: int testTrueRandom() {
                            188 ;	-----------------------------------------
                            189 ;	 function testTrueRandom
                            190 ;	-----------------------------------------
   004D                     191 _testTrueRandom:
                    004D    192 	C$rand.c$34$1$1 ==.
                            193 ;	../rand.c:34: c = rand_interval(1, 100);
   004D 90s00r00            194 	mov	dptr,#_rand_interval_PARM_2
   0050 74 64               195 	mov	a,#0x64
   0052 F0                  196 	movx	@dptr,a
   0053 A3                  197 	inc	dptr
   0054 E4                  198 	clr	a
   0055 F0                  199 	movx	@dptr,a
   0056 90 00 01            200 	mov	dptr,#0x0001
   0059 12s00r00            201 	lcall	_rand_interval
   005C AA 82               202 	mov	r2,dpl
                    005E    203 	C$rand.c$35$1$1 ==.
                            204 ;	../rand.c:35: d = rand_interval(1, 100);
   005E 90s00r00            205 	mov	dptr,#_rand_interval_PARM_2
   0061 74 64               206 	mov	a,#0x64
   0063 F0                  207 	movx	@dptr,a
   0064 A3                  208 	inc	dptr
   0065 E4                  209 	clr	a
   0066 F0                  210 	movx	@dptr,a
   0067 90 00 01            211 	mov	dptr,#0x0001
   006A C0 02               212 	push	ar2
   006C 12s00r00            213 	lcall	_rand_interval
   006F AB 82               214 	mov	r3,dpl
   0071 D0 02               215 	pop	ar2
                    0073    216 	C$rand.c$36$1$1 ==.
                            217 ;	../rand.c:36: testsInError += assertNotEquals(c, d, "RTR1");
   0073 EA                  218 	mov	a,r2
   0074 33                  219 	rlc	a
   0075 95 E0               220 	subb	a,acc
   0077 FC                  221 	mov	r4,a
   0078 EB                  222 	mov	a,r3
   0079 33                  223 	rlc	a
   007A 95 E0               224 	subb	a,acc
   007C FD                  225 	mov	r5,a
   007D 90s00r00            226 	mov	dptr,#_assertNotEquals_PARM_2
   0080 EB                  227 	mov	a,r3
   0081 F0                  228 	movx	@dptr,a
   0082 A3                  229 	inc	dptr
   0083 ED                  230 	mov	a,r5
   0084 F0                  231 	movx	@dptr,a
   0085 90s00r00            232 	mov	dptr,#_assertNotEquals_PARM_3
   0088 74r00               233 	mov	a,#__str_0
   008A F0                  234 	movx	@dptr,a
   008B A3                  235 	inc	dptr
   008C 74s00               236 	mov	a,#(__str_0 >> 8)
   008E F0                  237 	movx	@dptr,a
   008F A3                  238 	inc	dptr
   0090 74 80               239 	mov	a,#0x80
   0092 F0                  240 	movx	@dptr,a
   0093 8A 82               241 	mov	dpl,r2
   0095 8C 83               242 	mov	dph,r4
                    0097    243 	C$rand.c$38$1$1 ==.
                            244 ;	../rand.c:38: return testsInError;
                    0097    245 	C$rand.c$39$1$1 ==.
                    0097    246 	XG$testTrueRandom$0$0 ==.
   0097 02s00r00            247 	ljmp	_assertNotEquals
                            248 ;------------------------------------------------------------
                            249 ;Allocation info for local variables in function 'testRand'
                            250 ;------------------------------------------------------------
                            251 ;testsInError              Allocated with name '_testRand_testsInError_1_1'
                            252 ;------------------------------------------------------------
                    009A    253 	G$testRand$0$0 ==.
                    009A    254 	C$rand.c$41$1$1 ==.
                            255 ;	../rand.c:41: int testRand() {
                            256 ;	-----------------------------------------
                            257 ;	 function testRand
                            258 ;	-----------------------------------------
   009A                     259 _testRand:
                    009A    260 	C$rand.c$44$1$1 ==.
                            261 ;	../rand.c:44: testsInError += testTrueRandom();
                    009A    262 	C$rand.c$46$1$1 ==.
                            263 ;	../rand.c:46: return testsInError;
                    009A    264 	C$rand.c$47$1$1 ==.
                    009A    265 	XG$testRand$0$0 ==.
   009A 02s00r4D            266 	ljmp	_testTrueRandom
                            267 	.area CSEG    (CODE)
                            268 	.area CONST   (CODE)
                    0000    269 Frand$_str_0$0$0 == .
   0000                     270 __str_0:
   0000 52 54 52 31         271 	.ascii "RTR1"
   0004 00                  272 	.db 0x00
                            273 	.area XINIT   (CODE)
                            274 	.area CABS    (ABS,CODE)

                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.0 #6037 (Oct 31 2010) (MINGW32)
                              4 ; This file was generated Mon Jan 23 19:50:59 2017
                              5 ;--------------------------------------------------------
                              6 	.module gameboard
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _bddGameboardDisplay
                             13 	.globl _bddGameboardClear
                             14 	.globl _bddGameboardDraw
                             15 	.globl _GMB_copyFromRomToCg
                             16 	.globl _GMB_display_PARM_3
                             17 	.globl _GMB_display_PARM_2
                             18 	.globl _GMB_clear_PARM_4
                             19 	.globl _GMB_clear_PARM_3
                             20 	.globl _GMB_clear_PARM_2
                             21 	.globl _GMB_draw_PARM_4
                             22 	.globl _GMB_draw_PARM_3
                             23 	.globl _GMB_draw_PARM_2
                             24 	.globl _GMB_copyFromRomToCg_PARM_2
                             25 	.globl _GMB_initialize
                             26 	.globl _GMB_draw
                             27 	.globl _GMB_clear
                             28 	.globl _GMB_display
                             29 	.globl _testGameboard
                             30 ;--------------------------------------------------------
                             31 ; special function registers
                             32 ;--------------------------------------------------------
                             33 	.area RSEG    (ABS,DATA)
   0000                      34 	.org 0x0000
                             35 ;--------------------------------------------------------
                             36 ; special function bits
                             37 ;--------------------------------------------------------
                             38 	.area RSEG    (ABS,DATA)
   0000                      39 	.org 0x0000
                             40 ;--------------------------------------------------------
                             41 ; overlayable register banks
                             42 ;--------------------------------------------------------
                             43 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      44 	.ds 8
                             45 ;--------------------------------------------------------
                             46 ; internal ram data
                             47 ;--------------------------------------------------------
                             48 	.area DSEG    (DATA)
                    0000     49 LGMB_display$sloc0$1$0==.
   0000                      50 _GMB_display_sloc0_1_0:
   0000                      51 	.ds 1
                    0001     52 LGMB_display$sloc1$1$0==.
   0001                      53 _GMB_display_sloc1_1_0:
   0001                      54 	.ds 3
                             55 ;--------------------------------------------------------
                             56 ; overlayable items in internal ram 
                             57 ;--------------------------------------------------------
                             58 	.area OSEG    (OVR,DATA)
                             59 ;--------------------------------------------------------
                             60 ; indirectly addressable internal ram data
                             61 ;--------------------------------------------------------
                             62 	.area ISEG    (DATA)
                             63 ;--------------------------------------------------------
                             64 ; absolute internal ram data
                             65 ;--------------------------------------------------------
                             66 	.area IABS    (ABS,DATA)
                             67 	.area IABS    (ABS,DATA)
                             68 ;--------------------------------------------------------
                             69 ; bit data
                             70 ;--------------------------------------------------------
                             71 	.area BSEG    (BIT)
                             72 ;--------------------------------------------------------
                             73 ; paged external ram data
                             74 ;--------------------------------------------------------
                             75 	.area PSEG    (PAG,XDATA)
                             76 ;--------------------------------------------------------
                             77 ; external ram data
                             78 ;--------------------------------------------------------
                             79 	.area XSEG    (XDATA)
                    0000     80 LGMB_copyFromRomToCg$cgCode$1$1==.
   0000                      81 _GMB_copyFromRomToCg_PARM_2:
   0000                      82 	.ds 1
                    0001     83 LGMB_copyFromRomToCg$positionInRom$1$1==.
   0001                      84 _GMB_copyFromRomToCg_positionInRom_1_1:
   0001                      85 	.ds 1
                    0002     86 LGMB_draw$y0$1$1==.
   0002                      87 _GMB_draw_PARM_2:
   0002                      88 	.ds 1
                    0003     89 LGMB_draw$x1$1$1==.
   0003                      90 _GMB_draw_PARM_3:
   0003                      91 	.ds 1
                    0004     92 LGMB_draw$y1$1$1==.
   0004                      93 _GMB_draw_PARM_4:
   0004                      94 	.ds 1
                    0005     95 LGMB_draw$x0$1$1==.
   0005                      96 _GMB_draw_x0_1_1:
   0005                      97 	.ds 1
                    0006     98 LGMB_draw$x$1$1==.
   0006                      99 _GMB_draw_x_1_1:
   0006                     100 	.ds 1
                    0007    101 LGMB_draw$y$1$1==.
   0007                     102 _GMB_draw_y_1_1:
   0007                     103 	.ds 1
                    0008    104 LGMB_clear$y0$1$1==.
   0008                     105 _GMB_clear_PARM_2:
   0008                     106 	.ds 1
                    0009    107 LGMB_clear$x1$1$1==.
   0009                     108 _GMB_clear_PARM_3:
   0009                     109 	.ds 1
                    000A    110 LGMB_clear$y1$1$1==.
   000A                     111 _GMB_clear_PARM_4:
   000A                     112 	.ds 1
                    000B    113 LGMB_clear$x0$1$1==.
   000B                     114 _GMB_clear_x0_1_1:
   000B                     115 	.ds 1
                    000C    116 LGMB_clear$x$1$1==.
   000C                     117 _GMB_clear_x_1_1:
   000C                     118 	.ds 1
                    000D    119 LGMB_clear$y$1$1==.
   000D                     120 _GMB_clear_y_1_1:
   000D                     121 	.ds 1
                    000E    122 LGMB_display$y0$1$1==.
   000E                     123 _GMB_display_PARM_2:
   000E                     124 	.ds 1
                    000F    125 LGMB_display$text$1$1==.
   000F                     126 _GMB_display_PARM_3:
   000F                     127 	.ds 3
                    0012    128 LGMB_display$x0$1$1==.
   0012                     129 _GMB_display_x0_1_1:
   0012                     130 	.ds 1
                    0013    131 LGMB_display$x$1$1==.
   0013                     132 _GMB_display_x_1_1:
   0013                     133 	.ds 1
                    0014    134 LGMB_display$i$1$1==.
   0014                     135 _GMB_display_i_1_1:
   0014                     136 	.ds 2
                    0016    137 LbddGameboardDraw$c$1$1==.
   0016                     138 _bddGameboardDraw_c_1_1:
   0016                     139 	.ds 55
                    004D    140 LbddGameboardClear$c$1$1==.
   004D                     141 _bddGameboardClear_c_1_1:
   004D                     142 	.ds 55
                    0084    143 LbddGameboardDisplay$c$1$1==.
   0084                     144 _bddGameboardDisplay_c_1_1:
   0084                     145 	.ds 55
                            146 ;--------------------------------------------------------
                            147 ; absolute external ram data
                            148 ;--------------------------------------------------------
                            149 	.area XABS    (ABS,XDATA)
                            150 ;--------------------------------------------------------
                            151 ; external initialized ram data
                            152 ;--------------------------------------------------------
                            153 	.area XISEG   (XDATA)
                            154 	.area HOME    (CODE)
                            155 	.area GSINIT0 (CODE)
                            156 	.area GSINIT1 (CODE)
                            157 	.area GSINIT2 (CODE)
                            158 	.area GSINIT3 (CODE)
                            159 	.area GSINIT4 (CODE)
                            160 	.area GSINIT5 (CODE)
                            161 	.area GSINIT  (CODE)
                            162 	.area GSFINAL (CODE)
                            163 	.area CSEG    (CODE)
                            164 ;--------------------------------------------------------
                            165 ; global & static initialisations
                            166 ;--------------------------------------------------------
                            167 	.area HOME    (CODE)
                            168 	.area GSINIT  (CODE)
                            169 	.area GSFINAL (CODE)
                            170 	.area GSINIT  (CODE)
                            171 ;--------------------------------------------------------
                            172 ; Home
                            173 ;--------------------------------------------------------
                            174 	.area HOME    (CODE)
                            175 	.area HOME    (CODE)
                            176 ;--------------------------------------------------------
                            177 ; code
                            178 ;--------------------------------------------------------
                            179 	.area CSEG    (CODE)
                            180 ;------------------------------------------------------------
                            181 ;Allocation info for local variables in function 'GMB_copyFromRomToCg'
                            182 ;------------------------------------------------------------
                            183 ;cgCode                    Allocated with name '_GMB_copyFromRomToCg_PARM_2'
                            184 ;positionInRom             Allocated with name '_GMB_copyFromRomToCg_positionInRom_1_1'
                            185 ;rom_cg_address            Allocated with name '_GMB_copyFromRomToCg_rom_cg_address_1_1'
                            186 ;video_cg_address          Allocated with name '_GMB_copyFromRomToCg_video_cg_address_1_1'
                            187 ;------------------------------------------------------------
                    0000    188 	G$GMB_copyFromRomToCg$0$0 ==.
                    0000    189 	C$gameboard.c$16$0$0 ==.
                            190 ;	../gameboard.c:16: void GMB_copyFromRomToCg(unsigned char positionInRom, unsigned char cgCode) {
                            191 ;	-----------------------------------------
                            192 ;	 function GMB_copyFromRomToCg
                            193 ;	-----------------------------------------
   0000                     194 _GMB_copyFromRomToCg:
                    0002    195 	ar2 = 0x02
                    0003    196 	ar3 = 0x03
                    0004    197 	ar4 = 0x04
                    0005    198 	ar5 = 0x05
                    0006    199 	ar6 = 0x06
                    0007    200 	ar7 = 0x07
                    0000    201 	ar0 = 0x00
                    0001    202 	ar1 = 0x01
   0000 E5 82               203 	mov	a,dpl
                    0002    204 	C$gameboard.c$17$1$1 ==.
                            205 ;	../gameboard.c:17: unsigned char *rom_cg_address = (unsigned char __xdata *) (ROM_CG_ADDRESS + positionInRom * 8);
   0002 90s00r01            206 	mov	dptr,#_GMB_copyFromRomToCg_positionInRom_1_1
   0005 F0                  207 	movx	@dptr,a
   0006 75 F0 08            208 	mov	b,#0x08
   0009 A4                  209 	mul	ab
   000A FA                  210 	mov	r2,a
   000B AB F0               211 	mov	r3,b
   000D 7C 00               212 	mov	r4,#0x00
                    000F    213 	C$gameboard.c$18$1$1 ==.
                            214 ;	../gameboard.c:18: unsigned int video_cg_address = cgCode * 8 + T6963C_ZONE_CG;
   000F 90s00r00            215 	mov	dptr,#_GMB_copyFromRomToCg_PARM_2
   0012 E0                  216 	movx	a,@dptr
   0013 75 F0 08            217 	mov	b,#0x08
   0016 A4                  218 	mul	ab
   0017 FD                  219 	mov	r5,a
   0018 74 18               220 	mov	a,#0x18
   001A 25 F0               221 	add	a,b
   001C FE                  222 	mov	r6,a
                    001D    223 	C$gameboard.c$19$1$1 ==.
                            224 ;	../gameboard.c:19: T6963C_autoWrite(video_cg_address, rom_cg_address, 8);
   001D 90s00r00            225 	mov	dptr,#_T6963C_autoWrite_PARM_2
   0020 EA                  226 	mov	a,r2
   0021 F0                  227 	movx	@dptr,a
   0022 A3                  228 	inc	dptr
   0023 EB                  229 	mov	a,r3
   0024 F0                  230 	movx	@dptr,a
   0025 A3                  231 	inc	dptr
   0026 EC                  232 	mov	a,r4
   0027 F0                  233 	movx	@dptr,a
   0028 90s00r00            234 	mov	dptr,#_T6963C_autoWrite_PARM_3
   002B 74 08               235 	mov	a,#0x08
   002D F0                  236 	movx	@dptr,a
   002E A3                  237 	inc	dptr
   002F E4                  238 	clr	a
   0030 F0                  239 	movx	@dptr,a
   0031 8D 82               240 	mov	dpl,r5
   0033 8E 83               241 	mov	dph,r6
                    0035    242 	C$gameboard.c$20$1$1 ==.
                    0035    243 	XG$GMB_copyFromRomToCg$0$0 ==.
   0035 02s00r00            244 	ljmp	_T6963C_autoWrite
                            245 ;------------------------------------------------------------
                            246 ;Allocation info for local variables in function 'GMB_initialize'
                            247 ;------------------------------------------------------------
                            248 ;------------------------------------------------------------
                    0038    249 	G$GMB_initialize$0$0 ==.
                    0038    250 	C$gameboard.c$25$1$1 ==.
                            251 ;	../gameboard.c:25: void GMB_initialize() {
                            252 ;	-----------------------------------------
                            253 ;	 function GMB_initialize
                            254 ;	-----------------------------------------
   0038                     255 _GMB_initialize:
                    0038    256 	C$gameboard.c$26$1$1 ==.
                            257 ;	../gameboard.c:26: GMB_copyFromRomToCg( 0, OBSTACLE_A);
   0038 90s00r00            258 	mov	dptr,#_GMB_copyFromRomToCg_PARM_2
   003B 74 21               259 	mov	a,#0x21
   003D F0                  260 	movx	@dptr,a
   003E 75 82 00            261 	mov	dpl,#0x00
   0041 12s00r00            262 	lcall	_GMB_copyFromRomToCg
                    0044    263 	C$gameboard.c$27$1$1 ==.
                            264 ;	../gameboard.c:27: GMB_copyFromRomToCg( 1, OBSTACLE_B);
   0044 90s00r00            265 	mov	dptr,#_GMB_copyFromRomToCg_PARM_2
   0047 74 22               266 	mov	a,#0x22
   0049 F0                  267 	movx	@dptr,a
   004A 75 82 01            268 	mov	dpl,#0x01
   004D 12s00r00            269 	lcall	_GMB_copyFromRomToCg
                    0050    270 	C$gameboard.c$28$1$1 ==.
                            271 ;	../gameboard.c:28: GMB_copyFromRomToCg( 2, OBSTACLE_C);
   0050 90s00r00            272 	mov	dptr,#_GMB_copyFromRomToCg_PARM_2
   0053 74 23               273 	mov	a,#0x23
   0055 F0                  274 	movx	@dptr,a
   0056 75 82 02            275 	mov	dpl,#0x02
   0059 12s00r00            276 	lcall	_GMB_copyFromRomToCg
                    005C    277 	C$gameboard.c$29$1$1 ==.
                            278 ;	../gameboard.c:29: GMB_copyFromRomToCg( 3, OBSTACLE_D);
   005C 90s00r00            279 	mov	dptr,#_GMB_copyFromRomToCg_PARM_2
   005F 74 24               280 	mov	a,#0x24
   0061 F0                  281 	movx	@dptr,a
   0062 75 82 03            282 	mov	dpl,#0x03
   0065 12s00r00            283 	lcall	_GMB_copyFromRomToCg
                    0068    284 	C$gameboard.c$30$1$1 ==.
                            285 ;	../gameboard.c:30: GMB_copyFromRomToCg( 4, OBSTACLE_E);
   0068 90s00r00            286 	mov	dptr,#_GMB_copyFromRomToCg_PARM_2
   006B 74 25               287 	mov	a,#0x25
   006D F0                  288 	movx	@dptr,a
   006E 75 82 04            289 	mov	dpl,#0x04
   0071 12s00r00            290 	lcall	_GMB_copyFromRomToCg
                    0074    291 	C$gameboard.c$31$1$1 ==.
                            292 ;	../gameboard.c:31: GMB_copyFromRomToCg( 5, OBSTACLE_F);
   0074 90s00r00            293 	mov	dptr,#_GMB_copyFromRomToCg_PARM_2
   0077 74 26               294 	mov	a,#0x26
   0079 F0                  295 	movx	@dptr,a
   007A 75 82 05            296 	mov	dpl,#0x05
   007D 12s00r00            297 	lcall	_GMB_copyFromRomToCg
                    0080    298 	C$gameboard.c$32$1$1 ==.
                            299 ;	../gameboard.c:32: GMB_copyFromRomToCg( 6, OBSTACLE_G);
   0080 90s00r00            300 	mov	dptr,#_GMB_copyFromRomToCg_PARM_2
   0083 74 27               301 	mov	a,#0x27
   0085 F0                  302 	movx	@dptr,a
   0086 75 82 06            303 	mov	dpl,#0x06
   0089 12s00r00            304 	lcall	_GMB_copyFromRomToCg
                    008C    305 	C$gameboard.c$33$1$1 ==.
                            306 ;	../gameboard.c:33: GMB_copyFromRomToCg( 7, OBSTACLE_H);
   008C 90s00r00            307 	mov	dptr,#_GMB_copyFromRomToCg_PARM_2
   008F 74 28               308 	mov	a,#0x28
   0091 F0                  309 	movx	@dptr,a
   0092 75 82 07            310 	mov	dpl,#0x07
   0095 12s00r00            311 	lcall	_GMB_copyFromRomToCg
                    0098    312 	C$gameboard.c$35$1$1 ==.
                            313 ;	../gameboard.c:35: GMB_copyFromRomToCg( 8, SNAKE_BODY);
   0098 90s00r00            314 	mov	dptr,#_GMB_copyFromRomToCg_PARM_2
   009B 74 11               315 	mov	a,#0x11
   009D F0                  316 	movx	@dptr,a
   009E 75 82 08            317 	mov	dpl,#0x08
   00A1 12s00r00            318 	lcall	_GMB_copyFromRomToCg
                    00A4    319 	C$gameboard.c$36$1$1 ==.
                            320 ;	../gameboard.c:36: GMB_copyFromRomToCg( 9, SNAKE_SWALLOW);
   00A4 90s00r00            321 	mov	dptr,#_GMB_copyFromRomToCg_PARM_2
   00A7 74 12               322 	mov	a,#0x12
   00A9 F0                  323 	movx	@dptr,a
   00AA 75 82 09            324 	mov	dpl,#0x09
   00AD 12s00r00            325 	lcall	_GMB_copyFromRomToCg
                    00B0    326 	C$gameboard.c$37$1$1 ==.
                            327 ;	../gameboard.c:37: GMB_copyFromRomToCg(10, SNAKE_HEAD);
   00B0 90s00r00            328 	mov	dptr,#_GMB_copyFromRomToCg_PARM_2
   00B3 74 13               329 	mov	a,#0x13
   00B5 F0                  330 	movx	@dptr,a
   00B6 75 82 0A            331 	mov	dpl,#0x0A
   00B9 12s00r00            332 	lcall	_GMB_copyFromRomToCg
                    00BC    333 	C$gameboard.c$38$1$1 ==.
                            334 ;	../gameboard.c:38: GMB_copyFromRomToCg(11, SNAKE_DEAD);
   00BC 90s00r00            335 	mov	dptr,#_GMB_copyFromRomToCg_PARM_2
   00BF 74 14               336 	mov	a,#0x14
   00C1 F0                  337 	movx	@dptr,a
   00C2 75 82 0B            338 	mov	dpl,#0x0B
   00C5 12s00r00            339 	lcall	_GMB_copyFromRomToCg
                    00C8    340 	C$gameboard.c$40$1$1 ==.
                            341 ;	../gameboard.c:40: GMB_copyFromRomToCg(12, FRUIT);
   00C8 90s00r00            342 	mov	dptr,#_GMB_copyFromRomToCg_PARM_2
   00CB 74 15               343 	mov	a,#0x15
   00CD F0                  344 	movx	@dptr,a
   00CE 75 82 0C            345 	mov	dpl,#0x0C
                    00D1    346 	C$gameboard.c$41$1$1 ==.
                    00D1    347 	XG$GMB_initialize$0$0 ==.
   00D1 02s00r00            348 	ljmp	_GMB_copyFromRomToCg
                            349 ;------------------------------------------------------------
                            350 ;Allocation info for local variables in function 'GMB_draw'
                            351 ;------------------------------------------------------------
                            352 ;y0                        Allocated with name '_GMB_draw_PARM_2'
                            353 ;x1                        Allocated with name '_GMB_draw_PARM_3'
                            354 ;y1                        Allocated with name '_GMB_draw_PARM_4'
                            355 ;x0                        Allocated with name '_GMB_draw_x0_1_1'
                            356 ;x                         Allocated with name '_GMB_draw_x_1_1'
                            357 ;y                         Allocated with name '_GMB_draw_y_1_1'
                            358 ;------------------------------------------------------------
                    00D4    359 	G$GMB_draw$0$0 ==.
                    00D4    360 	C$gameboard.c$50$1$1 ==.
                            361 ;	../gameboard.c:50: void GMB_draw(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1) {
                            362 ;	-----------------------------------------
                            363 ;	 function GMB_draw
                            364 ;	-----------------------------------------
   00D4                     365 _GMB_draw:
   00D4 E5 82               366 	mov	a,dpl
                    00D6    367 	C$gameboard.c$55$1$1 ==.
                            368 ;	../gameboard.c:55: T6963C_writeAt(x0, y0, OBSTACLE_A);
   00D6 90s00r05            369 	mov	dptr,#_GMB_draw_x0_1_1
   00D9 F0                  370 	movx	@dptr,a
   00DA FA                  371 	mov	r2,a
   00DB 90s00r02            372 	mov	dptr,#_GMB_draw_PARM_2
   00DE E0                  373 	movx	a,@dptr
   00DF FB                  374 	mov	r3,a
   00E0 90s00r00            375 	mov	dptr,#_T6963C_writeAt_PARM_2
   00E3 F0                  376 	movx	@dptr,a
   00E4 90s00r00            377 	mov	dptr,#_T6963C_writeAt_PARM_3
   00E7 74 21               378 	mov	a,#0x21
   00E9 F0                  379 	movx	@dptr,a
   00EA 8A 82               380 	mov	dpl,r2
   00EC C0 02               381 	push	ar2
   00EE C0 03               382 	push	ar3
   00F0 12s00r00            383 	lcall	_T6963C_writeAt
   00F3 D0 03               384 	pop	ar3
                    00F5    385 	C$gameboard.c$58$1$1 ==.
                            386 ;	../gameboard.c:58: T6963C_writeAt(x1, y0, OBSTACLE_C);
   00F5 90s00r03            387 	mov	dptr,#_GMB_draw_PARM_3
   00F8 E0                  388 	movx	a,@dptr
   00F9 FC                  389 	mov	r4,a
   00FA 90s00r00            390 	mov	dptr,#_T6963C_writeAt_PARM_2
   00FD EB                  391 	mov	a,r3
   00FE F0                  392 	movx	@dptr,a
   00FF 90s00r00            393 	mov	dptr,#_T6963C_writeAt_PARM_3
   0102 74 23               394 	mov	a,#0x23
   0104 F0                  395 	movx	@dptr,a
   0105 8C 82               396 	mov	dpl,r4
   0107 C0 03               397 	push	ar3
   0109 C0 04               398 	push	ar4
   010B 12s00r00            399 	lcall	_T6963C_writeAt
   010E D0 04               400 	pop	ar4
   0110 D0 03               401 	pop	ar3
   0112 D0 02               402 	pop	ar2
                    0114    403 	C$gameboard.c$61$1$1 ==.
                            404 ;	../gameboard.c:61: for (x = x0 + 1; x < x1; x++){
   0114 90s00r06            405 	mov	dptr,#_GMB_draw_x_1_1
   0117 EA                  406 	mov	a,r2
   0118 04                  407 	inc	a
   0119 F0                  408 	movx	@dptr,a
   011A                     409 00101$:
   011A 90s00r06            410 	mov	dptr,#_GMB_draw_x_1_1
   011D E0                  411 	movx	a,@dptr
   011E FD                  412 	mov	r5,a
   011F B5 04 00            413 	cjne	a,ar4,00121$
   0122                     414 00121$:
   0122 50 28               415 	jnc	00104$
                    0124    416 	C$gameboard.c$62$2$2 ==.
                            417 ;	../gameboard.c:62: T6963C_writeAt(x, y0, OBSTACLE_B);
   0124 90s00r00            418 	mov	dptr,#_T6963C_writeAt_PARM_2
   0127 EB                  419 	mov	a,r3
   0128 F0                  420 	movx	@dptr,a
   0129 90s00r00            421 	mov	dptr,#_T6963C_writeAt_PARM_3
   012C 74 22               422 	mov	a,#0x22
   012E F0                  423 	movx	@dptr,a
   012F 8D 82               424 	mov	dpl,r5
   0131 C0 02               425 	push	ar2
   0133 C0 03               426 	push	ar3
   0135 C0 04               427 	push	ar4
   0137 C0 05               428 	push	ar5
   0139 12s00r00            429 	lcall	_T6963C_writeAt
   013C D0 05               430 	pop	ar5
   013E D0 04               431 	pop	ar4
   0140 D0 03               432 	pop	ar3
   0142 D0 02               433 	pop	ar2
                    0144    434 	C$gameboard.c$61$1$1 ==.
                            435 ;	../gameboard.c:61: for (x = x0 + 1; x < x1; x++){
   0144 90s00r06            436 	mov	dptr,#_GMB_draw_x_1_1
   0147 ED                  437 	mov	a,r5
   0148 04                  438 	inc	a
   0149 F0                  439 	movx	@dptr,a
   014A 80 CE               440 	sjmp	00101$
   014C                     441 00104$:
                    014C    442 	C$gameboard.c$68$1$1 ==.
                            443 ;	../gameboard.c:68: T6963C_writeAt(x0, y1, OBSTACLE_F);
   014C 90s00r04            444 	mov	dptr,#_GMB_draw_PARM_4
   014F E0                  445 	movx	a,@dptr
   0150 FD                  446 	mov	r5,a
   0151 90s00r00            447 	mov	dptr,#_T6963C_writeAt_PARM_2
   0154 F0                  448 	movx	@dptr,a
   0155 90s00r00            449 	mov	dptr,#_T6963C_writeAt_PARM_3
   0158 74 26               450 	mov	a,#0x26
   015A F0                  451 	movx	@dptr,a
   015B 8A 82               452 	mov	dpl,r2
   015D C0 02               453 	push	ar2
   015F C0 03               454 	push	ar3
   0161 C0 04               455 	push	ar4
   0163 C0 05               456 	push	ar5
   0165 12s00r00            457 	lcall	_T6963C_writeAt
   0168 D0 05               458 	pop	ar5
   016A D0 04               459 	pop	ar4
                    016C    460 	C$gameboard.c$71$1$1 ==.
                            461 ;	../gameboard.c:71: T6963C_writeAt(x1, y1, OBSTACLE_H);
   016C 90s00r00            462 	mov	dptr,#_T6963C_writeAt_PARM_2
   016F ED                  463 	mov	a,r5
   0170 F0                  464 	movx	@dptr,a
   0171 90s00r00            465 	mov	dptr,#_T6963C_writeAt_PARM_3
   0174 74 28               466 	mov	a,#0x28
   0176 F0                  467 	movx	@dptr,a
   0177 8C 82               468 	mov	dpl,r4
   0179 C0 04               469 	push	ar4
   017B C0 05               470 	push	ar5
   017D 12s00r00            471 	lcall	_T6963C_writeAt
   0180 D0 05               472 	pop	ar5
   0182 D0 04               473 	pop	ar4
   0184 D0 03               474 	pop	ar3
   0186 D0 02               475 	pop	ar2
                    0188    476 	C$gameboard.c$74$1$1 ==.
                            477 ;	../gameboard.c:74: for (x = x0 + 1; x < x1; x++){
   0188 90s00r06            478 	mov	dptr,#_GMB_draw_x_1_1
   018B EA                  479 	mov	a,r2
   018C 04                  480 	inc	a
   018D F0                  481 	movx	@dptr,a
   018E                     482 00105$:
   018E 90s00r06            483 	mov	dptr,#_GMB_draw_x_1_1
   0191 E0                  484 	movx	a,@dptr
   0192 FE                  485 	mov	r6,a
   0193 B5 04 00            486 	cjne	a,ar4,00123$
   0196                     487 00123$:
   0196 50 2C               488 	jnc	00108$
                    0198    489 	C$gameboard.c$75$2$3 ==.
                            490 ;	../gameboard.c:75: T6963C_writeAt(x, y1, OBSTACLE_G);
   0198 90s00r00            491 	mov	dptr,#_T6963C_writeAt_PARM_2
   019B ED                  492 	mov	a,r5
   019C F0                  493 	movx	@dptr,a
   019D 90s00r00            494 	mov	dptr,#_T6963C_writeAt_PARM_3
   01A0 74 27               495 	mov	a,#0x27
   01A2 F0                  496 	movx	@dptr,a
   01A3 8E 82               497 	mov	dpl,r6
   01A5 C0 02               498 	push	ar2
   01A7 C0 03               499 	push	ar3
   01A9 C0 04               500 	push	ar4
   01AB C0 05               501 	push	ar5
   01AD C0 06               502 	push	ar6
   01AF 12s00r00            503 	lcall	_T6963C_writeAt
   01B2 D0 06               504 	pop	ar6
   01B4 D0 05               505 	pop	ar5
   01B6 D0 04               506 	pop	ar4
   01B8 D0 03               507 	pop	ar3
   01BA D0 02               508 	pop	ar2
                    01BC    509 	C$gameboard.c$74$1$1 ==.
                            510 ;	../gameboard.c:74: for (x = x0 + 1; x < x1; x++){
   01BC 90s00r06            511 	mov	dptr,#_GMB_draw_x_1_1
   01BF EE                  512 	mov	a,r6
   01C0 04                  513 	inc	a
   01C1 F0                  514 	movx	@dptr,a
   01C2 80 CA               515 	sjmp	00105$
   01C4                     516 00108$:
                    01C4    517 	C$gameboard.c$80$1$1 ==.
                            518 ;	../gameboard.c:80: for (y = y0 + 1; y < y1; y++){
   01C4 90s00r07            519 	mov	dptr,#_GMB_draw_y_1_1
   01C7 EB                  520 	mov	a,r3
   01C8 04                  521 	inc	a
   01C9 F0                  522 	movx	@dptr,a
   01CA                     523 00109$:
   01CA 90s00r07            524 	mov	dptr,#_GMB_draw_y_1_1
   01CD E0                  525 	movx	a,@dptr
   01CE FB                  526 	mov	r3,a
   01CF B5 05 00            527 	cjne	a,ar5,00125$
   01D2                     528 00125$:
   01D2 50 48               529 	jnc	00113$
                    01D4    530 	C$gameboard.c$82$2$4 ==.
                            531 ;	../gameboard.c:82: T6963C_writeAt(x1, y, OBSTACLE_E);
   01D4 90s00r00            532 	mov	dptr,#_T6963C_writeAt_PARM_2
   01D7 EB                  533 	mov	a,r3
   01D8 F0                  534 	movx	@dptr,a
   01D9 90s00r00            535 	mov	dptr,#_T6963C_writeAt_PARM_3
   01DC 74 25               536 	mov	a,#0x25
   01DE F0                  537 	movx	@dptr,a
   01DF 8C 82               538 	mov	dpl,r4
   01E1 C0 02               539 	push	ar2
   01E3 C0 03               540 	push	ar3
   01E5 C0 04               541 	push	ar4
   01E7 C0 05               542 	push	ar5
   01E9 12s00r00            543 	lcall	_T6963C_writeAt
   01EC D0 05               544 	pop	ar5
   01EE D0 04               545 	pop	ar4
   01F0 D0 03               546 	pop	ar3
   01F2 D0 02               547 	pop	ar2
                    01F4    548 	C$gameboard.c$85$2$4 ==.
                            549 ;	../gameboard.c:85: T6963C_writeAt(x0, y, OBSTACLE_D);
   01F4 90s00r00            550 	mov	dptr,#_T6963C_writeAt_PARM_2
   01F7 EB                  551 	mov	a,r3
   01F8 F0                  552 	movx	@dptr,a
   01F9 90s00r00            553 	mov	dptr,#_T6963C_writeAt_PARM_3
   01FC 74 24               554 	mov	a,#0x24
   01FE F0                  555 	movx	@dptr,a
   01FF 8A 82               556 	mov	dpl,r2
   0201 C0 02               557 	push	ar2
   0203 C0 03               558 	push	ar3
   0205 C0 04               559 	push	ar4
   0207 C0 05               560 	push	ar5
   0209 12s00r00            561 	lcall	_T6963C_writeAt
   020C D0 05               562 	pop	ar5
   020E D0 04               563 	pop	ar4
   0210 D0 03               564 	pop	ar3
   0212 D0 02               565 	pop	ar2
                    0214    566 	C$gameboard.c$80$1$1 ==.
                            567 ;	../gameboard.c:80: for (y = y0 + 1; y < y1; y++){
   0214 90s00r07            568 	mov	dptr,#_GMB_draw_y_1_1
   0217 EB                  569 	mov	a,r3
   0218 04                  570 	inc	a
   0219 F0                  571 	movx	@dptr,a
   021A 80 AE               572 	sjmp	00109$
   021C                     573 00113$:
                    021C    574 	C$gameboard.c$87$1$1 ==.
                    021C    575 	XG$GMB_draw$0$0 ==.
   021C 22                  576 	ret
                            577 ;------------------------------------------------------------
                            578 ;Allocation info for local variables in function 'GMB_clear'
                            579 ;------------------------------------------------------------
                            580 ;y0                        Allocated with name '_GMB_clear_PARM_2'
                            581 ;x1                        Allocated with name '_GMB_clear_PARM_3'
                            582 ;y1                        Allocated with name '_GMB_clear_PARM_4'
                            583 ;x0                        Allocated with name '_GMB_clear_x0_1_1'
                            584 ;x                         Allocated with name '_GMB_clear_x_1_1'
                            585 ;y                         Allocated with name '_GMB_clear_y_1_1'
                            586 ;------------------------------------------------------------
                    021D    587 	G$GMB_clear$0$0 ==.
                    021D    588 	C$gameboard.c$95$1$1 ==.
                            589 ;	../gameboard.c:95: void GMB_clear(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1) {
                            590 ;	-----------------------------------------
                            591 ;	 function GMB_clear
                            592 ;	-----------------------------------------
   021D                     593 _GMB_clear:
   021D E5 82               594 	mov	a,dpl
                    021F    595 	C$gameboard.c$99$1$1 ==.
                            596 ;	../gameboard.c:99: for (x = x0; x <= x1; x++){
   021F 90s00r0B            597 	mov	dptr,#_GMB_clear_x0_1_1
   0222 F0                  598 	movx	@dptr,a
   0223 FA                  599 	mov	r2,a
   0224 90s00r0C            600 	mov	dptr,#_GMB_clear_x_1_1
   0227 F0                  601 	movx	@dptr,a
   0228 90s00r08            602 	mov	dptr,#_GMB_clear_PARM_2
   022B E0                  603 	movx	a,@dptr
   022C FB                  604 	mov	r3,a
   022D 90s00r09            605 	mov	dptr,#_GMB_clear_PARM_3
   0230 E0                  606 	movx	a,@dptr
   0231 FC                  607 	mov	r4,a
   0232                     608 00101$:
   0232 90s00r0C            609 	mov	dptr,#_GMB_clear_x_1_1
   0235 E0                  610 	movx	a,@dptr
   0236 FD                  611 	mov	r5,a
   0237 EC                  612 	mov	a,r4
   0238 B5 05 00            613 	cjne	a,ar5,00127$
   023B                     614 00127$:
   023B 40 27               615 	jc	00104$
                    023D    616 	C$gameboard.c$100$2$2 ==.
                            617 ;	../gameboard.c:100: T6963C_writeAt(x, y0, EMPTY);
   023D 90s00r00            618 	mov	dptr,#_T6963C_writeAt_PARM_2
   0240 EB                  619 	mov	a,r3
   0241 F0                  620 	movx	@dptr,a
   0242 90s00r00            621 	mov	dptr,#_T6963C_writeAt_PARM_3
   0245 E4                  622 	clr	a
   0246 F0                  623 	movx	@dptr,a
   0247 8D 82               624 	mov	dpl,r5
   0249 C0 02               625 	push	ar2
   024B C0 03               626 	push	ar3
   024D C0 04               627 	push	ar4
   024F C0 05               628 	push	ar5
   0251 12s00r00            629 	lcall	_T6963C_writeAt
   0254 D0 05               630 	pop	ar5
   0256 D0 04               631 	pop	ar4
   0258 D0 03               632 	pop	ar3
   025A D0 02               633 	pop	ar2
                    025C    634 	C$gameboard.c$99$1$1 ==.
                            635 ;	../gameboard.c:99: for (x = x0; x <= x1; x++){
   025C 90s00r0C            636 	mov	dptr,#_GMB_clear_x_1_1
   025F ED                  637 	mov	a,r5
   0260 04                  638 	inc	a
   0261 F0                  639 	movx	@dptr,a
   0262 80 CE               640 	sjmp	00101$
   0264                     641 00104$:
                    0264    642 	C$gameboard.c$104$1$1 ==.
                            643 ;	../gameboard.c:104: for (x = x0; x <= x1; x++){
   0264 90s00r0C            644 	mov	dptr,#_GMB_clear_x_1_1
   0267 EA                  645 	mov	a,r2
   0268 F0                  646 	movx	@dptr,a
   0269 90s00r0A            647 	mov	dptr,#_GMB_clear_PARM_4
   026C E0                  648 	movx	a,@dptr
   026D FD                  649 	mov	r5,a
   026E                     650 00105$:
   026E 90s00r0C            651 	mov	dptr,#_GMB_clear_x_1_1
   0271 E0                  652 	movx	a,@dptr
   0272 FE                  653 	mov	r6,a
   0273 EC                  654 	mov	a,r4
   0274 B5 06 00            655 	cjne	a,ar6,00129$
   0277                     656 00129$:
   0277 40 2B               657 	jc	00108$
                    0279    658 	C$gameboard.c$105$2$3 ==.
                            659 ;	../gameboard.c:105: T6963C_writeAt(x, y1, EMPTY);
   0279 90s00r00            660 	mov	dptr,#_T6963C_writeAt_PARM_2
   027C ED                  661 	mov	a,r5
   027D F0                  662 	movx	@dptr,a
   027E 90s00r00            663 	mov	dptr,#_T6963C_writeAt_PARM_3
   0281 E4                  664 	clr	a
   0282 F0                  665 	movx	@dptr,a
   0283 8E 82               666 	mov	dpl,r6
   0285 C0 02               667 	push	ar2
   0287 C0 03               668 	push	ar3
   0289 C0 04               669 	push	ar4
   028B C0 05               670 	push	ar5
   028D C0 06               671 	push	ar6
   028F 12s00r00            672 	lcall	_T6963C_writeAt
   0292 D0 06               673 	pop	ar6
   0294 D0 05               674 	pop	ar5
   0296 D0 04               675 	pop	ar4
   0298 D0 03               676 	pop	ar3
   029A D0 02               677 	pop	ar2
                    029C    678 	C$gameboard.c$104$1$1 ==.
                            679 ;	../gameboard.c:104: for (x = x0; x <= x1; x++){
   029C 90s00r0C            680 	mov	dptr,#_GMB_clear_x_1_1
   029F EE                  681 	mov	a,r6
   02A0 04                  682 	inc	a
   02A1 F0                  683 	movx	@dptr,a
   02A2 80 CA               684 	sjmp	00105$
   02A4                     685 00108$:
                    02A4    686 	C$gameboard.c$109$1$1 ==.
                            687 ;	../gameboard.c:109: for (y = y0 + 1; y < y1; y++){
   02A4 90s00r0D            688 	mov	dptr,#_GMB_clear_y_1_1
   02A7 EB                  689 	mov	a,r3
   02A8 04                  690 	inc	a
   02A9 F0                  691 	movx	@dptr,a
   02AA EA                  692 	mov	a,r2
   02AB 04                  693 	inc	a
   02AC FB                  694 	mov	r3,a
   02AD                     695 00113$:
   02AD 90s00r0D            696 	mov	dptr,#_GMB_clear_y_1_1
   02B0 E0                  697 	movx	a,@dptr
   02B1 FE                  698 	mov	r6,a
   02B2 B5 05 00            699 	cjne	a,ar5,00131$
   02B5                     700 00131$:
   02B5 40 01               701 	jc	00132$
   02B7 22                  702 	ret
   02B8                     703 00132$:
                    02B8    704 	C$gameboard.c$111$2$4 ==.
                            705 ;	../gameboard.c:111: T6963C_writeAt(x1, y, EMPTY);
   02B8 90s00r00            706 	mov	dptr,#_T6963C_writeAt_PARM_2
   02BB EE                  707 	mov	a,r6
   02BC F0                  708 	movx	@dptr,a
   02BD 90s00r00            709 	mov	dptr,#_T6963C_writeAt_PARM_3
   02C0 E4                  710 	clr	a
   02C1 F0                  711 	movx	@dptr,a
   02C2 8C 82               712 	mov	dpl,r4
   02C4 C0 02               713 	push	ar2
   02C6 C0 03               714 	push	ar3
   02C8 C0 04               715 	push	ar4
   02CA C0 05               716 	push	ar5
   02CC C0 06               717 	push	ar6
   02CE 12s00r00            718 	lcall	_T6963C_writeAt
   02D1 D0 06               719 	pop	ar6
   02D3 D0 05               720 	pop	ar5
   02D5 D0 04               721 	pop	ar4
   02D7 D0 03               722 	pop	ar3
   02D9 D0 02               723 	pop	ar2
                    02DB    724 	C$gameboard.c$114$2$4 ==.
                            725 ;	../gameboard.c:114: T6963C_writeAt(x0, y, EMPTY);
   02DB 90s00r00            726 	mov	dptr,#_T6963C_writeAt_PARM_2
   02DE EE                  727 	mov	a,r6
   02DF F0                  728 	movx	@dptr,a
   02E0 90s00r00            729 	mov	dptr,#_T6963C_writeAt_PARM_3
   02E3 E4                  730 	clr	a
   02E4 F0                  731 	movx	@dptr,a
   02E5 8A 82               732 	mov	dpl,r2
   02E7 C0 02               733 	push	ar2
   02E9 C0 03               734 	push	ar3
   02EB C0 04               735 	push	ar4
   02ED C0 05               736 	push	ar5
   02EF C0 06               737 	push	ar6
   02F1 12s00r00            738 	lcall	_T6963C_writeAt
   02F4 D0 06               739 	pop	ar6
   02F6 D0 05               740 	pop	ar5
   02F8 D0 04               741 	pop	ar4
   02FA D0 03               742 	pop	ar3
   02FC D0 02               743 	pop	ar2
                    02FE    744 	C$gameboard.c$117$2$4 ==.
                            745 ;	../gameboard.c:117: for(x = x0 + 1; x < x1; x++){
   02FE 90s00r0C            746 	mov	dptr,#_GMB_clear_x_1_1
   0301 EB                  747 	mov	a,r3
   0302 F0                  748 	movx	@dptr,a
   0303                     749 00109$:
   0303 90s00r0C            750 	mov	dptr,#_GMB_clear_x_1_1
   0306 E0                  751 	movx	a,@dptr
   0307 FF                  752 	mov	r7,a
   0308 B5 04 00            753 	cjne	a,ar4,00133$
   030B                     754 00133$:
   030B 50 2F               755 	jnc	00115$
                    030D    756 	C$gameboard.c$118$3$5 ==.
                            757 ;	../gameboard.c:118: T6963C_writeAt(x, y, EMPTY);
   030D 90s00r00            758 	mov	dptr,#_T6963C_writeAt_PARM_2
   0310 EE                  759 	mov	a,r6
   0311 F0                  760 	movx	@dptr,a
   0312 90s00r00            761 	mov	dptr,#_T6963C_writeAt_PARM_3
   0315 E4                  762 	clr	a
   0316 F0                  763 	movx	@dptr,a
   0317 8F 82               764 	mov	dpl,r7
   0319 C0 02               765 	push	ar2
   031B C0 03               766 	push	ar3
   031D C0 04               767 	push	ar4
   031F C0 05               768 	push	ar5
   0321 C0 06               769 	push	ar6
   0323 C0 07               770 	push	ar7
   0325 12s00r00            771 	lcall	_T6963C_writeAt
   0328 D0 07               772 	pop	ar7
   032A D0 06               773 	pop	ar6
   032C D0 05               774 	pop	ar5
   032E D0 04               775 	pop	ar4
   0330 D0 03               776 	pop	ar3
   0332 D0 02               777 	pop	ar2
                    0334    778 	C$gameboard.c$117$2$4 ==.
                            779 ;	../gameboard.c:117: for(x = x0 + 1; x < x1; x++){
   0334 90s00r0C            780 	mov	dptr,#_GMB_clear_x_1_1
   0337 EF                  781 	mov	a,r7
   0338 04                  782 	inc	a
   0339 F0                  783 	movx	@dptr,a
   033A 80 C7               784 	sjmp	00109$
   033C                     785 00115$:
                    033C    786 	C$gameboard.c$109$1$1 ==.
                            787 ;	../gameboard.c:109: for (y = y0 + 1; y < y1; y++){
   033C 90s00r0D            788 	mov	dptr,#_GMB_clear_y_1_1
   033F E0                  789 	movx	a,@dptr
   0340 24 01               790 	add	a,#0x01
   0342 F0                  791 	movx	@dptr,a
                    0343    792 	C$gameboard.c$121$1$1 ==.
                    0343    793 	XG$GMB_clear$0$0 ==.
   0343 02s02rAD            794 	ljmp	00113$
                            795 ;------------------------------------------------------------
                            796 ;Allocation info for local variables in function 'GMB_display'
                            797 ;------------------------------------------------------------
                            798 ;sloc0                     Allocated with name '_GMB_display_sloc0_1_0'
                            799 ;sloc1                     Allocated with name '_GMB_display_sloc1_1_0'
                            800 ;y0                        Allocated with name '_GMB_display_PARM_2'
                            801 ;text                      Allocated with name '_GMB_display_PARM_3'
                            802 ;x0                        Allocated with name '_GMB_display_x0_1_1'
                            803 ;x                         Allocated with name '_GMB_display_x_1_1'
                            804 ;i                         Allocated with name '_GMB_display_i_1_1'
                            805 ;longueurTexte             Allocated with name '_GMB_display_longueurTexte_1_1'
                            806 ;x1                        Allocated with name '_GMB_display_x1_1_1'
                            807 ;y1                        Allocated with name '_GMB_display_y1_1_1'
                            808 ;------------------------------------------------------------
                    0346    809 	G$GMB_display$0$0 ==.
                    0346    810 	C$gameboard.c$130$1$1 ==.
                            811 ;	../gameboard.c:130: void GMB_display(unsigned char x0, unsigned char y0, char *text) {
                            812 ;	-----------------------------------------
                            813 ;	 function GMB_display
                            814 ;	-----------------------------------------
   0346                     815 _GMB_display:
   0346 E5 82               816 	mov	a,dpl
   0348 90s00r12            817 	mov	dptr,#_GMB_display_x0_1_1
   034B F0                  818 	movx	@dptr,a
                    034C    819 	C$gameboard.c$132$1$1 ==.
                            820 ;	../gameboard.c:132: unsigned i = 0;
   034C 90s00r14            821 	mov	dptr,#_GMB_display_i_1_1
   034F E4                  822 	clr	a
   0350 F0                  823 	movx	@dptr,a
   0351 A3                  824 	inc	dptr
   0352 F0                  825 	movx	@dptr,a
                    0353    826 	C$gameboard.c$133$1$1 ==.
                            827 ;	../gameboard.c:133: unsigned char longueurTexte = strlen(text);
   0353 90s00r0F            828 	mov	dptr,#_GMB_display_PARM_3
   0356 E0                  829 	movx	a,@dptr
   0357 FA                  830 	mov	r2,a
   0358 A3                  831 	inc	dptr
   0359 E0                  832 	movx	a,@dptr
   035A FB                  833 	mov	r3,a
   035B A3                  834 	inc	dptr
   035C E0                  835 	movx	a,@dptr
   035D FC                  836 	mov	r4,a
   035E 8A 82               837 	mov	dpl,r2
   0360 8B 83               838 	mov	dph,r3
   0362 8C F0               839 	mov	b,r4
   0364 12s00r00            840 	lcall	_strlen
   0367 AA 82               841 	mov	r2,dpl
                    0369    842 	C$gameboard.c$134$1$1 ==.
                            843 ;	../gameboard.c:134: unsigned char x1 = x0 + longueurTexte + 1;
   0369 90s00r12            844 	mov	dptr,#_GMB_display_x0_1_1
   036C E0                  845 	movx	a,@dptr
   036D FB                  846 	mov	r3,a
   036E 2A                  847 	add	a,r2
   036F 04                  848 	inc	a
   0370 FA                  849 	mov	r2,a
                    0371    850 	C$gameboard.c$135$1$1 ==.
                            851 ;	../gameboard.c:135: unsigned char y1 = y0 + 2;
   0371 90s00r0E            852 	mov	dptr,#_GMB_display_PARM_2
   0374 E0                  853 	movx	a,@dptr
   0375 FC                  854 	mov	r4,a
   0376 24 02               855 	add	a,#0x02
   0378 FD                  856 	mov	r5,a
                    0379    857 	C$gameboard.c$139$1$1 ==.
                            858 ;	../gameboard.c:139: T6963C_writeAt(x0, y0, OBSTACLE_A);
   0379 90s00r00            859 	mov	dptr,#_T6963C_writeAt_PARM_2
   037C EC                  860 	mov	a,r4
   037D F0                  861 	movx	@dptr,a
   037E 90s00r00            862 	mov	dptr,#_T6963C_writeAt_PARM_3
   0381 74 21               863 	mov	a,#0x21
   0383 F0                  864 	movx	@dptr,a
   0384 8B 82               865 	mov	dpl,r3
   0386 C0 02               866 	push	ar2
   0388 C0 03               867 	push	ar3
   038A C0 04               868 	push	ar4
   038C C0 05               869 	push	ar5
   038E 12s00r00            870 	lcall	_T6963C_writeAt
   0391 D0 05               871 	pop	ar5
   0393 D0 04               872 	pop	ar4
   0395 D0 03               873 	pop	ar3
   0397 D0 02               874 	pop	ar2
                    0399    875 	C$gameboard.c$142$1$1 ==.
                            876 ;	../gameboard.c:142: T6963C_writeAt(x1, y0, OBSTACLE_C);
   0399 90s00r00            877 	mov	dptr,#_T6963C_writeAt_PARM_2
   039C EC                  878 	mov	a,r4
   039D F0                  879 	movx	@dptr,a
   039E 90s00r00            880 	mov	dptr,#_T6963C_writeAt_PARM_3
   03A1 74 23               881 	mov	a,#0x23
   03A3 F0                  882 	movx	@dptr,a
   03A4 8A 82               883 	mov	dpl,r2
   03A6 C0 02               884 	push	ar2
   03A8 C0 03               885 	push	ar3
   03AA C0 04               886 	push	ar4
   03AC C0 05               887 	push	ar5
   03AE 12s00r00            888 	lcall	_T6963C_writeAt
   03B1 D0 05               889 	pop	ar5
   03B3 D0 04               890 	pop	ar4
   03B5 D0 03               891 	pop	ar3
   03B7 D0 02               892 	pop	ar2
                    03B9    893 	C$gameboard.c$145$1$1 ==.
                            894 ;	../gameboard.c:145: for (x = x0 + 1; x < x1; x++){
   03B9 90s00r13            895 	mov	dptr,#_GMB_display_x_1_1
   03BC EB                  896 	mov	a,r3
   03BD 04                  897 	inc	a
   03BE F0                  898 	movx	@dptr,a
   03BF                     899 00101$:
   03BF 90s00r13            900 	mov	dptr,#_GMB_display_x_1_1
   03C2 E0                  901 	movx	a,@dptr
   03C3 FE                  902 	mov	r6,a
   03C4 B5 02 00            903 	cjne	a,ar2,00121$
   03C7                     904 00121$:
   03C7 50 2C               905 	jnc	00104$
                    03C9    906 	C$gameboard.c$146$2$2 ==.
                            907 ;	../gameboard.c:146: T6963C_writeAt(x, y0, OBSTACLE_B);
   03C9 90s00r00            908 	mov	dptr,#_T6963C_writeAt_PARM_2
   03CC EC                  909 	mov	a,r4
   03CD F0                  910 	movx	@dptr,a
   03CE 90s00r00            911 	mov	dptr,#_T6963C_writeAt_PARM_3
   03D1 74 22               912 	mov	a,#0x22
   03D3 F0                  913 	movx	@dptr,a
   03D4 8E 82               914 	mov	dpl,r6
   03D6 C0 02               915 	push	ar2
   03D8 C0 03               916 	push	ar3
   03DA C0 04               917 	push	ar4
   03DC C0 05               918 	push	ar5
   03DE C0 06               919 	push	ar6
   03E0 12s00r00            920 	lcall	_T6963C_writeAt
   03E3 D0 06               921 	pop	ar6
   03E5 D0 05               922 	pop	ar5
   03E7 D0 04               923 	pop	ar4
   03E9 D0 03               924 	pop	ar3
   03EB D0 02               925 	pop	ar2
                    03ED    926 	C$gameboard.c$145$1$1 ==.
                            927 ;	../gameboard.c:145: for (x = x0 + 1; x < x1; x++){
   03ED 90s00r13            928 	mov	dptr,#_GMB_display_x_1_1
   03F0 EE                  929 	mov	a,r6
   03F1 04                  930 	inc	a
   03F2 F0                  931 	movx	@dptr,a
   03F3 80 CA               932 	sjmp	00101$
   03F5                     933 00104$:
                    03F5    934 	C$gameboard.c$152$1$1 ==.
                            935 ;	../gameboard.c:152: T6963C_writeAt(x0, y1, OBSTACLE_F);
   03F5 90s00r00            936 	mov	dptr,#_T6963C_writeAt_PARM_2
   03F8 ED                  937 	mov	a,r5
   03F9 F0                  938 	movx	@dptr,a
   03FA 90s00r00            939 	mov	dptr,#_T6963C_writeAt_PARM_3
   03FD 74 26               940 	mov	a,#0x26
   03FF F0                  941 	movx	@dptr,a
   0400 8B 82               942 	mov	dpl,r3
   0402 C0 02               943 	push	ar2
   0404 C0 03               944 	push	ar3
   0406 C0 04               945 	push	ar4
   0408 C0 05               946 	push	ar5
   040A 12s00r00            947 	lcall	_T6963C_writeAt
   040D D0 05               948 	pop	ar5
   040F D0 04               949 	pop	ar4
   0411 D0 03               950 	pop	ar3
   0413 D0 02               951 	pop	ar2
                    0415    952 	C$gameboard.c$155$1$1 ==.
                            953 ;	../gameboard.c:155: T6963C_writeAt(x1, y1, OBSTACLE_H);
   0415 90s00r00            954 	mov	dptr,#_T6963C_writeAt_PARM_2
   0418 ED                  955 	mov	a,r5
   0419 F0                  956 	movx	@dptr,a
   041A 90s00r00            957 	mov	dptr,#_T6963C_writeAt_PARM_3
   041D 74 28               958 	mov	a,#0x28
   041F F0                  959 	movx	@dptr,a
   0420 8A 82               960 	mov	dpl,r2
   0422 C0 02               961 	push	ar2
   0424 C0 03               962 	push	ar3
   0426 C0 04               963 	push	ar4
   0428 C0 05               964 	push	ar5
   042A 12s00r00            965 	lcall	_T6963C_writeAt
   042D D0 05               966 	pop	ar5
   042F D0 04               967 	pop	ar4
   0431 D0 03               968 	pop	ar3
   0433 D0 02               969 	pop	ar2
                    0435    970 	C$gameboard.c$158$1$1 ==.
                            971 ;	../gameboard.c:158: for (x = x0 + 1; x < x1; x++){
   0435 90s00r13            972 	mov	dptr,#_GMB_display_x_1_1
   0438 EB                  973 	mov	a,r3
   0439 04                  974 	inc	a
   043A F0                  975 	movx	@dptr,a
   043B                     976 00105$:
   043B 90s00r13            977 	mov	dptr,#_GMB_display_x_1_1
   043E E0                  978 	movx	a,@dptr
   043F FE                  979 	mov	r6,a
   0440 B5 02 00            980 	cjne	a,ar2,00123$
   0443                     981 00123$:
   0443 50 2C               982 	jnc	00108$
                    0445    983 	C$gameboard.c$159$2$3 ==.
                            984 ;	../gameboard.c:159: T6963C_writeAt(x, y1, OBSTACLE_G);
   0445 90s00r00            985 	mov	dptr,#_T6963C_writeAt_PARM_2
   0448 ED                  986 	mov	a,r5
   0449 F0                  987 	movx	@dptr,a
   044A 90s00r00            988 	mov	dptr,#_T6963C_writeAt_PARM_3
   044D 74 27               989 	mov	a,#0x27
   044F F0                  990 	movx	@dptr,a
   0450 8E 82               991 	mov	dpl,r6
   0452 C0 02               992 	push	ar2
   0454 C0 03               993 	push	ar3
   0456 C0 04               994 	push	ar4
   0458 C0 05               995 	push	ar5
   045A C0 06               996 	push	ar6
   045C 12s00r00            997 	lcall	_T6963C_writeAt
   045F D0 06               998 	pop	ar6
   0461 D0 05               999 	pop	ar5
   0463 D0 04              1000 	pop	ar4
   0465 D0 03              1001 	pop	ar3
   0467 D0 02              1002 	pop	ar2
                    0469   1003 	C$gameboard.c$158$1$1 ==.
                           1004 ;	../gameboard.c:158: for (x = x0 + 1; x < x1; x++){
   0469 90s00r13           1005 	mov	dptr,#_GMB_display_x_1_1
   046C EE                 1006 	mov	a,r6
   046D 04                 1007 	inc	a
   046E F0                 1008 	movx	@dptr,a
   046F 80 CA              1009 	sjmp	00105$
   0471                    1010 00108$:
                    0471   1011 	C$gameboard.c$165$1$1 ==.
                           1012 ;	../gameboard.c:165: T6963C_writeAt(x1, y0 + 1, OBSTACLE_E);
   0471 EC                 1013 	mov	a,r4
   0472 04                 1014 	inc	a
   0473 FD                 1015 	mov	r5,a
   0474 90s00r00           1016 	mov	dptr,#_T6963C_writeAt_PARM_2
   0477 F0                 1017 	movx	@dptr,a
   0478 90s00r00           1018 	mov	dptr,#_T6963C_writeAt_PARM_3
   047B 74 25              1019 	mov	a,#0x25
   047D F0                 1020 	movx	@dptr,a
   047E 8A 82              1021 	mov	dpl,r2
   0480 C0 02              1022 	push	ar2
   0482 C0 03              1023 	push	ar3
   0484 C0 04              1024 	push	ar4
   0486 C0 05              1025 	push	ar5
   0488 12s00r00           1026 	lcall	_T6963C_writeAt
   048B D0 05              1027 	pop	ar5
   048D D0 04              1028 	pop	ar4
   048F D0 03              1029 	pop	ar3
                    0491   1030 	C$gameboard.c$168$1$1 ==.
                           1031 ;	../gameboard.c:168: T6963C_writeAt(x0, y0 + 1, OBSTACLE_D);
   0491 90s00r00           1032 	mov	dptr,#_T6963C_writeAt_PARM_2
   0494 ED                 1033 	mov	a,r5
   0495 F0                 1034 	movx	@dptr,a
   0496 90s00r00           1035 	mov	dptr,#_T6963C_writeAt_PARM_3
   0499 74 24              1036 	mov	a,#0x24
   049B F0                 1037 	movx	@dptr,a
   049C 8B 82              1038 	mov	dpl,r3
   049E C0 03              1039 	push	ar3
   04A0 C0 04              1040 	push	ar4
   04A2 12s00r00           1041 	lcall	_T6963C_writeAt
   04A5 D0 04              1042 	pop	ar4
   04A7 D0 03              1043 	pop	ar3
   04A9 D0 02              1044 	pop	ar2
                    04AB   1045 	C$gameboard.c$171$1$1 ==.
                           1046 ;	../gameboard.c:171: for (x = x0 + 1; x < x1; x++){
   04AB 90s00r13           1047 	mov	dptr,#_GMB_display_x_1_1
   04AE EB                 1048 	mov	a,r3
   04AF 04                 1049 	inc	a
   04B0 F0                 1050 	movx	@dptr,a
   04B1 EC                 1051 	mov	a,r4
   04B2 04                 1052 	inc	a
   04B3 F5*00              1053 	mov	_GMB_display_sloc0_1_0,a
   04B5 90s00r0F           1054 	mov	dptr,#_GMB_display_PARM_3
   04B8 E0                 1055 	movx	a,@dptr
   04B9 F5*01              1056 	mov	_GMB_display_sloc1_1_0,a
   04BB A3                 1057 	inc	dptr
   04BC E0                 1058 	movx	a,@dptr
   04BD F5*02              1059 	mov	(_GMB_display_sloc1_1_0 + 1),a
   04BF A3                 1060 	inc	dptr
   04C0 E0                 1061 	movx	a,@dptr
   04C1 F5*03              1062 	mov	(_GMB_display_sloc1_1_0 + 2),a
   04C3                    1063 00109$:
   04C3 90s00r13           1064 	mov	dptr,#_GMB_display_x_1_1
   04C6 E0                 1065 	movx	a,@dptr
   04C7 FF                 1066 	mov	r7,a
   04C8 B5 02 00           1067 	cjne	a,ar2,00125$
   04CB                    1068 00125$:
   04CB 50 55              1069 	jnc	00113$
                    04CD   1070 	C$gameboard.c$172$1$1 ==.
                           1071 ;	../gameboard.c:172: T6963C_writeAt(x, y0 + 1, text[i] - 32);
   04CD C0 02              1072 	push	ar2
   04CF 90s00r14           1073 	mov	dptr,#_GMB_display_i_1_1
   04D2 E0                 1074 	movx	a,@dptr
   04D3 F8                 1075 	mov	r0,a
   04D4 A3                 1076 	inc	dptr
   04D5 E0                 1077 	movx	a,@dptr
   04D6 F9                 1078 	mov	r1,a
   04D7 E8                 1079 	mov	a,r0
   04D8 25*01              1080 	add	a,_GMB_display_sloc1_1_0
   04DA FA                 1081 	mov	r2,a
   04DB E9                 1082 	mov	a,r1
   04DC 35*02              1083 	addc	a,(_GMB_display_sloc1_1_0 + 1)
   04DE FB                 1084 	mov	r3,a
   04DF AC*03              1085 	mov	r4,(_GMB_display_sloc1_1_0 + 2)
   04E1 8A 82              1086 	mov	dpl,r2
   04E3 8B 83              1087 	mov	dph,r3
   04E5 8C F0              1088 	mov	b,r4
   04E7 12s00r00           1089 	lcall	__gptrget
   04EA 24 E0              1090 	add	a,#0xe0
   04EC FA                 1091 	mov	r2,a
   04ED 90s00r00           1092 	mov	dptr,#_T6963C_writeAt_PARM_2
   04F0 E5*00              1093 	mov	a,_GMB_display_sloc0_1_0
   04F2 F0                 1094 	movx	@dptr,a
   04F3 90s00r00           1095 	mov	dptr,#_T6963C_writeAt_PARM_3
   04F6 EA                 1096 	mov	a,r2
   04F7 F0                 1097 	movx	@dptr,a
   04F8 8F 82              1098 	mov	dpl,r7
   04FA C0 02              1099 	push	ar2
   04FC C0 07              1100 	push	ar7
   04FE C0 00              1101 	push	ar0
   0500 C0 01              1102 	push	ar1
   0502 12s00r00           1103 	lcall	_T6963C_writeAt
   0505 D0 01              1104 	pop	ar1
   0507 D0 00              1105 	pop	ar0
   0509 D0 07              1106 	pop	ar7
   050B D0 02              1107 	pop	ar2
                    050D   1108 	C$gameboard.c$173$2$4 ==.
                           1109 ;	../gameboard.c:173: i ++;
   050D 90s00r14           1110 	mov	dptr,#_GMB_display_i_1_1
   0510 74 01              1111 	mov	a,#0x01
   0512 28                 1112 	add	a,r0
   0513 F0                 1113 	movx	@dptr,a
   0514 E4                 1114 	clr	a
   0515 39                 1115 	addc	a,r1
   0516 A3                 1116 	inc	dptr
   0517 F0                 1117 	movx	@dptr,a
                    0518   1118 	C$gameboard.c$171$1$1 ==.
                           1119 ;	../gameboard.c:171: for (x = x0 + 1; x < x1; x++){
   0518 90s00r13           1120 	mov	dptr,#_GMB_display_x_1_1
   051B EF                 1121 	mov	a,r7
   051C 04                 1122 	inc	a
   051D F0                 1123 	movx	@dptr,a
   051E D0 02              1124 	pop	ar2
   0520 80 A1              1125 	sjmp	00109$
   0522                    1126 00113$:
                    0522   1127 	C$gameboard.c$175$1$1 ==.
                    0522   1128 	XG$GMB_display$0$0 ==.
   0522 22                 1129 	ret
                           1130 ;------------------------------------------------------------
                           1131 ;Allocation info for local variables in function 'bddGameboardDraw'
                           1132 ;------------------------------------------------------------
                           1133 ;c                         Allocated with name '_bddGameboardDraw_c_1_1'
                           1134 ;------------------------------------------------------------
                    0523   1135 	G$bddGameboardDraw$0$0 ==.
                    0523   1136 	C$gameboard.c$178$1$1 ==.
                           1137 ;	../gameboard.c:178: int bddGameboardDraw() {
                           1138 ;	-----------------------------------------
                           1139 ;	 function bddGameboardDraw
                           1140 ;	-----------------------------------------
   0523                    1141 _bddGameboardDraw:
                    0523   1142 	C$gameboard.c$179$1$1 ==.
                           1143 ;	../gameboard.c:179: BddExpectedContent c = {
   0523 90s00r16           1144 	mov	dptr,#_bddGameboardDraw_c_1_1
   0526 74 41              1145 	mov	a,#0x41
   0528 F0                 1146 	movx	@dptr,a
   0529 90s00r17           1147 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0001)
   052C 74 42              1148 	mov	a,#0x42
   052E F0                 1149 	movx	@dptr,a
   052F 90s00r18           1150 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0002)
   0532 74 42              1151 	mov	a,#0x42
   0534 F0                 1152 	movx	@dptr,a
   0535 90s00r19           1153 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0003)
   0538 74 42              1154 	mov	a,#0x42
   053A F0                 1155 	movx	@dptr,a
   053B 90s00r1A           1156 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0004)
   053E 74 42              1157 	mov	a,#0x42
   0540 F0                 1158 	movx	@dptr,a
   0541 90s00r1B           1159 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0005)
   0544 74 42              1160 	mov	a,#0x42
   0546 F0                 1161 	movx	@dptr,a
   0547 90s00r1C           1162 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0006)
   054A 74 42              1163 	mov	a,#0x42
   054C F0                 1164 	movx	@dptr,a
   054D 90s00r1D           1165 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0007)
   0550 74 42              1166 	mov	a,#0x42
   0552 F0                 1167 	movx	@dptr,a
   0553 90s00r1E           1168 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0008)
   0556 74 42              1169 	mov	a,#0x42
   0558 F0                 1170 	movx	@dptr,a
   0559 90s00r1F           1171 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0009)
   055C 74 43              1172 	mov	a,#0x43
   055E F0                 1173 	movx	@dptr,a
   055F 90s00r20           1174 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x000a)
   0562 E4                 1175 	clr	a
   0563 F0                 1176 	movx	@dptr,a
   0564 90s00r21           1177 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x000b)
   0567 74 44              1178 	mov	a,#0x44
   0569 F0                 1179 	movx	@dptr,a
   056A 90s00r22           1180 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x000c)
   056D 74 2E              1181 	mov	a,#0x2E
   056F F0                 1182 	movx	@dptr,a
   0570 90s00r23           1183 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x000d)
   0573 74 2E              1184 	mov	a,#0x2E
   0575 F0                 1185 	movx	@dptr,a
   0576 90s00r24           1186 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x000e)
   0579 74 2E              1187 	mov	a,#0x2E
   057B F0                 1188 	movx	@dptr,a
   057C 90s00r25           1189 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x000f)
   057F 74 2E              1190 	mov	a,#0x2E
   0581 F0                 1191 	movx	@dptr,a
   0582 90s00r26           1192 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0010)
   0585 74 2E              1193 	mov	a,#0x2E
   0587 F0                 1194 	movx	@dptr,a
   0588 90s00r27           1195 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0011)
   058B 74 2E              1196 	mov	a,#0x2E
   058D F0                 1197 	movx	@dptr,a
   058E 90s00r28           1198 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0012)
   0591 74 2E              1199 	mov	a,#0x2E
   0593 F0                 1200 	movx	@dptr,a
   0594 90s00r29           1201 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0013)
   0597 74 2E              1202 	mov	a,#0x2E
   0599 F0                 1203 	movx	@dptr,a
   059A 90s00r2A           1204 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0014)
   059D 74 45              1205 	mov	a,#0x45
   059F F0                 1206 	movx	@dptr,a
   05A0 90s00r2B           1207 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0015)
   05A3 E4                 1208 	clr	a
   05A4 F0                 1209 	movx	@dptr,a
   05A5 90s00r2C           1210 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0016)
   05A8 74 44              1211 	mov	a,#0x44
   05AA F0                 1212 	movx	@dptr,a
   05AB 90s00r2D           1213 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0017)
   05AE 74 2E              1214 	mov	a,#0x2E
   05B0 F0                 1215 	movx	@dptr,a
   05B1 90s00r2E           1216 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0018)
   05B4 74 2E              1217 	mov	a,#0x2E
   05B6 F0                 1218 	movx	@dptr,a
   05B7 90s00r2F           1219 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0019)
   05BA 74 2E              1220 	mov	a,#0x2E
   05BC F0                 1221 	movx	@dptr,a
   05BD 90s00r30           1222 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x001a)
   05C0 74 2E              1223 	mov	a,#0x2E
   05C2 F0                 1224 	movx	@dptr,a
   05C3 90s00r31           1225 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x001b)
   05C6 74 2E              1226 	mov	a,#0x2E
   05C8 F0                 1227 	movx	@dptr,a
   05C9 90s00r32           1228 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x001c)
   05CC 74 2E              1229 	mov	a,#0x2E
   05CE F0                 1230 	movx	@dptr,a
   05CF 90s00r33           1231 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x001d)
   05D2 74 2E              1232 	mov	a,#0x2E
   05D4 F0                 1233 	movx	@dptr,a
   05D5 90s00r34           1234 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x001e)
   05D8 74 2E              1235 	mov	a,#0x2E
   05DA F0                 1236 	movx	@dptr,a
   05DB 90s00r35           1237 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x001f)
   05DE 74 45              1238 	mov	a,#0x45
   05E0 F0                 1239 	movx	@dptr,a
   05E1 90s00r36           1240 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0020)
   05E4 E4                 1241 	clr	a
   05E5 F0                 1242 	movx	@dptr,a
   05E6 90s00r37           1243 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0021)
   05E9 74 44              1244 	mov	a,#0x44
   05EB F0                 1245 	movx	@dptr,a
   05EC 90s00r38           1246 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0022)
   05EF 74 2E              1247 	mov	a,#0x2E
   05F1 F0                 1248 	movx	@dptr,a
   05F2 90s00r39           1249 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0023)
   05F5 74 2E              1250 	mov	a,#0x2E
   05F7 F0                 1251 	movx	@dptr,a
   05F8 90s00r3A           1252 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0024)
   05FB 74 2E              1253 	mov	a,#0x2E
   05FD F0                 1254 	movx	@dptr,a
   05FE 90s00r3B           1255 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0025)
   0601 74 2E              1256 	mov	a,#0x2E
   0603 F0                 1257 	movx	@dptr,a
   0604 90s00r3C           1258 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0026)
   0607 74 2E              1259 	mov	a,#0x2E
   0609 F0                 1260 	movx	@dptr,a
   060A 90s00r3D           1261 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0027)
   060D 74 2E              1262 	mov	a,#0x2E
   060F F0                 1263 	movx	@dptr,a
   0610 90s00r3E           1264 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0028)
   0613 74 2E              1265 	mov	a,#0x2E
   0615 F0                 1266 	movx	@dptr,a
   0616 90s00r3F           1267 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0029)
   0619 74 2E              1268 	mov	a,#0x2E
   061B F0                 1269 	movx	@dptr,a
   061C 90s00r40           1270 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x002a)
   061F 74 45              1271 	mov	a,#0x45
   0621 F0                 1272 	movx	@dptr,a
   0622 90s00r41           1273 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x002b)
   0625 E4                 1274 	clr	a
   0626 F0                 1275 	movx	@dptr,a
   0627 90s00r42           1276 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x002c)
   062A 74 46              1277 	mov	a,#0x46
   062C F0                 1278 	movx	@dptr,a
   062D 90s00r43           1279 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x002d)
   0630 74 47              1280 	mov	a,#0x47
   0632 F0                 1281 	movx	@dptr,a
   0633 90s00r44           1282 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x002e)
   0636 74 47              1283 	mov	a,#0x47
   0638 F0                 1284 	movx	@dptr,a
   0639 90s00r45           1285 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x002f)
   063C 74 47              1286 	mov	a,#0x47
   063E F0                 1287 	movx	@dptr,a
   063F 90s00r46           1288 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0030)
   0642 74 47              1289 	mov	a,#0x47
   0644 F0                 1290 	movx	@dptr,a
   0645 90s00r47           1291 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0031)
   0648 74 47              1292 	mov	a,#0x47
   064A F0                 1293 	movx	@dptr,a
   064B 90s00r48           1294 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0032)
   064E 74 47              1295 	mov	a,#0x47
   0650 F0                 1296 	movx	@dptr,a
   0651 90s00r49           1297 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0033)
   0654 74 47              1298 	mov	a,#0x47
   0656 F0                 1299 	movx	@dptr,a
   0657 90s00r4A           1300 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0034)
   065A 74 47              1301 	mov	a,#0x47
   065C F0                 1302 	movx	@dptr,a
   065D 90s00r4B           1303 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0035)
   0660 74 48              1304 	mov	a,#0x48
   0662 F0                 1305 	movx	@dptr,a
   0663 90s00r4C           1306 	mov	dptr,#(_bddGameboardDraw_c_1_1 + 0x0036)
   0666 E4                 1307 	clr	a
   0667 F0                 1308 	movx	@dptr,a
                    0668   1309 	C$gameboard.c$187$1$1 ==.
                           1310 ;	../gameboard.c:187: BDD_clear();
   0668 12s00r00           1311 	lcall	_BDD_clear
                    066B   1312 	C$gameboard.c$188$1$1 ==.
                           1313 ;	../gameboard.c:188: GMB_draw(BDD_SCREEN_X, BDD_SCREEN_Y, BDD_SCREEN_X + BDD_SCREEN_WIDTH - 1, BDD_SCREEN_Y + BDD_SCREEN_HEIGHT - 1);
   066B 90s00r02           1314 	mov	dptr,#_GMB_draw_PARM_2
   066E 74 0A              1315 	mov	a,#0x0A
   0670 F0                 1316 	movx	@dptr,a
   0671 90s00r03           1317 	mov	dptr,#_GMB_draw_PARM_3
   0674 74 1C              1318 	mov	a,#0x1C
   0676 F0                 1319 	movx	@dptr,a
   0677 90s00r04           1320 	mov	dptr,#_GMB_draw_PARM_4
   067A 74 0E              1321 	mov	a,#0x0E
   067C F0                 1322 	movx	@dptr,a
   067D 75 82 13           1323 	mov	dpl,#0x13
   0680 12s00rD4           1324 	lcall	_GMB_draw
                    0683   1325 	C$gameboard.c$189$1$1 ==.
                           1326 ;	../gameboard.c:189: return BDD_assert(c, "GMBD");
   0683 90s00r00           1327 	mov	dptr,#_BDD_assert_PARM_2
   0686 74r00              1328 	mov	a,#__str_3
   0688 F0                 1329 	movx	@dptr,a
   0689 A3                 1330 	inc	dptr
   068A 74s00              1331 	mov	a,#(__str_3 >> 8)
   068C F0                 1332 	movx	@dptr,a
   068D A3                 1333 	inc	dptr
   068E 74 80              1334 	mov	a,#0x80
   0690 F0                 1335 	movx	@dptr,a
   0691 90s00r16           1336 	mov	dptr,#_bddGameboardDraw_c_1_1
   0694 75 F0 00           1337 	mov	b,#0x00
                    0697   1338 	C$gameboard.c$190$1$1 ==.
                    0697   1339 	XG$bddGameboardDraw$0$0 ==.
   0697 02s00r00           1340 	ljmp	_BDD_assert
                           1341 ;------------------------------------------------------------
                           1342 ;Allocation info for local variables in function 'bddGameboardClear'
                           1343 ;------------------------------------------------------------
                           1344 ;c                         Allocated with name '_bddGameboardClear_c_1_1'
                           1345 ;------------------------------------------------------------
                    069A   1346 	G$bddGameboardClear$0$0 ==.
                    069A   1347 	C$gameboard.c$192$1$1 ==.
                           1348 ;	../gameboard.c:192: int bddGameboardClear() {
                           1349 ;	-----------------------------------------
                           1350 ;	 function bddGameboardClear
                           1351 ;	-----------------------------------------
   069A                    1352 _bddGameboardClear:
                    069A   1353 	C$gameboard.c$193$1$1 ==.
                           1354 ;	../gameboard.c:193: BddExpectedContent c = {
   069A 90s00r4D           1355 	mov	dptr,#_bddGameboardClear_c_1_1
   069D 74 2E              1356 	mov	a,#0x2E
   069F F0                 1357 	movx	@dptr,a
   06A0 90s00r4E           1358 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0001)
   06A3 74 2E              1359 	mov	a,#0x2E
   06A5 F0                 1360 	movx	@dptr,a
   06A6 90s00r4F           1361 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0002)
   06A9 74 2E              1362 	mov	a,#0x2E
   06AB F0                 1363 	movx	@dptr,a
   06AC 90s00r50           1364 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0003)
   06AF 74 2E              1365 	mov	a,#0x2E
   06B1 F0                 1366 	movx	@dptr,a
   06B2 90s00r51           1367 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0004)
   06B5 74 2E              1368 	mov	a,#0x2E
   06B7 F0                 1369 	movx	@dptr,a
   06B8 90s00r52           1370 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0005)
   06BB 74 2E              1371 	mov	a,#0x2E
   06BD F0                 1372 	movx	@dptr,a
   06BE 90s00r53           1373 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0006)
   06C1 74 2E              1374 	mov	a,#0x2E
   06C3 F0                 1375 	movx	@dptr,a
   06C4 90s00r54           1376 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0007)
   06C7 74 2E              1377 	mov	a,#0x2E
   06C9 F0                 1378 	movx	@dptr,a
   06CA 90s00r55           1379 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0008)
   06CD 74 2E              1380 	mov	a,#0x2E
   06CF F0                 1381 	movx	@dptr,a
   06D0 90s00r56           1382 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0009)
   06D3 74 2E              1383 	mov	a,#0x2E
   06D5 F0                 1384 	movx	@dptr,a
   06D6 90s00r57           1385 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x000a)
   06D9 E4                 1386 	clr	a
   06DA F0                 1387 	movx	@dptr,a
   06DB 90s00r58           1388 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x000b)
   06DE 74 2E              1389 	mov	a,#0x2E
   06E0 F0                 1390 	movx	@dptr,a
   06E1 90s00r59           1391 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x000c)
   06E4 74 20              1392 	mov	a,#0x20
   06E6 F0                 1393 	movx	@dptr,a
   06E7 90s00r5A           1394 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x000d)
   06EA 74 20              1395 	mov	a,#0x20
   06EC F0                 1396 	movx	@dptr,a
   06ED 90s00r5B           1397 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x000e)
   06F0 74 20              1398 	mov	a,#0x20
   06F2 F0                 1399 	movx	@dptr,a
   06F3 90s00r5C           1400 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x000f)
   06F6 74 20              1401 	mov	a,#0x20
   06F8 F0                 1402 	movx	@dptr,a
   06F9 90s00r5D           1403 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0010)
   06FC 74 20              1404 	mov	a,#0x20
   06FE F0                 1405 	movx	@dptr,a
   06FF 90s00r5E           1406 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0011)
   0702 74 20              1407 	mov	a,#0x20
   0704 F0                 1408 	movx	@dptr,a
   0705 90s00r5F           1409 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0012)
   0708 74 20              1410 	mov	a,#0x20
   070A F0                 1411 	movx	@dptr,a
   070B 90s00r60           1412 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0013)
   070E 74 20              1413 	mov	a,#0x20
   0710 F0                 1414 	movx	@dptr,a
   0711 90s00r61           1415 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0014)
   0714 74 2E              1416 	mov	a,#0x2E
   0716 F0                 1417 	movx	@dptr,a
   0717 90s00r62           1418 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0015)
   071A E4                 1419 	clr	a
   071B F0                 1420 	movx	@dptr,a
   071C 90s00r63           1421 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0016)
   071F 74 2E              1422 	mov	a,#0x2E
   0721 F0                 1423 	movx	@dptr,a
   0722 90s00r64           1424 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0017)
   0725 74 20              1425 	mov	a,#0x20
   0727 F0                 1426 	movx	@dptr,a
   0728 90s00r65           1427 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0018)
   072B 74 20              1428 	mov	a,#0x20
   072D F0                 1429 	movx	@dptr,a
   072E 90s00r66           1430 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0019)
   0731 74 20              1431 	mov	a,#0x20
   0733 F0                 1432 	movx	@dptr,a
   0734 90s00r67           1433 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x001a)
   0737 74 20              1434 	mov	a,#0x20
   0739 F0                 1435 	movx	@dptr,a
   073A 90s00r68           1436 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x001b)
   073D 74 20              1437 	mov	a,#0x20
   073F F0                 1438 	movx	@dptr,a
   0740 90s00r69           1439 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x001c)
   0743 74 20              1440 	mov	a,#0x20
   0745 F0                 1441 	movx	@dptr,a
   0746 90s00r6A           1442 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x001d)
   0749 74 20              1443 	mov	a,#0x20
   074B F0                 1444 	movx	@dptr,a
   074C 90s00r6B           1445 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x001e)
   074F 74 20              1446 	mov	a,#0x20
   0751 F0                 1447 	movx	@dptr,a
   0752 90s00r6C           1448 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x001f)
   0755 74 2E              1449 	mov	a,#0x2E
   0757 F0                 1450 	movx	@dptr,a
   0758 90s00r6D           1451 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0020)
   075B E4                 1452 	clr	a
   075C F0                 1453 	movx	@dptr,a
   075D 90s00r6E           1454 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0021)
   0760 74 2E              1455 	mov	a,#0x2E
   0762 F0                 1456 	movx	@dptr,a
   0763 90s00r6F           1457 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0022)
   0766 74 20              1458 	mov	a,#0x20
   0768 F0                 1459 	movx	@dptr,a
   0769 90s00r70           1460 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0023)
   076C 74 20              1461 	mov	a,#0x20
   076E F0                 1462 	movx	@dptr,a
   076F 90s00r71           1463 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0024)
   0772 74 20              1464 	mov	a,#0x20
   0774 F0                 1465 	movx	@dptr,a
   0775 90s00r72           1466 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0025)
   0778 74 20              1467 	mov	a,#0x20
   077A F0                 1468 	movx	@dptr,a
   077B 90s00r73           1469 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0026)
   077E 74 20              1470 	mov	a,#0x20
   0780 F0                 1471 	movx	@dptr,a
   0781 90s00r74           1472 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0027)
   0784 74 20              1473 	mov	a,#0x20
   0786 F0                 1474 	movx	@dptr,a
   0787 90s00r75           1475 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0028)
   078A 74 20              1476 	mov	a,#0x20
   078C F0                 1477 	movx	@dptr,a
   078D 90s00r76           1478 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0029)
   0790 74 20              1479 	mov	a,#0x20
   0792 F0                 1480 	movx	@dptr,a
   0793 90s00r77           1481 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x002a)
   0796 74 2E              1482 	mov	a,#0x2E
   0798 F0                 1483 	movx	@dptr,a
   0799 90s00r78           1484 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x002b)
   079C E4                 1485 	clr	a
   079D F0                 1486 	movx	@dptr,a
   079E 90s00r79           1487 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x002c)
   07A1 74 2E              1488 	mov	a,#0x2E
   07A3 F0                 1489 	movx	@dptr,a
   07A4 90s00r7A           1490 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x002d)
   07A7 74 2E              1491 	mov	a,#0x2E
   07A9 F0                 1492 	movx	@dptr,a
   07AA 90s00r7B           1493 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x002e)
   07AD 74 2E              1494 	mov	a,#0x2E
   07AF F0                 1495 	movx	@dptr,a
   07B0 90s00r7C           1496 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x002f)
   07B3 74 2E              1497 	mov	a,#0x2E
   07B5 F0                 1498 	movx	@dptr,a
   07B6 90s00r7D           1499 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0030)
   07B9 74 2E              1500 	mov	a,#0x2E
   07BB F0                 1501 	movx	@dptr,a
   07BC 90s00r7E           1502 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0031)
   07BF 74 2E              1503 	mov	a,#0x2E
   07C1 F0                 1504 	movx	@dptr,a
   07C2 90s00r7F           1505 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0032)
   07C5 74 2E              1506 	mov	a,#0x2E
   07C7 F0                 1507 	movx	@dptr,a
   07C8 90s00r80           1508 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0033)
   07CB 74 2E              1509 	mov	a,#0x2E
   07CD F0                 1510 	movx	@dptr,a
   07CE 90s00r81           1511 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0034)
   07D1 74 2E              1512 	mov	a,#0x2E
   07D3 F0                 1513 	movx	@dptr,a
   07D4 90s00r82           1514 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0035)
   07D7 74 2E              1515 	mov	a,#0x2E
   07D9 F0                 1516 	movx	@dptr,a
   07DA 90s00r83           1517 	mov	dptr,#(_bddGameboardClear_c_1_1 + 0x0036)
   07DD E4                 1518 	clr	a
   07DE F0                 1519 	movx	@dptr,a
                    07DF   1520 	C$gameboard.c$201$1$1 ==.
                           1521 ;	../gameboard.c:201: BDD_clear();
   07DF 12s00r00           1522 	lcall	_BDD_clear
                    07E2   1523 	C$gameboard.c$202$1$1 ==.
                           1524 ;	../gameboard.c:202: GMB_clear(BDD_SCREEN_X + 1, BDD_SCREEN_Y + 1, BDD_SCREEN_X + BDD_SCREEN_WIDTH - 2, BDD_SCREEN_Y + BDD_SCREEN_HEIGHT - 2);
   07E2 90s00r08           1525 	mov	dptr,#_GMB_clear_PARM_2
   07E5 74 0B              1526 	mov	a,#0x0B
   07E7 F0                 1527 	movx	@dptr,a
   07E8 90s00r09           1528 	mov	dptr,#_GMB_clear_PARM_3
   07EB 74 1B              1529 	mov	a,#0x1B
   07ED F0                 1530 	movx	@dptr,a
   07EE 90s00r0A           1531 	mov	dptr,#_GMB_clear_PARM_4
   07F1 74 0D              1532 	mov	a,#0x0D
   07F3 F0                 1533 	movx	@dptr,a
   07F4 75 82 14           1534 	mov	dpl,#0x14
   07F7 12s02r1D           1535 	lcall	_GMB_clear
                    07FA   1536 	C$gameboard.c$203$1$1 ==.
                           1537 ;	../gameboard.c:203: return BDD_assert(c, "GMBC");
   07FA 90s00r00           1538 	mov	dptr,#_BDD_assert_PARM_2
   07FD 74r05              1539 	mov	a,#__str_6
   07FF F0                 1540 	movx	@dptr,a
   0800 A3                 1541 	inc	dptr
   0801 74s00              1542 	mov	a,#(__str_6 >> 8)
   0803 F0                 1543 	movx	@dptr,a
   0804 A3                 1544 	inc	dptr
   0805 74 80              1545 	mov	a,#0x80
   0807 F0                 1546 	movx	@dptr,a
   0808 90s00r4D           1547 	mov	dptr,#_bddGameboardClear_c_1_1
   080B 75 F0 00           1548 	mov	b,#0x00
                    080E   1549 	C$gameboard.c$204$1$1 ==.
                    080E   1550 	XG$bddGameboardClear$0$0 ==.
   080E 02s00r00           1551 	ljmp	_BDD_assert
                           1552 ;------------------------------------------------------------
                           1553 ;Allocation info for local variables in function 'bddGameboardDisplay'
                           1554 ;------------------------------------------------------------
                           1555 ;c                         Allocated with name '_bddGameboardDisplay_c_1_1'
                           1556 ;------------------------------------------------------------
                    0811   1557 	G$bddGameboardDisplay$0$0 ==.
                    0811   1558 	C$gameboard.c$206$1$1 ==.
                           1559 ;	../gameboard.c:206: int bddGameboardDisplay() {
                           1560 ;	-----------------------------------------
                           1561 ;	 function bddGameboardDisplay
                           1562 ;	-----------------------------------------
   0811                    1563 _bddGameboardDisplay:
                    0811   1564 	C$gameboard.c$207$1$1 ==.
                           1565 ;	../gameboard.c:207: BddExpectedContent c = {
   0811 90s00r84           1566 	mov	dptr,#_bddGameboardDisplay_c_1_1
   0814 74 2E              1567 	mov	a,#0x2E
   0816 F0                 1568 	movx	@dptr,a
   0817 90s00r85           1569 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0001)
   081A 74 2E              1570 	mov	a,#0x2E
   081C F0                 1571 	movx	@dptr,a
   081D 90s00r86           1572 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0002)
   0820 74 2E              1573 	mov	a,#0x2E
   0822 F0                 1574 	movx	@dptr,a
   0823 90s00r87           1575 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0003)
   0826 74 2E              1576 	mov	a,#0x2E
   0828 F0                 1577 	movx	@dptr,a
   0829 90s00r88           1578 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0004)
   082C 74 2E              1579 	mov	a,#0x2E
   082E F0                 1580 	movx	@dptr,a
   082F 90s00r89           1581 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0005)
   0832 74 2E              1582 	mov	a,#0x2E
   0834 F0                 1583 	movx	@dptr,a
   0835 90s00r8A           1584 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0006)
   0838 74 2E              1585 	mov	a,#0x2E
   083A F0                 1586 	movx	@dptr,a
   083B 90s00r8B           1587 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0007)
   083E 74 2E              1588 	mov	a,#0x2E
   0840 F0                 1589 	movx	@dptr,a
   0841 90s00r8C           1590 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0008)
   0844 74 2E              1591 	mov	a,#0x2E
   0846 F0                 1592 	movx	@dptr,a
   0847 90s00r8D           1593 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0009)
   084A 74 2E              1594 	mov	a,#0x2E
   084C F0                 1595 	movx	@dptr,a
   084D 90s00r8E           1596 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x000a)
   0850 E4                 1597 	clr	a
   0851 F0                 1598 	movx	@dptr,a
   0852 90s00r8F           1599 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x000b)
   0855 74 2E              1600 	mov	a,#0x2E
   0857 F0                 1601 	movx	@dptr,a
   0858 90s00r90           1602 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x000c)
   085B 74 41              1603 	mov	a,#0x41
   085D F0                 1604 	movx	@dptr,a
   085E 90s00r91           1605 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x000d)
   0861 74 42              1606 	mov	a,#0x42
   0863 F0                 1607 	movx	@dptr,a
   0864 90s00r92           1608 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x000e)
   0867 74 42              1609 	mov	a,#0x42
   0869 F0                 1610 	movx	@dptr,a
   086A 90s00r93           1611 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x000f)
   086D 74 42              1612 	mov	a,#0x42
   086F F0                 1613 	movx	@dptr,a
   0870 90s00r94           1614 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0010)
   0873 74 42              1615 	mov	a,#0x42
   0875 F0                 1616 	movx	@dptr,a
   0876 90s00r95           1617 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0011)
   0879 74 42              1618 	mov	a,#0x42
   087B F0                 1619 	movx	@dptr,a
   087C 90s00r96           1620 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0012)
   087F 74 43              1621 	mov	a,#0x43
   0881 F0                 1622 	movx	@dptr,a
   0882 90s00r97           1623 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0013)
   0885 74 2E              1624 	mov	a,#0x2E
   0887 F0                 1625 	movx	@dptr,a
   0888 90s00r98           1626 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0014)
   088B 74 2E              1627 	mov	a,#0x2E
   088D F0                 1628 	movx	@dptr,a
   088E 90s00r99           1629 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0015)
   0891 E4                 1630 	clr	a
   0892 F0                 1631 	movx	@dptr,a
   0893 90s00r9A           1632 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0016)
   0896 74 2E              1633 	mov	a,#0x2E
   0898 F0                 1634 	movx	@dptr,a
   0899 90s00r9B           1635 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0017)
   089C 74 44              1636 	mov	a,#0x44
   089E F0                 1637 	movx	@dptr,a
   089F 90s00r9C           1638 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0018)
   08A2 74 20              1639 	mov	a,#0x20
   08A4 F0                 1640 	movx	@dptr,a
   08A5 90s00r9D           1641 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0019)
   08A8 74 54              1642 	mov	a,#0x54
   08AA F0                 1643 	movx	@dptr,a
   08AB 90s00r9E           1644 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x001a)
   08AE 74 58              1645 	mov	a,#0x58
   08B0 F0                 1646 	movx	@dptr,a
   08B1 90s00r9F           1647 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x001b)
   08B4 74 54              1648 	mov	a,#0x54
   08B6 F0                 1649 	movx	@dptr,a
   08B7 90s00rA0           1650 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x001c)
   08BA 74 20              1651 	mov	a,#0x20
   08BC F0                 1652 	movx	@dptr,a
   08BD 90s00rA1           1653 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x001d)
   08C0 74 45              1654 	mov	a,#0x45
   08C2 F0                 1655 	movx	@dptr,a
   08C3 90s00rA2           1656 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x001e)
   08C6 74 2E              1657 	mov	a,#0x2E
   08C8 F0                 1658 	movx	@dptr,a
   08C9 90s00rA3           1659 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x001f)
   08CC 74 2E              1660 	mov	a,#0x2E
   08CE F0                 1661 	movx	@dptr,a
   08CF 90s00rA4           1662 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0020)
   08D2 E4                 1663 	clr	a
   08D3 F0                 1664 	movx	@dptr,a
   08D4 90s00rA5           1665 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0021)
   08D7 74 2E              1666 	mov	a,#0x2E
   08D9 F0                 1667 	movx	@dptr,a
   08DA 90s00rA6           1668 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0022)
   08DD 74 46              1669 	mov	a,#0x46
   08DF F0                 1670 	movx	@dptr,a
   08E0 90s00rA7           1671 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0023)
   08E3 74 47              1672 	mov	a,#0x47
   08E5 F0                 1673 	movx	@dptr,a
   08E6 90s00rA8           1674 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0024)
   08E9 74 47              1675 	mov	a,#0x47
   08EB F0                 1676 	movx	@dptr,a
   08EC 90s00rA9           1677 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0025)
   08EF 74 47              1678 	mov	a,#0x47
   08F1 F0                 1679 	movx	@dptr,a
   08F2 90s00rAA           1680 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0026)
   08F5 74 47              1681 	mov	a,#0x47
   08F7 F0                 1682 	movx	@dptr,a
   08F8 90s00rAB           1683 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0027)
   08FB 74 47              1684 	mov	a,#0x47
   08FD F0                 1685 	movx	@dptr,a
   08FE 90s00rAC           1686 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0028)
   0901 74 48              1687 	mov	a,#0x48
   0903 F0                 1688 	movx	@dptr,a
   0904 90s00rAD           1689 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0029)
   0907 74 2E              1690 	mov	a,#0x2E
   0909 F0                 1691 	movx	@dptr,a
   090A 90s00rAE           1692 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x002a)
   090D 74 2E              1693 	mov	a,#0x2E
   090F F0                 1694 	movx	@dptr,a
   0910 90s00rAF           1695 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x002b)
   0913 E4                 1696 	clr	a
   0914 F0                 1697 	movx	@dptr,a
   0915 90s00rB0           1698 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x002c)
   0918 74 2E              1699 	mov	a,#0x2E
   091A F0                 1700 	movx	@dptr,a
   091B 90s00rB1           1701 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x002d)
   091E 74 2E              1702 	mov	a,#0x2E
   0920 F0                 1703 	movx	@dptr,a
   0921 90s00rB2           1704 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x002e)
   0924 74 2E              1705 	mov	a,#0x2E
   0926 F0                 1706 	movx	@dptr,a
   0927 90s00rB3           1707 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x002f)
   092A 74 2E              1708 	mov	a,#0x2E
   092C F0                 1709 	movx	@dptr,a
   092D 90s00rB4           1710 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0030)
   0930 74 2E              1711 	mov	a,#0x2E
   0932 F0                 1712 	movx	@dptr,a
   0933 90s00rB5           1713 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0031)
   0936 74 2E              1714 	mov	a,#0x2E
   0938 F0                 1715 	movx	@dptr,a
   0939 90s00rB6           1716 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0032)
   093C 74 2E              1717 	mov	a,#0x2E
   093E F0                 1718 	movx	@dptr,a
   093F 90s00rB7           1719 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0033)
   0942 74 2E              1720 	mov	a,#0x2E
   0944 F0                 1721 	movx	@dptr,a
   0945 90s00rB8           1722 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0034)
   0948 74 2E              1723 	mov	a,#0x2E
   094A F0                 1724 	movx	@dptr,a
   094B 90s00rB9           1725 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0035)
   094E 74 2E              1726 	mov	a,#0x2E
   0950 F0                 1727 	movx	@dptr,a
   0951 90s00rBA           1728 	mov	dptr,#(_bddGameboardDisplay_c_1_1 + 0x0036)
   0954 E4                 1729 	clr	a
   0955 F0                 1730 	movx	@dptr,a
                    0956   1731 	C$gameboard.c$215$1$1 ==.
                           1732 ;	../gameboard.c:215: BDD_clear();
   0956 12s00r00           1733 	lcall	_BDD_clear
                    0959   1734 	C$gameboard.c$217$1$1 ==.
                           1735 ;	../gameboard.c:217: GMB_display(BDD_SCREEN_X + 1, BDD_SCREEN_Y + 1, " TXT ");
   0959 90s00r0E           1736 	mov	dptr,#_GMB_display_PARM_2
   095C 74 0B              1737 	mov	a,#0x0B
   095E F0                 1738 	movx	@dptr,a
   095F 90s00r0F           1739 	mov	dptr,#_GMB_display_PARM_3
   0962 74r0A              1740 	mov	a,#__str_11
   0964 F0                 1741 	movx	@dptr,a
   0965 A3                 1742 	inc	dptr
   0966 74s00              1743 	mov	a,#(__str_11 >> 8)
   0968 F0                 1744 	movx	@dptr,a
   0969 A3                 1745 	inc	dptr
   096A 74 80              1746 	mov	a,#0x80
   096C F0                 1747 	movx	@dptr,a
   096D 75 82 14           1748 	mov	dpl,#0x14
   0970 12s03r46           1749 	lcall	_GMB_display
                    0973   1750 	C$gameboard.c$218$1$1 ==.
                           1751 ;	../gameboard.c:218: return BDD_assert(c, "GMBT");
   0973 90s00r00           1752 	mov	dptr,#_BDD_assert_PARM_2
   0976 74r10              1753 	mov	a,#__str_12
   0978 F0                 1754 	movx	@dptr,a
   0979 A3                 1755 	inc	dptr
   097A 74s00              1756 	mov	a,#(__str_12 >> 8)
   097C F0                 1757 	movx	@dptr,a
   097D A3                 1758 	inc	dptr
   097E 74 80              1759 	mov	a,#0x80
   0980 F0                 1760 	movx	@dptr,a
   0981 90s00r84           1761 	mov	dptr,#_bddGameboardDisplay_c_1_1
   0984 75 F0 00           1762 	mov	b,#0x00
                    0987   1763 	C$gameboard.c$219$1$1 ==.
                    0987   1764 	XG$bddGameboardDisplay$0$0 ==.
   0987 02s00r00           1765 	ljmp	_BDD_assert
                           1766 ;------------------------------------------------------------
                           1767 ;Allocation info for local variables in function 'testGameboard'
                           1768 ;------------------------------------------------------------
                           1769 ;testsInError              Allocated with name '_testGameboard_testsInError_1_1'
                           1770 ;------------------------------------------------------------
                    098A   1771 	G$testGameboard$0$0 ==.
                    098A   1772 	C$gameboard.c$221$1$1 ==.
                           1773 ;	../gameboard.c:221: int testGameboard() {
                           1774 ;	-----------------------------------------
                           1775 ;	 function testGameboard
                           1776 ;	-----------------------------------------
   098A                    1777 _testGameboard:
                    098A   1778 	C$gameboard.c$224$1$1 ==.
                           1779 ;	../gameboard.c:224: testsInError += bddGameboardDraw();
   098A 12s05r23           1780 	lcall	_bddGameboardDraw
   098D AA 82              1781 	mov	r2,dpl
   098F AB 83              1782 	mov	r3,dph
                    0991   1783 	C$gameboard.c$225$1$1 ==.
                           1784 ;	../gameboard.c:225: testsInError += bddGameboardClear();
   0991 C0 02              1785 	push	ar2
   0993 C0 03              1786 	push	ar3
   0995 12s06r9A           1787 	lcall	_bddGameboardClear
   0998 AC 82              1788 	mov	r4,dpl
   099A AD 83              1789 	mov	r5,dph
   099C D0 03              1790 	pop	ar3
   099E D0 02              1791 	pop	ar2
   09A0 EC                 1792 	mov	a,r4
   09A1 2A                 1793 	add	a,r2
   09A2 FA                 1794 	mov	r2,a
   09A3 ED                 1795 	mov	a,r5
   09A4 3B                 1796 	addc	a,r3
   09A5 FB                 1797 	mov	r3,a
                    09A6   1798 	C$gameboard.c$226$1$1 ==.
                           1799 ;	../gameboard.c:226: testsInError += bddGameboardDisplay();
   09A6 C0 02              1800 	push	ar2
   09A8 C0 03              1801 	push	ar3
   09AA 12s08r11           1802 	lcall	_bddGameboardDisplay
   09AD AC 82              1803 	mov	r4,dpl
   09AF AD 83              1804 	mov	r5,dph
   09B1 D0 03              1805 	pop	ar3
   09B3 D0 02              1806 	pop	ar2
   09B5 EC                 1807 	mov	a,r4
   09B6 2A                 1808 	add	a,r2
   09B7 FA                 1809 	mov	r2,a
   09B8 ED                 1810 	mov	a,r5
   09B9 3B                 1811 	addc	a,r3
                    09BA   1812 	C$gameboard.c$228$1$1 ==.
                           1813 ;	../gameboard.c:228: return testsInError;
                    09BA   1814 	C$gameboard.c$229$1$1 ==.
                    09BA   1815 	XG$testGameboard$0$0 ==.
   09BA 8A 82              1816 	mov	dpl,r2
   09BC F5 83              1817 	mov	dph,a
   09BE 22                 1818 	ret
                           1819 	.area CSEG    (CODE)
                           1820 	.area CONST   (CODE)
                    0000   1821 Fgameboard$_str_3$0$0 == .
   0000                    1822 __str_3:
   0000 47 4D 42 44        1823 	.ascii "GMBD"
   0004 00                 1824 	.db 0x00
                    0005   1825 Fgameboard$_str_6$0$0 == .
   0005                    1826 __str_6:
   0005 47 4D 42 43        1827 	.ascii "GMBC"
   0009 00                 1828 	.db 0x00
                    000A   1829 Fgameboard$_str_11$0$0 == .
   000A                    1830 __str_11:
   000A 20 54 58 54 20     1831 	.ascii " TXT "
   000F 00                 1832 	.db 0x00
                    0010   1833 Fgameboard$_str_12$0$0 == .
   0010                    1834 __str_12:
   0010 47 4D 42 54        1835 	.ascii "GMBT"
   0014 00                 1836 	.db 0x00
                           1837 	.area XINIT   (CODE)
                           1838 	.area CABS    (ABS,CODE)

                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.0 #6037 (Oct 31 2010) (MINGW32)
                              4 ; This file was generated Mon Jan 23 19:50:58 2017
                              5 ;--------------------------------------------------------
                              6 	.module fruit
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _testFruitIsPlacedRandomly
                             13 	.globl _testFruitIsPlacedInFreeSpace
                             14 	.globl _FRUIT_placeInFreeSpace
                             15 	.globl _FRUIT_random
                             16 	.globl _FRUIT_place
                             17 	.globl _testFruit
                             18 ;--------------------------------------------------------
                             19 ; special function registers
                             20 ;--------------------------------------------------------
                             21 	.area RSEG    (ABS,DATA)
   0000                      22 	.org 0x0000
                             23 ;--------------------------------------------------------
                             24 ; special function bits
                             25 ;--------------------------------------------------------
                             26 	.area RSEG    (ABS,DATA)
   0000                      27 	.org 0x0000
                             28 ;--------------------------------------------------------
                             29 ; overlayable register banks
                             30 ;--------------------------------------------------------
                             31 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      32 	.ds 8
                             33 ;--------------------------------------------------------
                             34 ; internal ram data
                             35 ;--------------------------------------------------------
                             36 	.area DSEG    (DATA)
                             37 ;--------------------------------------------------------
                             38 ; overlayable items in internal ram 
                             39 ;--------------------------------------------------------
                             40 	.area OSEG    (OVR,DATA)
                             41 ;--------------------------------------------------------
                             42 ; indirectly addressable internal ram data
                             43 ;--------------------------------------------------------
                             44 	.area ISEG    (DATA)
                             45 ;--------------------------------------------------------
                             46 ; absolute internal ram data
                             47 ;--------------------------------------------------------
                             48 	.area IABS    (ABS,DATA)
                             49 	.area IABS    (ABS,DATA)
                             50 ;--------------------------------------------------------
                             51 ; bit data
                             52 ;--------------------------------------------------------
                             53 	.area BSEG    (BIT)
                             54 ;--------------------------------------------------------
                             55 ; paged external ram data
                             56 ;--------------------------------------------------------
                             57 	.area PSEG    (PAG,XDATA)
                             58 ;--------------------------------------------------------
                             59 ; external ram data
                             60 ;--------------------------------------------------------
                             61 	.area XSEG    (XDATA)
                    0000     62 LFRUIT_placeInFreeSpace$position$1$1==.
   0000                      63 _FRUIT_placeInFreeSpace_position_1_1:
   0000                      64 	.ds 3
                    0003     65 LFRUIT_random$position$1$1==.
   0003                      66 _FRUIT_random_position_1_1:
   0003                      67 	.ds 3
                    0006     68 LFRUIT_place$position$1$1==.
   0006                      69 _FRUIT_place_position_1_1:
   0006                      70 	.ds 2
                    0008     71 LtestFruitIsPlacedInFreeSpace$position$1$1==.
   0008                      72 _testFruitIsPlacedInFreeSpace_position_1_1:
   0008                      73 	.ds 2
                    000A     74 LtestFruitIsPlacedRandomly$position1$1$1==.
   000A                      75 _testFruitIsPlacedRandomly_position1_1_1:
   000A                      76 	.ds 2
                    000C     77 LtestFruitIsPlacedRandomly$position2$1$1==.
   000C                      78 _testFruitIsPlacedRandomly_position2_1_1:
   000C                      79 	.ds 2
                             80 ;--------------------------------------------------------
                             81 ; absolute external ram data
                             82 ;--------------------------------------------------------
                             83 	.area XABS    (ABS,XDATA)
                             84 ;--------------------------------------------------------
                             85 ; external initialized ram data
                             86 ;--------------------------------------------------------
                             87 	.area XISEG   (XDATA)
                             88 	.area HOME    (CODE)
                             89 	.area GSINIT0 (CODE)
                             90 	.area GSINIT1 (CODE)
                             91 	.area GSINIT2 (CODE)
                             92 	.area GSINIT3 (CODE)
                             93 	.area GSINIT4 (CODE)
                             94 	.area GSINIT5 (CODE)
                             95 	.area GSINIT  (CODE)
                             96 	.area GSFINAL (CODE)
                             97 	.area CSEG    (CODE)
                             98 ;--------------------------------------------------------
                             99 ; global & static initialisations
                            100 ;--------------------------------------------------------
                            101 	.area HOME    (CODE)
                            102 	.area GSINIT  (CODE)
                            103 	.area GSFINAL (CODE)
                            104 	.area GSINIT  (CODE)
                            105 ;--------------------------------------------------------
                            106 ; Home
                            107 ;--------------------------------------------------------
                            108 	.area HOME    (CODE)
                            109 	.area HOME    (CODE)
                            110 ;--------------------------------------------------------
                            111 ; code
                            112 ;--------------------------------------------------------
                            113 	.area CSEG    (CODE)
                            114 ;------------------------------------------------------------
                            115 ;Allocation info for local variables in function 'FRUIT_placeInFreeSpace'
                            116 ;------------------------------------------------------------
                            117 ;position                  Allocated with name '_FRUIT_placeInFreeSpace_position_1_1'
                            118 ;c                         Allocated with name '_FRUIT_placeInFreeSpace_c_1_1'
                            119 ;------------------------------------------------------------
                    0000    120 	G$FRUIT_placeInFreeSpace$0$0 ==.
                    0000    121 	C$fruit.c$16$0$0 ==.
                            122 ;	../fruit.c:16: void FRUIT_placeInFreeSpace(Position *position) {
                            123 ;	-----------------------------------------
                            124 ;	 function FRUIT_placeInFreeSpace
                            125 ;	-----------------------------------------
   0000                     126 _FRUIT_placeInFreeSpace:
                    0002    127 	ar2 = 0x02
                    0003    128 	ar3 = 0x03
                    0004    129 	ar4 = 0x04
                    0005    130 	ar5 = 0x05
                    0006    131 	ar6 = 0x06
                    0007    132 	ar7 = 0x07
                    0000    133 	ar0 = 0x00
                    0001    134 	ar1 = 0x01
   0000 AA F0               135 	mov	r2,b
   0002 AB 83               136 	mov	r3,dph
   0004 E5 82               137 	mov	a,dpl
   0006 90s00r00            138 	mov	dptr,#_FRUIT_placeInFreeSpace_position_1_1
   0009 F0                  139 	movx	@dptr,a
   000A A3                  140 	inc	dptr
   000B EB                  141 	mov	a,r3
   000C F0                  142 	movx	@dptr,a
   000D A3                  143 	inc	dptr
   000E EA                  144 	mov	a,r2
   000F F0                  145 	movx	@dptr,a
                    0010    146 	C$fruit.c$17$1$1 ==.
                            147 ;	../fruit.c:17: char c = T6963C_readFrom(position->x, position->y);
   0010 90s00r00            148 	mov	dptr,#_FRUIT_placeInFreeSpace_position_1_1
   0013 E0                  149 	movx	a,@dptr
   0014 FA                  150 	mov	r2,a
   0015 A3                  151 	inc	dptr
   0016 E0                  152 	movx	a,@dptr
   0017 FB                  153 	mov	r3,a
   0018 A3                  154 	inc	dptr
   0019 E0                  155 	movx	a,@dptr
   001A FC                  156 	mov	r4,a
   001B 8A 82               157 	mov	dpl,r2
   001D 8B 83               158 	mov	dph,r3
   001F 8C F0               159 	mov	b,r4
   0021 12s00r00            160 	lcall	__gptrget
   0024 FD                  161 	mov	r5,a
   0025 74 01               162 	mov	a,#0x01
   0027 2A                  163 	add	a,r2
   0028 FE                  164 	mov	r6,a
   0029 E4                  165 	clr	a
   002A 3B                  166 	addc	a,r3
   002B FF                  167 	mov	r7,a
   002C 8C 00               168 	mov	ar0,r4
   002E 8E 82               169 	mov	dpl,r6
   0030 8F 83               170 	mov	dph,r7
   0032 88 F0               171 	mov	b,r0
   0034 12s00r00            172 	lcall	__gptrget
   0037 90s00r00            173 	mov	dptr,#_T6963C_readFrom_PARM_2
   003A F0                  174 	movx	@dptr,a
   003B 8D 82               175 	mov	dpl,r5
   003D C0 02               176 	push	ar2
   003F C0 03               177 	push	ar3
   0041 C0 04               178 	push	ar4
   0043 C0 06               179 	push	ar6
   0045 C0 07               180 	push	ar7
   0047 C0 00               181 	push	ar0
   0049 12s00r00            182 	lcall	_T6963C_readFrom
   004C E5 82               183 	mov	a,dpl
   004E D0 00               184 	pop	ar0
   0050 D0 07               185 	pop	ar7
   0052 D0 06               186 	pop	ar6
   0054 D0 04               187 	pop	ar4
   0056 D0 03               188 	pop	ar3
   0058 D0 02               189 	pop	ar2
                    005A    190 	C$fruit.c$19$1$1 ==.
                            191 ;	../fruit.c:19: if(c != EMPTY){
   005A 70 03               192 	jnz	00123$
   005C 02s02r13            193 	ljmp	00114$
   005F                     194 00123$:
                    005F    195 	C$fruit.c$20$2$2 ==.
                            196 ;	../fruit.c:20: if (T6963C_readFrom(position->x+1, position->y) == EMPTY){
   005F 8A 82               197 	mov	dpl,r2
   0061 8B 83               198 	mov	dph,r3
   0063 8C F0               199 	mov	b,r4
   0065 12s00r00            200 	lcall	__gptrget
   0068 FD                  201 	mov	r5,a
   0069 0D                  202 	inc	r5
   006A 8E 82               203 	mov	dpl,r6
   006C 8F 83               204 	mov	dph,r7
   006E 88 F0               205 	mov	b,r0
   0070 12s00r00            206 	lcall	__gptrget
   0073 90s00r00            207 	mov	dptr,#_T6963C_readFrom_PARM_2
   0076 F0                  208 	movx	@dptr,a
   0077 8D 82               209 	mov	dpl,r5
   0079 C0 02               210 	push	ar2
   007B C0 03               211 	push	ar3
   007D C0 04               212 	push	ar4
   007F C0 06               213 	push	ar6
   0081 C0 07               214 	push	ar7
   0083 C0 00               215 	push	ar0
   0085 12s00r00            216 	lcall	_T6963C_readFrom
   0088 E5 82               217 	mov	a,dpl
   008A D0 00               218 	pop	ar0
   008C D0 07               219 	pop	ar7
   008E D0 06               220 	pop	ar6
   0090 D0 04               221 	pop	ar4
   0092 D0 03               222 	pop	ar3
   0094 D0 02               223 	pop	ar2
   0096 70 18               224 	jnz	00111$
                    0098    225 	C$fruit.c$21$3$3 ==.
                            226 ;	../fruit.c:21: position->x++;
   0098 8A 82               227 	mov	dpl,r2
   009A 8B 83               228 	mov	dph,r3
   009C 8C F0               229 	mov	b,r4
   009E 12s00r00            230 	lcall	__gptrget
   00A1 FD                  231 	mov	r5,a
   00A2 0D                  232 	inc	r5
   00A3 8A 82               233 	mov	dpl,r2
   00A5 8B 83               234 	mov	dph,r3
   00A7 8C F0               235 	mov	b,r4
   00A9 ED                  236 	mov	a,r5
   00AA 12s00r00            237 	lcall	__gptrput
   00AD 02s01rF1            238 	ljmp	00112$
   00B0                     239 00111$:
                    00B0    240 	C$fruit.c$22$2$2 ==.
                            241 ;	../fruit.c:22: } else if (T6963C_readFrom(position->x-1, position->y) == EMPTY){
   00B0 8A 82               242 	mov	dpl,r2
   00B2 8B 83               243 	mov	dph,r3
   00B4 8C F0               244 	mov	b,r4
   00B6 12s00r00            245 	lcall	__gptrget
   00B9 FD                  246 	mov	r5,a
   00BA 1D                  247 	dec	r5
   00BB 8E 82               248 	mov	dpl,r6
   00BD 8F 83               249 	mov	dph,r7
   00BF 88 F0               250 	mov	b,r0
   00C1 12s00r00            251 	lcall	__gptrget
   00C4 90s00r00            252 	mov	dptr,#_T6963C_readFrom_PARM_2
   00C7 F0                  253 	movx	@dptr,a
   00C8 8D 82               254 	mov	dpl,r5
   00CA C0 02               255 	push	ar2
   00CC C0 03               256 	push	ar3
   00CE C0 04               257 	push	ar4
   00D0 C0 06               258 	push	ar6
   00D2 C0 07               259 	push	ar7
   00D4 C0 00               260 	push	ar0
   00D6 12s00r00            261 	lcall	_T6963C_readFrom
   00D9 E5 82               262 	mov	a,dpl
   00DB D0 00               263 	pop	ar0
   00DD D0 07               264 	pop	ar7
   00DF D0 06               265 	pop	ar6
   00E1 D0 04               266 	pop	ar4
   00E3 D0 03               267 	pop	ar3
   00E5 D0 02               268 	pop	ar2
   00E7 70 18               269 	jnz	00108$
                    00E9    270 	C$fruit.c$23$3$4 ==.
                            271 ;	../fruit.c:23: position->x--;
   00E9 8A 82               272 	mov	dpl,r2
   00EB 8B 83               273 	mov	dph,r3
   00ED 8C F0               274 	mov	b,r4
   00EF 12s00r00            275 	lcall	__gptrget
   00F2 FD                  276 	mov	r5,a
   00F3 1D                  277 	dec	r5
   00F4 8A 82               278 	mov	dpl,r2
   00F6 8B 83               279 	mov	dph,r3
   00F8 8C F0               280 	mov	b,r4
   00FA ED                  281 	mov	a,r5
   00FB 12s00r00            282 	lcall	__gptrput
   00FE 02s01rF1            283 	ljmp	00112$
   0101                     284 00108$:
                    0101    285 	C$fruit.c$24$2$2 ==.
                            286 ;	../fruit.c:24: } else if (T6963C_readFrom(position->x, position->y+1) == EMPTY){
   0101 8A 82               287 	mov	dpl,r2
   0103 8B 83               288 	mov	dph,r3
   0105 8C F0               289 	mov	b,r4
   0107 12s00r00            290 	lcall	__gptrget
   010A FD                  291 	mov	r5,a
   010B 8E 82               292 	mov	dpl,r6
   010D 8F 83               293 	mov	dph,r7
   010F 88 F0               294 	mov	b,r0
   0111 12s00r00            295 	lcall	__gptrget
   0114 90s00r00            296 	mov	dptr,#_T6963C_readFrom_PARM_2
   0117 04                  297 	inc	a
   0118 F0                  298 	movx	@dptr,a
   0119 8D 82               299 	mov	dpl,r5
   011B C0 02               300 	push	ar2
   011D C0 03               301 	push	ar3
   011F C0 04               302 	push	ar4
   0121 C0 06               303 	push	ar6
   0123 C0 07               304 	push	ar7
   0125 C0 00               305 	push	ar0
   0127 12s00r00            306 	lcall	_T6963C_readFrom
   012A E5 82               307 	mov	a,dpl
   012C D0 00               308 	pop	ar0
   012E D0 07               309 	pop	ar7
   0130 D0 06               310 	pop	ar6
   0132 D0 04               311 	pop	ar4
   0134 D0 03               312 	pop	ar3
   0136 D0 02               313 	pop	ar2
   0138 70 18               314 	jnz	00105$
                    013A    315 	C$fruit.c$25$3$5 ==.
                            316 ;	../fruit.c:25: position->y++;
   013A 8E 82               317 	mov	dpl,r6
   013C 8F 83               318 	mov	dph,r7
   013E 88 F0               319 	mov	b,r0
   0140 12s00r00            320 	lcall	__gptrget
   0143 FD                  321 	mov	r5,a
   0144 0D                  322 	inc	r5
   0145 8E 82               323 	mov	dpl,r6
   0147 8F 83               324 	mov	dph,r7
   0149 88 F0               325 	mov	b,r0
   014B ED                  326 	mov	a,r5
   014C 12s00r00            327 	lcall	__gptrput
   014F 02s01rF1            328 	ljmp	00112$
   0152                     329 00105$:
                    0152    330 	C$fruit.c$26$2$2 ==.
                            331 ;	../fruit.c:26: } else if (T6963C_readFrom(position->x, position->y-1) == EMPTY){
   0152 8A 82               332 	mov	dpl,r2
   0154 8B 83               333 	mov	dph,r3
   0156 8C F0               334 	mov	b,r4
   0158 12s00r00            335 	lcall	__gptrget
   015B FD                  336 	mov	r5,a
   015C 8E 82               337 	mov	dpl,r6
   015E 8F 83               338 	mov	dph,r7
   0160 88 F0               339 	mov	b,r0
   0162 12s00r00            340 	lcall	__gptrget
   0165 F9                  341 	mov	r1,a
   0166 19                  342 	dec	r1
   0167 90s00r00            343 	mov	dptr,#_T6963C_readFrom_PARM_2
   016A E9                  344 	mov	a,r1
   016B F0                  345 	movx	@dptr,a
   016C 8D 82               346 	mov	dpl,r5
   016E C0 02               347 	push	ar2
   0170 C0 03               348 	push	ar3
   0172 C0 04               349 	push	ar4
   0174 C0 06               350 	push	ar6
   0176 C0 07               351 	push	ar7
   0178 C0 00               352 	push	ar0
   017A 12s00r00            353 	lcall	_T6963C_readFrom
   017D E5 82               354 	mov	a,dpl
   017F D0 00               355 	pop	ar0
   0181 D0 07               356 	pop	ar7
   0183 D0 06               357 	pop	ar6
   0185 D0 04               358 	pop	ar4
   0187 D0 03               359 	pop	ar3
   0189 D0 02               360 	pop	ar2
   018B 70 17               361 	jnz	00102$
                    018D    362 	C$fruit.c$27$3$6 ==.
                            363 ;	../fruit.c:27: position->y--;
   018D 8E 82               364 	mov	dpl,r6
   018F 8F 83               365 	mov	dph,r7
   0191 88 F0               366 	mov	b,r0
   0193 12s00r00            367 	lcall	__gptrget
   0196 FD                  368 	mov	r5,a
   0197 1D                  369 	dec	r5
   0198 8E 82               370 	mov	dpl,r6
   019A 8F 83               371 	mov	dph,r7
   019C 88 F0               372 	mov	b,r0
   019E ED                  373 	mov	a,r5
   019F 12s00r00            374 	lcall	__gptrput
   01A2 80 4D               375 	sjmp	00112$
   01A4                     376 00102$:
                    01A4    377 	C$fruit.c$29$1$1 ==.
                            378 ;	../fruit.c:29: FRUIT_random(position);
   01A4 C0 06               379 	push	ar6
   01A6 C0 07               380 	push	ar7
   01A8 C0 00               381 	push	ar0
   01AA 8A 82               382 	mov	dpl,r2
   01AC 8B 83               383 	mov	dph,r3
   01AE 8C F0               384 	mov	b,r4
   01B0 C0 02               385 	push	ar2
   01B2 C0 03               386 	push	ar3
   01B4 C0 04               387 	push	ar4
   01B6 C0 06               388 	push	ar6
   01B8 C0 07               389 	push	ar7
   01BA C0 00               390 	push	ar0
   01BC 12s02r35            391 	lcall	_FRUIT_random
   01BF D0 00               392 	pop	ar0
   01C1 D0 07               393 	pop	ar7
   01C3 D0 06               394 	pop	ar6
                    01C5    395 	C$fruit.c$30$3$7 ==.
                            396 ;	../fruit.c:30: FRUIT_placeInFreeSpace(position);
   01C5 90s00r00            397 	mov	dptr,#_FRUIT_placeInFreeSpace_position_1_1
   01C8 E0                  398 	movx	a,@dptr
   01C9 FD                  399 	mov	r5,a
   01CA A3                  400 	inc	dptr
   01CB E0                  401 	movx	a,@dptr
   01CC F9                  402 	mov	r1,a
   01CD A3                  403 	inc	dptr
   01CE E0                  404 	movx	a,@dptr
   01CF FE                  405 	mov	r6,a
   01D0 8D 82               406 	mov	dpl,r5
   01D2 89 83               407 	mov	dph,r1
   01D4 8E F0               408 	mov	b,r6
   01D6 C0 06               409 	push	ar6
   01D8 C0 07               410 	push	ar7
   01DA C0 00               411 	push	ar0
   01DC 12s00r00            412 	lcall	_FRUIT_placeInFreeSpace
   01DF D0 00               413 	pop	ar0
   01E1 D0 07               414 	pop	ar7
   01E3 D0 06               415 	pop	ar6
   01E5 D0 04               416 	pop	ar4
   01E7 D0 03               417 	pop	ar3
   01E9 D0 02               418 	pop	ar2
                    01EB    419 	C$fruit.c$36$1$1 ==.
                            420 ;	../fruit.c:36: T6963C_writeAt(position->x, position->y, FRUIT); 
   01EB D0 00               421 	pop	ar0
   01ED D0 07               422 	pop	ar7
   01EF D0 06               423 	pop	ar6
                    01F1    424 	C$fruit.c$30$2$2 ==.
                            425 ;	../fruit.c:30: FRUIT_placeInFreeSpace(position);
   01F1                     426 00112$:
                    01F1    427 	C$fruit.c$33$2$2 ==.
                            428 ;	../fruit.c:33: T6963C_writeAt(position->x, position->y, FRUIT);
   01F1 8A 82               429 	mov	dpl,r2
   01F3 8B 83               430 	mov	dph,r3
   01F5 8C F0               431 	mov	b,r4
   01F7 12s00r00            432 	lcall	__gptrget
   01FA FD                  433 	mov	r5,a
   01FB 8E 82               434 	mov	dpl,r6
   01FD 8F 83               435 	mov	dph,r7
   01FF 88 F0               436 	mov	b,r0
   0201 12s00r00            437 	lcall	__gptrget
   0204 90s00r00            438 	mov	dptr,#_T6963C_writeAt_PARM_2
   0207 F0                  439 	movx	@dptr,a
   0208 90s00r00            440 	mov	dptr,#_T6963C_writeAt_PARM_3
   020B 74 15               441 	mov	a,#0x15
   020D F0                  442 	movx	@dptr,a
   020E 8D 82               443 	mov	dpl,r5
   0210 02s00r00            444 	ljmp	_T6963C_writeAt
   0213                     445 00114$:
                    0213    446 	C$fruit.c$36$2$8 ==.
                            447 ;	../fruit.c:36: T6963C_writeAt(position->x, position->y, FRUIT); 
   0213 8A 82               448 	mov	dpl,r2
   0215 8B 83               449 	mov	dph,r3
   0217 8C F0               450 	mov	b,r4
   0219 12s00r00            451 	lcall	__gptrget
   021C FA                  452 	mov	r2,a
   021D 8E 82               453 	mov	dpl,r6
   021F 8F 83               454 	mov	dph,r7
   0221 88 F0               455 	mov	b,r0
   0223 12s00r00            456 	lcall	__gptrget
   0226 90s00r00            457 	mov	dptr,#_T6963C_writeAt_PARM_2
   0229 F0                  458 	movx	@dptr,a
   022A 90s00r00            459 	mov	dptr,#_T6963C_writeAt_PARM_3
   022D 74 15               460 	mov	a,#0x15
   022F F0                  461 	movx	@dptr,a
   0230 8A 82               462 	mov	dpl,r2
                    0232    463 	C$fruit.c$38$1$1 ==.
                    0232    464 	XG$FRUIT_placeInFreeSpace$0$0 ==.
   0232 02s00r00            465 	ljmp	_T6963C_writeAt
                            466 ;------------------------------------------------------------
                            467 ;Allocation info for local variables in function 'FRUIT_random'
                            468 ;------------------------------------------------------------
                            469 ;position                  Allocated with name '_FRUIT_random_position_1_1'
                            470 ;------------------------------------------------------------
                    0235    471 	G$FRUIT_random$0$0 ==.
                    0235    472 	C$fruit.c$47$1$1 ==.
                            473 ;	../fruit.c:47: void FRUIT_random(Position *position) {
                            474 ;	-----------------------------------------
                            475 ;	 function FRUIT_random
                            476 ;	-----------------------------------------
   0235                     477 _FRUIT_random:
   0235 AA F0               478 	mov	r2,b
   0237 AB 83               479 	mov	r3,dph
   0239 E5 82               480 	mov	a,dpl
   023B 90s00r03            481 	mov	dptr,#_FRUIT_random_position_1_1
   023E F0                  482 	movx	@dptr,a
   023F A3                  483 	inc	dptr
   0240 EB                  484 	mov	a,r3
   0241 F0                  485 	movx	@dptr,a
   0242 A3                  486 	inc	dptr
   0243 EA                  487 	mov	a,r2
   0244 F0                  488 	movx	@dptr,a
                    0245    489 	C$fruit.c$48$1$1 ==.
                            490 ;	../fruit.c:48: position->x = rand_interval(SNAKE_LIMIT_X0,SNAKE_LIMIT_X1);
   0245 90s00r03            491 	mov	dptr,#_FRUIT_random_position_1_1
   0248 E0                  492 	movx	a,@dptr
   0249 FA                  493 	mov	r2,a
   024A A3                  494 	inc	dptr
   024B E0                  495 	movx	a,@dptr
   024C FB                  496 	mov	r3,a
   024D A3                  497 	inc	dptr
   024E E0                  498 	movx	a,@dptr
   024F FC                  499 	mov	r4,a
   0250 90s00r00            500 	mov	dptr,#_rand_interval_PARM_2
   0253 74 1D               501 	mov	a,#0x1D
   0255 F0                  502 	movx	@dptr,a
   0256 A3                  503 	inc	dptr
   0257 E4                  504 	clr	a
   0258 F0                  505 	movx	@dptr,a
   0259 90 00 00            506 	mov	dptr,#0x0000
   025C C0 02               507 	push	ar2
   025E C0 03               508 	push	ar3
   0260 C0 04               509 	push	ar4
   0262 12s00r00            510 	lcall	_rand_interval
   0265 AD 82               511 	mov	r5,dpl
   0267 D0 04               512 	pop	ar4
   0269 D0 03               513 	pop	ar3
   026B D0 02               514 	pop	ar2
   026D 8A 82               515 	mov	dpl,r2
   026F 8B 83               516 	mov	dph,r3
   0271 8C F0               517 	mov	b,r4
   0273 ED                  518 	mov	a,r5
   0274 12s00r00            519 	lcall	__gptrput
                    0277    520 	C$fruit.c$49$1$1 ==.
                            521 ;	../fruit.c:49: position->y = rand_interval(SNAKE_LIMIT_Y0,SNAKE_LIMIT_Y1);
   0277 0A                  522 	inc	r2
   0278 BA 00 01            523 	cjne	r2,#0x00,00103$
   027B 0B                  524 	inc	r3
   027C                     525 00103$:
   027C 90s00r00            526 	mov	dptr,#_rand_interval_PARM_2
   027F 74 0F               527 	mov	a,#0x0F
   0281 F0                  528 	movx	@dptr,a
   0282 A3                  529 	inc	dptr
   0283 E4                  530 	clr	a
   0284 F0                  531 	movx	@dptr,a
   0285 90 00 00            532 	mov	dptr,#0x0000
   0288 C0 02               533 	push	ar2
   028A C0 03               534 	push	ar3
   028C C0 04               535 	push	ar4
   028E 12s00r00            536 	lcall	_rand_interval
   0291 AD 82               537 	mov	r5,dpl
   0293 D0 04               538 	pop	ar4
   0295 D0 03               539 	pop	ar3
   0297 D0 02               540 	pop	ar2
   0299 8A 82               541 	mov	dpl,r2
   029B 8B 83               542 	mov	dph,r3
   029D 8C F0               543 	mov	b,r4
   029F ED                  544 	mov	a,r5
                    02A0    545 	C$fruit.c$50$1$1 ==.
                    02A0    546 	XG$FRUIT_random$0$0 ==.
   02A0 02s00r00            547 	ljmp	__gptrput
                            548 ;------------------------------------------------------------
                            549 ;Allocation info for local variables in function 'FRUIT_place'
                            550 ;------------------------------------------------------------
                            551 ;position                  Allocated with name '_FRUIT_place_position_1_1'
                            552 ;------------------------------------------------------------
                    02A3    553 	G$FRUIT_place$0$0 ==.
                    02A3    554 	C$fruit.c$57$1$1 ==.
                            555 ;	../fruit.c:57: void FRUIT_place() {
                            556 ;	-----------------------------------------
                            557 ;	 function FRUIT_place
                            558 ;	-----------------------------------------
   02A3                     559 _FRUIT_place:
                    02A3    560 	C$fruit.c$59$1$1 ==.
                            561 ;	../fruit.c:59: FRUIT_random(&position);
   02A3 90s00r06            562 	mov	dptr,#_FRUIT_place_position_1_1
   02A6 75 F0 00            563 	mov	b,#0x00
   02A9 12s02r35            564 	lcall	_FRUIT_random
                    02AC    565 	C$fruit.c$60$1$1 ==.
                            566 ;	../fruit.c:60: FRUIT_placeInFreeSpace(&position);
   02AC 90s00r06            567 	mov	dptr,#_FRUIT_place_position_1_1
   02AF 75 F0 00            568 	mov	b,#0x00
                    02B2    569 	C$fruit.c$61$1$1 ==.
                    02B2    570 	XG$FRUIT_place$0$0 ==.
   02B2 02s00r00            571 	ljmp	_FRUIT_placeInFreeSpace
                            572 ;------------------------------------------------------------
                            573 ;Allocation info for local variables in function 'testFruitIsPlacedInFreeSpace'
                            574 ;------------------------------------------------------------
                            575 ;testsInError              Allocated with name '_testFruitIsPlacedInFreeSpace_testsInError_1_1'
                            576 ;position                  Allocated with name '_testFruitIsPlacedInFreeSpace_position_1_1'
                            577 ;c                         Allocated with name '_testFruitIsPlacedInFreeSpace_c_1_1'
                            578 ;------------------------------------------------------------
                    02B5    579 	G$testFruitIsPlacedInFreeSpace$0$0 ==.
                    02B5    580 	C$fruit.c$64$1$1 ==.
                            581 ;	../fruit.c:64: int testFruitIsPlacedInFreeSpace() {
                            582 ;	-----------------------------------------
                            583 ;	 function testFruitIsPlacedInFreeSpace
                            584 ;	-----------------------------------------
   02B5                     585 _testFruitIsPlacedInFreeSpace:
                    02B5    586 	C$fruit.c$66$1$1 ==.
                            587 ;	../fruit.c:66: Position position = {10, 10};
   02B5 90s00r08            588 	mov	dptr,#_testFruitIsPlacedInFreeSpace_position_1_1
   02B8 74 0A               589 	mov	a,#0x0A
   02BA F0                  590 	movx	@dptr,a
   02BB 90s00r09            591 	mov	dptr,#(_testFruitIsPlacedInFreeSpace_position_1_1 + 0x0001)
   02BE 74 0A               592 	mov	a,#0x0A
   02C0 F0                  593 	movx	@dptr,a
                    02C1    594 	C$fruit.c$69$1$1 ==.
                            595 ;	../fruit.c:69: T6963C_writeAt(position.x, position.y, EMPTY);
   02C1 90s00r08            596 	mov	dptr,#_testFruitIsPlacedInFreeSpace_position_1_1
   02C4 E0                  597 	movx	a,@dptr
   02C5 FA                  598 	mov	r2,a
   02C6 90s00r09            599 	mov	dptr,#(_testFruitIsPlacedInFreeSpace_position_1_1 + 0x0001)
   02C9 E0                  600 	movx	a,@dptr
   02CA 90s00r00            601 	mov	dptr,#_T6963C_writeAt_PARM_2
   02CD F0                  602 	movx	@dptr,a
   02CE 90s00r00            603 	mov	dptr,#_T6963C_writeAt_PARM_3
   02D1 E4                  604 	clr	a
   02D2 F0                  605 	movx	@dptr,a
   02D3 8A 82               606 	mov	dpl,r2
   02D5 12s00r00            607 	lcall	_T6963C_writeAt
                    02D8    608 	C$fruit.c$71$1$1 ==.
                            609 ;	../fruit.c:71: FRUIT_placeInFreeSpace(&position);
   02D8 90s00r08            610 	mov	dptr,#_testFruitIsPlacedInFreeSpace_position_1_1
   02DB 75 F0 00            611 	mov	b,#0x00
   02DE 12s00r00            612 	lcall	_FRUIT_placeInFreeSpace
                    02E1    613 	C$fruit.c$72$1$1 ==.
                            614 ;	../fruit.c:72: testsInError += assertEquals(position.x, 10, "FPF1");
   02E1 90s00r08            615 	mov	dptr,#_testFruitIsPlacedInFreeSpace_position_1_1
   02E4 E0                  616 	movx	a,@dptr
   02E5 FA                  617 	mov	r2,a
   02E6 7B 00               618 	mov	r3,#0x00
   02E8 90s00r00            619 	mov	dptr,#_assertEquals_PARM_2
   02EB 74 0A               620 	mov	a,#0x0A
   02ED F0                  621 	movx	@dptr,a
   02EE A3                  622 	inc	dptr
   02EF E4                  623 	clr	a
   02F0 F0                  624 	movx	@dptr,a
   02F1 90s00r00            625 	mov	dptr,#_assertEquals_PARM_3
   02F4 74r00               626 	mov	a,#__str_0
   02F6 F0                  627 	movx	@dptr,a
   02F7 A3                  628 	inc	dptr
   02F8 74s00               629 	mov	a,#(__str_0 >> 8)
   02FA F0                  630 	movx	@dptr,a
   02FB A3                  631 	inc	dptr
   02FC 74 80               632 	mov	a,#0x80
   02FE F0                  633 	movx	@dptr,a
   02FF 8A 82               634 	mov	dpl,r2
   0301 8B 83               635 	mov	dph,r3
   0303 12s00r00            636 	lcall	_assertEquals
   0306 AA 82               637 	mov	r2,dpl
   0308 AB 83               638 	mov	r3,dph
                    030A    639 	C$fruit.c$73$1$1 ==.
                            640 ;	../fruit.c:73: testsInError += assertEquals(position.y, 10, "FPF2");
   030A 90s00r09            641 	mov	dptr,#(_testFruitIsPlacedInFreeSpace_position_1_1 + 0x0001)
   030D E0                  642 	movx	a,@dptr
   030E FC                  643 	mov	r4,a
   030F 7D 00               644 	mov	r5,#0x00
   0311 90s00r00            645 	mov	dptr,#_assertEquals_PARM_2
   0314 74 0A               646 	mov	a,#0x0A
   0316 F0                  647 	movx	@dptr,a
   0317 A3                  648 	inc	dptr
   0318 E4                  649 	clr	a
   0319 F0                  650 	movx	@dptr,a
   031A 90s00r00            651 	mov	dptr,#_assertEquals_PARM_3
   031D 74r05               652 	mov	a,#__str_1
   031F F0                  653 	movx	@dptr,a
   0320 A3                  654 	inc	dptr
   0321 74s00               655 	mov	a,#(__str_1 >> 8)
   0323 F0                  656 	movx	@dptr,a
   0324 A3                  657 	inc	dptr
   0325 74 80               658 	mov	a,#0x80
   0327 F0                  659 	movx	@dptr,a
   0328 8C 82               660 	mov	dpl,r4
   032A 8D 83               661 	mov	dph,r5
   032C C0 02               662 	push	ar2
   032E C0 03               663 	push	ar3
   0330 12s00r00            664 	lcall	_assertEquals
   0333 AC 82               665 	mov	r4,dpl
   0335 AD 83               666 	mov	r5,dph
   0337 D0 03               667 	pop	ar3
   0339 D0 02               668 	pop	ar2
   033B EC                  669 	mov	a,r4
   033C 2A                  670 	add	a,r2
   033D FA                  671 	mov	r2,a
   033E ED                  672 	mov	a,r5
   033F 3B                  673 	addc	a,r3
   0340 FB                  674 	mov	r3,a
                    0341    675 	C$fruit.c$74$1$1 ==.
                            676 ;	../fruit.c:74: c = T6963C_readFrom(10, 10);
   0341 90s00r00            677 	mov	dptr,#_T6963C_readFrom_PARM_2
   0344 74 0A               678 	mov	a,#0x0A
   0346 F0                  679 	movx	@dptr,a
   0347 75 82 0A            680 	mov	dpl,#0x0A
   034A C0 02               681 	push	ar2
   034C C0 03               682 	push	ar3
   034E 12s00r00            683 	lcall	_T6963C_readFrom
                    0351    684 	C$fruit.c$75$1$1 ==.
                            685 ;	../fruit.c:75: testsInError += assertEquals(c, FRUIT, "FPF3");
   0351 E5 82               686 	mov	a,dpl
   0353 FC                  687 	mov	r4,a
   0354 33                  688 	rlc	a
   0355 95 E0               689 	subb	a,acc
   0357 FD                  690 	mov	r5,a
   0358 90s00r00            691 	mov	dptr,#_assertEquals_PARM_2
   035B 74 15               692 	mov	a,#0x15
   035D F0                  693 	movx	@dptr,a
   035E A3                  694 	inc	dptr
   035F E4                  695 	clr	a
   0360 F0                  696 	movx	@dptr,a
   0361 90s00r00            697 	mov	dptr,#_assertEquals_PARM_3
   0364 74r0A               698 	mov	a,#__str_2
   0366 F0                  699 	movx	@dptr,a
   0367 A3                  700 	inc	dptr
   0368 74s00               701 	mov	a,#(__str_2 >> 8)
   036A F0                  702 	movx	@dptr,a
   036B A3                  703 	inc	dptr
   036C 74 80               704 	mov	a,#0x80
   036E F0                  705 	movx	@dptr,a
   036F 8C 82               706 	mov	dpl,r4
   0371 8D 83               707 	mov	dph,r5
   0373 12s00r00            708 	lcall	_assertEquals
   0376 AC 82               709 	mov	r4,dpl
   0378 AD 83               710 	mov	r5,dph
   037A D0 03               711 	pop	ar3
   037C D0 02               712 	pop	ar2
   037E EC                  713 	mov	a,r4
   037F 2A                  714 	add	a,r2
   0380 FA                  715 	mov	r2,a
   0381 ED                  716 	mov	a,r5
   0382 3B                  717 	addc	a,r3
   0383 FB                  718 	mov	r3,a
                    0384    719 	C$fruit.c$77$1$1 ==.
                            720 ;	../fruit.c:77: FRUIT_placeInFreeSpace(&position);
   0384 90s00r08            721 	mov	dptr,#_testFruitIsPlacedInFreeSpace_position_1_1
   0387 75 F0 00            722 	mov	b,#0x00
   038A C0 02               723 	push	ar2
   038C C0 03               724 	push	ar3
   038E 12s00r00            725 	lcall	_FRUIT_placeInFreeSpace
                    0391    726 	C$fruit.c$78$1$1 ==.
                            727 ;	../fruit.c:78: testsInError += assertNotEquals(position.x, 10, "FPF4");
   0391 90s00r08            728 	mov	dptr,#_testFruitIsPlacedInFreeSpace_position_1_1
   0394 E0                  729 	movx	a,@dptr
   0395 FC                  730 	mov	r4,a
   0396 7D 00               731 	mov	r5,#0x00
   0398 90s00r00            732 	mov	dptr,#_assertNotEquals_PARM_2
   039B 74 0A               733 	mov	a,#0x0A
   039D F0                  734 	movx	@dptr,a
   039E A3                  735 	inc	dptr
   039F E4                  736 	clr	a
   03A0 F0                  737 	movx	@dptr,a
   03A1 90s00r00            738 	mov	dptr,#_assertNotEquals_PARM_3
   03A4 74r0F               739 	mov	a,#__str_3
   03A6 F0                  740 	movx	@dptr,a
   03A7 A3                  741 	inc	dptr
   03A8 74s00               742 	mov	a,#(__str_3 >> 8)
   03AA F0                  743 	movx	@dptr,a
   03AB A3                  744 	inc	dptr
   03AC 74 80               745 	mov	a,#0x80
   03AE F0                  746 	movx	@dptr,a
   03AF 8C 82               747 	mov	dpl,r4
   03B1 8D 83               748 	mov	dph,r5
   03B3 12s00r00            749 	lcall	_assertNotEquals
   03B6 AC 82               750 	mov	r4,dpl
   03B8 AD 83               751 	mov	r5,dph
   03BA D0 03               752 	pop	ar3
   03BC D0 02               753 	pop	ar2
   03BE EC                  754 	mov	a,r4
   03BF 2A                  755 	add	a,r2
   03C0 FA                  756 	mov	r2,a
   03C1 ED                  757 	mov	a,r5
   03C2 3B                  758 	addc	a,r3
   03C3 FB                  759 	mov	r3,a
                    03C4    760 	C$fruit.c$79$1$1 ==.
                            761 ;	../fruit.c:79: c = T6963C_readFrom(position.x, position.y);
   03C4 90s00r08            762 	mov	dptr,#_testFruitIsPlacedInFreeSpace_position_1_1
   03C7 E0                  763 	movx	a,@dptr
   03C8 FC                  764 	mov	r4,a
   03C9 90s00r09            765 	mov	dptr,#(_testFruitIsPlacedInFreeSpace_position_1_1 + 0x0001)
   03CC E0                  766 	movx	a,@dptr
   03CD 90s00r00            767 	mov	dptr,#_T6963C_readFrom_PARM_2
   03D0 F0                  768 	movx	@dptr,a
   03D1 8C 82               769 	mov	dpl,r4
   03D3 C0 02               770 	push	ar2
   03D5 C0 03               771 	push	ar3
   03D7 12s00r00            772 	lcall	_T6963C_readFrom
                    03DA    773 	C$fruit.c$80$1$1 ==.
                            774 ;	../fruit.c:80: testsInError += assertEquals(c, FRUIT, "FPF6");
   03DA E5 82               775 	mov	a,dpl
   03DC FC                  776 	mov	r4,a
   03DD 33                  777 	rlc	a
   03DE 95 E0               778 	subb	a,acc
   03E0 FD                  779 	mov	r5,a
   03E1 90s00r00            780 	mov	dptr,#_assertEquals_PARM_2
   03E4 74 15               781 	mov	a,#0x15
   03E6 F0                  782 	movx	@dptr,a
   03E7 A3                  783 	inc	dptr
   03E8 E4                  784 	clr	a
   03E9 F0                  785 	movx	@dptr,a
   03EA 90s00r00            786 	mov	dptr,#_assertEquals_PARM_3
   03ED 74r14               787 	mov	a,#__str_4
   03EF F0                  788 	movx	@dptr,a
   03F0 A3                  789 	inc	dptr
   03F1 74s00               790 	mov	a,#(__str_4 >> 8)
   03F3 F0                  791 	movx	@dptr,a
   03F4 A3                  792 	inc	dptr
   03F5 74 80               793 	mov	a,#0x80
   03F7 F0                  794 	movx	@dptr,a
   03F8 8C 82               795 	mov	dpl,r4
   03FA 8D 83               796 	mov	dph,r5
   03FC 12s00r00            797 	lcall	_assertEquals
   03FF AC 82               798 	mov	r4,dpl
   0401 AD 83               799 	mov	r5,dph
   0403 D0 03               800 	pop	ar3
   0405 D0 02               801 	pop	ar2
   0407 EC                  802 	mov	a,r4
   0408 2A                  803 	add	a,r2
   0409 FA                  804 	mov	r2,a
   040A ED                  805 	mov	a,r5
   040B 3B                  806 	addc	a,r3
                    040C    807 	C$fruit.c$82$1$1 ==.
                            808 ;	../fruit.c:82: return testsInError;
                    040C    809 	C$fruit.c$83$1$1 ==.
                    040C    810 	XG$testFruitIsPlacedInFreeSpace$0$0 ==.
   040C 8A 82               811 	mov	dpl,r2
   040E F5 83               812 	mov	dph,a
   0410 22                  813 	ret
                            814 ;------------------------------------------------------------
                            815 ;Allocation info for local variables in function 'testFruitIsPlacedRandomly'
                            816 ;------------------------------------------------------------
                            817 ;testsInError              Allocated with name '_testFruitIsPlacedRandomly_testsInError_1_1'
                            818 ;position1                 Allocated with name '_testFruitIsPlacedRandomly_position1_1_1'
                            819 ;position2                 Allocated with name '_testFruitIsPlacedRandomly_position2_1_1'
                            820 ;------------------------------------------------------------
                    0411    821 	G$testFruitIsPlacedRandomly$0$0 ==.
                    0411    822 	C$fruit.c$85$1$1 ==.
                            823 ;	../fruit.c:85: int testFruitIsPlacedRandomly() {
                            824 ;	-----------------------------------------
                            825 ;	 function testFruitIsPlacedRandomly
                            826 ;	-----------------------------------------
   0411                     827 _testFruitIsPlacedRandomly:
                    0411    828 	C$fruit.c$88$1$1 ==.
                            829 ;	../fruit.c:88: Position position1 = {50, 50};
   0411 90s00r0A            830 	mov	dptr,#_testFruitIsPlacedRandomly_position1_1_1
   0414 74 32               831 	mov	a,#0x32
   0416 F0                  832 	movx	@dptr,a
   0417 90s00r0B            833 	mov	dptr,#(_testFruitIsPlacedRandomly_position1_1_1 + 0x0001)
   041A 74 32               834 	mov	a,#0x32
   041C F0                  835 	movx	@dptr,a
                    041D    836 	C$fruit.c$89$1$1 ==.
                            837 ;	../fruit.c:89: Position position2 = {50, 50};
   041D 90s00r0C            838 	mov	dptr,#_testFruitIsPlacedRandomly_position2_1_1
   0420 74 32               839 	mov	a,#0x32
   0422 F0                  840 	movx	@dptr,a
   0423 90s00r0D            841 	mov	dptr,#(_testFruitIsPlacedRandomly_position2_1_1 + 0x0001)
   0426 74 32               842 	mov	a,#0x32
   0428 F0                  843 	movx	@dptr,a
                    0429    844 	C$fruit.c$91$1$1 ==.
                            845 ;	../fruit.c:91: FRUIT_random(&position1);
   0429 90s00r0A            846 	mov	dptr,#_testFruitIsPlacedRandomly_position1_1_1
   042C 75 F0 00            847 	mov	b,#0x00
   042F 12s02r35            848 	lcall	_FRUIT_random
                    0432    849 	C$fruit.c$92$1$1 ==.
                            850 ;	../fruit.c:92: FRUIT_random(&position2);
   0432 90s00r0C            851 	mov	dptr,#_testFruitIsPlacedRandomly_position2_1_1
   0435 75 F0 00            852 	mov	b,#0x00
   0438 12s02r35            853 	lcall	_FRUIT_random
                    043B    854 	C$fruit.c$94$1$1 ==.
                            855 ;	../fruit.c:94: testsInError += assertNotEquals(position1.x, 50, "FPR1");
   043B 90s00r0A            856 	mov	dptr,#_testFruitIsPlacedRandomly_position1_1_1
   043E E0                  857 	movx	a,@dptr
   043F FA                  858 	mov	r2,a
   0440 7B 00               859 	mov	r3,#0x00
   0442 90s00r00            860 	mov	dptr,#_assertNotEquals_PARM_2
   0445 74 32               861 	mov	a,#0x32
   0447 F0                  862 	movx	@dptr,a
   0448 A3                  863 	inc	dptr
   0449 E4                  864 	clr	a
   044A F0                  865 	movx	@dptr,a
   044B 90s00r00            866 	mov	dptr,#_assertNotEquals_PARM_3
   044E 74r19               867 	mov	a,#__str_5
   0450 F0                  868 	movx	@dptr,a
   0451 A3                  869 	inc	dptr
   0452 74s00               870 	mov	a,#(__str_5 >> 8)
   0454 F0                  871 	movx	@dptr,a
   0455 A3                  872 	inc	dptr
   0456 74 80               873 	mov	a,#0x80
   0458 F0                  874 	movx	@dptr,a
   0459 8A 82               875 	mov	dpl,r2
   045B 8B 83               876 	mov	dph,r3
   045D 12s00r00            877 	lcall	_assertNotEquals
   0460 AA 82               878 	mov	r2,dpl
   0462 AB 83               879 	mov	r3,dph
                    0464    880 	C$fruit.c$95$1$1 ==.
                            881 ;	../fruit.c:95: testsInError += assertNotEquals(position1.y, 50, "FPR2");
   0464 90s00r0B            882 	mov	dptr,#(_testFruitIsPlacedRandomly_position1_1_1 + 0x0001)
   0467 E0                  883 	movx	a,@dptr
   0468 FC                  884 	mov	r4,a
   0469 7D 00               885 	mov	r5,#0x00
   046B 90s00r00            886 	mov	dptr,#_assertNotEquals_PARM_2
   046E 74 32               887 	mov	a,#0x32
   0470 F0                  888 	movx	@dptr,a
   0471 A3                  889 	inc	dptr
   0472 E4                  890 	clr	a
   0473 F0                  891 	movx	@dptr,a
   0474 90s00r00            892 	mov	dptr,#_assertNotEquals_PARM_3
   0477 74r1E               893 	mov	a,#__str_6
   0479 F0                  894 	movx	@dptr,a
   047A A3                  895 	inc	dptr
   047B 74s00               896 	mov	a,#(__str_6 >> 8)
   047D F0                  897 	movx	@dptr,a
   047E A3                  898 	inc	dptr
   047F 74 80               899 	mov	a,#0x80
   0481 F0                  900 	movx	@dptr,a
   0482 8C 82               901 	mov	dpl,r4
   0484 8D 83               902 	mov	dph,r5
   0486 C0 02               903 	push	ar2
   0488 C0 03               904 	push	ar3
   048A 12s00r00            905 	lcall	_assertNotEquals
   048D AC 82               906 	mov	r4,dpl
   048F AD 83               907 	mov	r5,dph
   0491 D0 03               908 	pop	ar3
   0493 D0 02               909 	pop	ar2
   0495 EC                  910 	mov	a,r4
   0496 2A                  911 	add	a,r2
   0497 FA                  912 	mov	r2,a
   0498 ED                  913 	mov	a,r5
   0499 3B                  914 	addc	a,r3
   049A FB                  915 	mov	r3,a
                    049B    916 	C$fruit.c$96$1$1 ==.
                            917 ;	../fruit.c:96: testsInError += assertNotEquals(position2.x, 50, "FPR3");
   049B 90s00r0C            918 	mov	dptr,#_testFruitIsPlacedRandomly_position2_1_1
   049E E0                  919 	movx	a,@dptr
   049F FC                  920 	mov	r4,a
   04A0 7D 00               921 	mov	r5,#0x00
   04A2 90s00r00            922 	mov	dptr,#_assertNotEquals_PARM_2
   04A5 74 32               923 	mov	a,#0x32
   04A7 F0                  924 	movx	@dptr,a
   04A8 A3                  925 	inc	dptr
   04A9 E4                  926 	clr	a
   04AA F0                  927 	movx	@dptr,a
   04AB 90s00r00            928 	mov	dptr,#_assertNotEquals_PARM_3
   04AE 74r23               929 	mov	a,#__str_7
   04B0 F0                  930 	movx	@dptr,a
   04B1 A3                  931 	inc	dptr
   04B2 74s00               932 	mov	a,#(__str_7 >> 8)
   04B4 F0                  933 	movx	@dptr,a
   04B5 A3                  934 	inc	dptr
   04B6 74 80               935 	mov	a,#0x80
   04B8 F0                  936 	movx	@dptr,a
   04B9 8C 82               937 	mov	dpl,r4
   04BB 8D 83               938 	mov	dph,r5
   04BD C0 02               939 	push	ar2
   04BF C0 03               940 	push	ar3
   04C1 12s00r00            941 	lcall	_assertNotEquals
   04C4 AC 82               942 	mov	r4,dpl
   04C6 AD 83               943 	mov	r5,dph
   04C8 D0 03               944 	pop	ar3
   04CA D0 02               945 	pop	ar2
   04CC EC                  946 	mov	a,r4
   04CD 2A                  947 	add	a,r2
   04CE FA                  948 	mov	r2,a
   04CF ED                  949 	mov	a,r5
   04D0 3B                  950 	addc	a,r3
   04D1 FB                  951 	mov	r3,a
                    04D2    952 	C$fruit.c$97$1$1 ==.
                            953 ;	../fruit.c:97: testsInError += assertNotEquals(position2.y, 50, "FPR4");
   04D2 90s00r0D            954 	mov	dptr,#(_testFruitIsPlacedRandomly_position2_1_1 + 0x0001)
   04D5 E0                  955 	movx	a,@dptr
   04D6 FC                  956 	mov	r4,a
   04D7 7D 00               957 	mov	r5,#0x00
   04D9 90s00r00            958 	mov	dptr,#_assertNotEquals_PARM_2
   04DC 74 32               959 	mov	a,#0x32
   04DE F0                  960 	movx	@dptr,a
   04DF A3                  961 	inc	dptr
   04E0 E4                  962 	clr	a
   04E1 F0                  963 	movx	@dptr,a
   04E2 90s00r00            964 	mov	dptr,#_assertNotEquals_PARM_3
   04E5 74r28               965 	mov	a,#__str_8
   04E7 F0                  966 	movx	@dptr,a
   04E8 A3                  967 	inc	dptr
   04E9 74s00               968 	mov	a,#(__str_8 >> 8)
   04EB F0                  969 	movx	@dptr,a
   04EC A3                  970 	inc	dptr
   04ED 74 80               971 	mov	a,#0x80
   04EF F0                  972 	movx	@dptr,a
   04F0 8C 82               973 	mov	dpl,r4
   04F2 8D 83               974 	mov	dph,r5
   04F4 C0 02               975 	push	ar2
   04F6 C0 03               976 	push	ar3
   04F8 12s00r00            977 	lcall	_assertNotEquals
   04FB AC 82               978 	mov	r4,dpl
   04FD AD 83               979 	mov	r5,dph
   04FF D0 03               980 	pop	ar3
   0501 D0 02               981 	pop	ar2
   0503 EC                  982 	mov	a,r4
   0504 2A                  983 	add	a,r2
   0505 FA                  984 	mov	r2,a
   0506 ED                  985 	mov	a,r5
   0507 3B                  986 	addc	a,r3
   0508 FB                  987 	mov	r3,a
                    0509    988 	C$fruit.c$99$1$1 ==.
                            989 ;	../fruit.c:99: testsInError += assertNotEquals(position1.x, position2.x, "FPR5");
   0509 90s00r0A            990 	mov	dptr,#_testFruitIsPlacedRandomly_position1_1_1
   050C E0                  991 	movx	a,@dptr
   050D FC                  992 	mov	r4,a
   050E 7D 00               993 	mov	r5,#0x00
   0510 90s00r0C            994 	mov	dptr,#_testFruitIsPlacedRandomly_position2_1_1
   0513 E0                  995 	movx	a,@dptr
   0514 FE                  996 	mov	r6,a
   0515 7F 00               997 	mov	r7,#0x00
   0517 90s00r00            998 	mov	dptr,#_assertNotEquals_PARM_2
   051A EE                  999 	mov	a,r6
   051B F0                 1000 	movx	@dptr,a
   051C A3                 1001 	inc	dptr
   051D EF                 1002 	mov	a,r7
   051E F0                 1003 	movx	@dptr,a
   051F 90s00r00           1004 	mov	dptr,#_assertNotEquals_PARM_3
   0522 74r2D              1005 	mov	a,#__str_9
   0524 F0                 1006 	movx	@dptr,a
   0525 A3                 1007 	inc	dptr
   0526 74s00              1008 	mov	a,#(__str_9 >> 8)
   0528 F0                 1009 	movx	@dptr,a
   0529 A3                 1010 	inc	dptr
   052A 74 80              1011 	mov	a,#0x80
   052C F0                 1012 	movx	@dptr,a
   052D 8C 82              1013 	mov	dpl,r4
   052F 8D 83              1014 	mov	dph,r5
   0531 C0 02              1015 	push	ar2
   0533 C0 03              1016 	push	ar3
   0535 12s00r00           1017 	lcall	_assertNotEquals
   0538 AC 82              1018 	mov	r4,dpl
   053A AD 83              1019 	mov	r5,dph
   053C D0 03              1020 	pop	ar3
   053E D0 02              1021 	pop	ar2
   0540 EC                 1022 	mov	a,r4
   0541 2A                 1023 	add	a,r2
   0542 FA                 1024 	mov	r2,a
   0543 ED                 1025 	mov	a,r5
   0544 3B                 1026 	addc	a,r3
   0545 FB                 1027 	mov	r3,a
                    0546   1028 	C$fruit.c$100$1$1 ==.
                           1029 ;	../fruit.c:100: testsInError += assertNotEquals(position1.y, position2.y, "FPR6");
   0546 90s00r0B           1030 	mov	dptr,#(_testFruitIsPlacedRandomly_position1_1_1 + 0x0001)
   0549 E0                 1031 	movx	a,@dptr
   054A FC                 1032 	mov	r4,a
   054B 7D 00              1033 	mov	r5,#0x00
   054D 90s00r0D           1034 	mov	dptr,#(_testFruitIsPlacedRandomly_position2_1_1 + 0x0001)
   0550 E0                 1035 	movx	a,@dptr
   0551 FE                 1036 	mov	r6,a
   0552 7F 00              1037 	mov	r7,#0x00
   0554 90s00r00           1038 	mov	dptr,#_assertNotEquals_PARM_2
   0557 EE                 1039 	mov	a,r6
   0558 F0                 1040 	movx	@dptr,a
   0559 A3                 1041 	inc	dptr
   055A EF                 1042 	mov	a,r7
   055B F0                 1043 	movx	@dptr,a
   055C 90s00r00           1044 	mov	dptr,#_assertNotEquals_PARM_3
   055F 74r32              1045 	mov	a,#__str_10
   0561 F0                 1046 	movx	@dptr,a
   0562 A3                 1047 	inc	dptr
   0563 74s00              1048 	mov	a,#(__str_10 >> 8)
   0565 F0                 1049 	movx	@dptr,a
   0566 A3                 1050 	inc	dptr
   0567 74 80              1051 	mov	a,#0x80
   0569 F0                 1052 	movx	@dptr,a
   056A 8C 82              1053 	mov	dpl,r4
   056C 8D 83              1054 	mov	dph,r5
   056E C0 02              1055 	push	ar2
   0570 C0 03              1056 	push	ar3
   0572 12s00r00           1057 	lcall	_assertNotEquals
   0575 AC 82              1058 	mov	r4,dpl
   0577 AD 83              1059 	mov	r5,dph
   0579 D0 03              1060 	pop	ar3
   057B D0 02              1061 	pop	ar2
   057D EC                 1062 	mov	a,r4
   057E 2A                 1063 	add	a,r2
   057F FA                 1064 	mov	r2,a
   0580 ED                 1065 	mov	a,r5
   0581 3B                 1066 	addc	a,r3
                    0582   1067 	C$fruit.c$103$1$1 ==.
                           1068 ;	../fruit.c:103: return testsInError;
                    0582   1069 	C$fruit.c$104$1$1 ==.
                    0582   1070 	XG$testFruitIsPlacedRandomly$0$0 ==.
   0582 8A 82              1071 	mov	dpl,r2
   0584 F5 83              1072 	mov	dph,a
   0586 22                 1073 	ret
                           1074 ;------------------------------------------------------------
                           1075 ;Allocation info for local variables in function 'testFruit'
                           1076 ;------------------------------------------------------------
                           1077 ;testsInError              Allocated with name '_testFruit_testsInError_1_1'
                           1078 ;------------------------------------------------------------
                    0587   1079 	G$testFruit$0$0 ==.
                    0587   1080 	C$fruit.c$106$1$1 ==.
                           1081 ;	../fruit.c:106: int testFruit() {
                           1082 ;	-----------------------------------------
                           1083 ;	 function testFruit
                           1084 ;	-----------------------------------------
   0587                    1085 _testFruit:
                    0587   1086 	C$fruit.c$109$1$1 ==.
                           1087 ;	../fruit.c:109: testsInError += testFruitIsPlacedRandomly();
   0587 12s04r11           1088 	lcall	_testFruitIsPlacedRandomly
   058A AA 82              1089 	mov	r2,dpl
   058C AB 83              1090 	mov	r3,dph
                    058E   1091 	C$fruit.c$110$1$1 ==.
                           1092 ;	../fruit.c:110: testsInError += testFruitIsPlacedInFreeSpace();
   058E C0 02              1093 	push	ar2
   0590 C0 03              1094 	push	ar3
   0592 12s02rB5           1095 	lcall	_testFruitIsPlacedInFreeSpace
   0595 AC 82              1096 	mov	r4,dpl
   0597 AD 83              1097 	mov	r5,dph
   0599 D0 03              1098 	pop	ar3
   059B D0 02              1099 	pop	ar2
   059D EC                 1100 	mov	a,r4
   059E 2A                 1101 	add	a,r2
   059F FA                 1102 	mov	r2,a
   05A0 ED                 1103 	mov	a,r5
   05A1 3B                 1104 	addc	a,r3
                    05A2   1105 	C$fruit.c$112$1$1 ==.
                           1106 ;	../fruit.c:112: return testsInError;
                    05A2   1107 	C$fruit.c$113$1$1 ==.
                    05A2   1108 	XG$testFruit$0$0 ==.
   05A2 8A 82              1109 	mov	dpl,r2
   05A4 F5 83              1110 	mov	dph,a
   05A6 22                 1111 	ret
                           1112 	.area CSEG    (CODE)
                           1113 	.area CONST   (CODE)
                    0000   1114 Ffruit$_str_0$0$0 == .
   0000                    1115 __str_0:
   0000 46 50 46 31        1116 	.ascii "FPF1"
   0004 00                 1117 	.db 0x00
                    0005   1118 Ffruit$_str_1$0$0 == .
   0005                    1119 __str_1:
   0005 46 50 46 32        1120 	.ascii "FPF2"
   0009 00                 1121 	.db 0x00
                    000A   1122 Ffruit$_str_2$0$0 == .
   000A                    1123 __str_2:
   000A 46 50 46 33        1124 	.ascii "FPF3"
   000E 00                 1125 	.db 0x00
                    000F   1126 Ffruit$_str_3$0$0 == .
   000F                    1127 __str_3:
   000F 46 50 46 34        1128 	.ascii "FPF4"
   0013 00                 1129 	.db 0x00
                    0014   1130 Ffruit$_str_4$0$0 == .
   0014                    1131 __str_4:
   0014 46 50 46 36        1132 	.ascii "FPF6"
   0018 00                 1133 	.db 0x00
                    0019   1134 Ffruit$_str_5$0$0 == .
   0019                    1135 __str_5:
   0019 46 50 52 31        1136 	.ascii "FPR1"
   001D 00                 1137 	.db 0x00
                    001E   1138 Ffruit$_str_6$0$0 == .
   001E                    1139 __str_6:
   001E 46 50 52 32        1140 	.ascii "FPR2"
   0022 00                 1141 	.db 0x00
                    0023   1142 Ffruit$_str_7$0$0 == .
   0023                    1143 __str_7:
   0023 46 50 52 33        1144 	.ascii "FPR3"
   0027 00                 1145 	.db 0x00
                    0028   1146 Ffruit$_str_8$0$0 == .
   0028                    1147 __str_8:
   0028 46 50 52 34        1148 	.ascii "FPR4"
   002C 00                 1149 	.db 0x00
                    002D   1150 Ffruit$_str_9$0$0 == .
   002D                    1151 __str_9:
   002D 46 50 52 35        1152 	.ascii "FPR5"
   0031 00                 1153 	.db 0x00
                    0032   1154 Ffruit$_str_10$0$0 == .
   0032                    1155 __str_10:
   0032 46 50 52 36        1156 	.ascii "FPR6"
   0036 00                 1157 	.db 0x00
                           1158 	.area XINIT   (CODE)
                           1159 	.area CABS    (ABS,CODE)

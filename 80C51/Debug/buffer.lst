                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.0 #6037 (Oct 31 2010) (MINGW32)
                              4 ; This file was generated Mon Jan 23 21:01:51 2017
                              5 ;--------------------------------------------------------
                              6 	.module buffer
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _testBuffer
                             13 	.globl _testBufferLotsOfChar
                             14 	.globl _testBufferLimit
                             15 	.globl _testBufferClear
                             16 	.globl _testBufferOneAndThreeChar
                             17 	.globl _BUFFER_clear
                             18 	.globl _BUFFER_out
                             19 	.globl _BUFFER_in
                             20 	.globl _out
                             21 	.globl _in
                             22 	.globl _buffer
                             23 ;--------------------------------------------------------
                             24 ; special function registers
                             25 ;--------------------------------------------------------
                             26 	.area RSEG    (ABS,DATA)
   0000                      27 	.org 0x0000
                             28 ;--------------------------------------------------------
                             29 ; special function bits
                             30 ;--------------------------------------------------------
                             31 	.area RSEG    (ABS,DATA)
   0000                      32 	.org 0x0000
                             33 ;--------------------------------------------------------
                             34 ; overlayable register banks
                             35 ;--------------------------------------------------------
                             36 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      37 	.ds 8
                             38 ;--------------------------------------------------------
                             39 ; internal ram data
                             40 ;--------------------------------------------------------
                             41 	.area DSEG    (DATA)
                             42 ;--------------------------------------------------------
                             43 ; overlayable items in internal ram 
                             44 ;--------------------------------------------------------
                             45 	.area OSEG    (OVR,DATA)
                             46 ;--------------------------------------------------------
                             47 ; indirectly addressable internal ram data
                             48 ;--------------------------------------------------------
                             49 	.area ISEG    (DATA)
                             50 ;--------------------------------------------------------
                             51 ; absolute internal ram data
                             52 ;--------------------------------------------------------
                             53 	.area IABS    (ABS,DATA)
                             54 	.area IABS    (ABS,DATA)
                             55 ;--------------------------------------------------------
                             56 ; bit data
                             57 ;--------------------------------------------------------
                             58 	.area BSEG    (BIT)
                             59 ;--------------------------------------------------------
                             60 ; paged external ram data
                             61 ;--------------------------------------------------------
                             62 	.area PSEG    (PAG,XDATA)
                             63 ;--------------------------------------------------------
                             64 ; external ram data
                             65 ;--------------------------------------------------------
                             66 	.area XSEG    (XDATA)
                    0000     67 G$buffer$0$0==.
   0000                      68 _buffer::
   0000                      69 	.ds 250
                    00FA     70 LBUFFER_in$c$1$1==.
   00FA                      71 _BUFFER_in_c_1_1:
   00FA                      72 	.ds 1
                    00FB     73 LBUFFER_out$c$1$1==.
   00FB                      74 _BUFFER_out_c_1_1:
   00FB                      75 	.ds 1
                    00FC     76 LtestBufferLimit$n$1$1==.
   00FC                      77 _testBufferLimit_n_1_1:
   00FC                      78 	.ds 2
                    00FE     79 LtestBufferLotsOfChar$n$1$1==.
   00FE                      80 _testBufferLotsOfChar_n_1_1:
   00FE                      81 	.ds 2
                             82 ;--------------------------------------------------------
                             83 ; absolute external ram data
                             84 ;--------------------------------------------------------
                             85 	.area XABS    (ABS,XDATA)
                             86 ;--------------------------------------------------------
                             87 ; external initialized ram data
                             88 ;--------------------------------------------------------
                             89 	.area XISEG   (XDATA)
                    0000     90 G$in$0$0==.
   0000                      91 _in::
   0000                      92 	.ds 1
                    0001     93 G$out$0$0==.
   0001                      94 _out::
   0001                      95 	.ds 1
                             96 	.area HOME    (CODE)
                             97 	.area GSINIT0 (CODE)
                             98 	.area GSINIT1 (CODE)
                             99 	.area GSINIT2 (CODE)
                            100 	.area GSINIT3 (CODE)
                            101 	.area GSINIT4 (CODE)
                            102 	.area GSINIT5 (CODE)
                            103 	.area GSINIT  (CODE)
                            104 	.area GSFINAL (CODE)
                            105 	.area CSEG    (CODE)
                            106 ;--------------------------------------------------------
                            107 ; global & static initialisations
                            108 ;--------------------------------------------------------
                            109 	.area HOME    (CODE)
                            110 	.area GSINIT  (CODE)
                            111 	.area GSFINAL (CODE)
                            112 	.area GSINIT  (CODE)
                            113 ;--------------------------------------------------------
                            114 ; Home
                            115 ;--------------------------------------------------------
                            116 	.area HOME    (CODE)
                            117 	.area HOME    (CODE)
                            118 ;--------------------------------------------------------
                            119 ; code
                            120 ;--------------------------------------------------------
                            121 	.area CSEG    (CODE)
                            122 ;------------------------------------------------------------
                            123 ;Allocation info for local variables in function 'BUFFER_in'
                            124 ;------------------------------------------------------------
                            125 ;c                         Allocated with name '_BUFFER_in_c_1_1'
                            126 ;------------------------------------------------------------
                    0000    127 	G$BUFFER_in$0$0 ==.
                    0000    128 	C$buffer.c$22$0$0 ==.
                            129 ;	../buffer.c:22: void BUFFER_in(char c) {
                            130 ;	-----------------------------------------
                            131 ;	 function BUFFER_in
                            132 ;	-----------------------------------------
   0000                     133 _BUFFER_in:
                    0002    134 	ar2 = 0x02
                    0003    135 	ar3 = 0x03
                    0004    136 	ar4 = 0x04
                    0005    137 	ar5 = 0x05
                    0006    138 	ar6 = 0x06
                    0007    139 	ar7 = 0x07
                    0000    140 	ar0 = 0x00
                    0001    141 	ar1 = 0x01
   0000 E5 82               142 	mov	a,dpl
   0002 90s00rFA            143 	mov	dptr,#_BUFFER_in_c_1_1
   0005 F0                  144 	movx	@dptr,a
                    0006    145 	C$buffer.c$23$1$1 ==.
                            146 ;	../buffer.c:23: buffer[in] = c;
   0006 90s00r00            147 	mov	dptr,#_in
   0009 E0                  148 	movx	a,@dptr
   000A FA                  149 	mov	r2,a
   000B 24r00               150 	add	a,#_buffer
   000D FB                  151 	mov	r3,a
   000E E4                  152 	clr	a
   000F 34s00               153 	addc	a,#(_buffer >> 8)
   0011 FC                  154 	mov	r4,a
   0012 90s00rFA            155 	mov	dptr,#_BUFFER_in_c_1_1
   0015 E0                  156 	movx	a,@dptr
   0016 8B 82               157 	mov	dpl,r3
   0018 8C 83               158 	mov	dph,r4
   001A F0                  159 	movx	@dptr,a
                    001B    160 	C$buffer.c$24$1$1 ==.
                            161 ;	../buffer.c:24: in ++;
   001B 90s00r00            162 	mov	dptr,#_in
   001E EA                  163 	mov	a,r2
   001F 04                  164 	inc	a
   0020 F0                  165 	movx	@dptr,a
                    0021    166 	C$buffer.c$25$1$1 ==.
                    0021    167 	XG$BUFFER_in$0$0 ==.
   0021 22                  168 	ret
                            169 ;------------------------------------------------------------
                            170 ;Allocation info for local variables in function 'BUFFER_out'
                            171 ;------------------------------------------------------------
                            172 ;c                         Allocated with name '_BUFFER_out_c_1_1'
                            173 ;------------------------------------------------------------
                    0022    174 	G$BUFFER_out$0$0 ==.
                    0022    175 	C$buffer.c$31$1$1 ==.
                            176 ;	../buffer.c:31: char BUFFER_out() {
                            177 ;	-----------------------------------------
                            178 ;	 function BUFFER_out
                            179 ;	-----------------------------------------
   0022                     180 _BUFFER_out:
                    0022    181 	C$buffer.c$32$1$1 ==.
                            182 ;	../buffer.c:32: char c = buffer[out];
   0022 90s00r01            183 	mov	dptr,#_out
   0025 E0                  184 	movx	a,@dptr
   0026 FA                  185 	mov	r2,a
   0027 24r00               186 	add	a,#_buffer
   0029 F5 82               187 	mov	dpl,a
   002B E4                  188 	clr	a
   002C 34s00               189 	addc	a,#(_buffer >> 8)
   002E F5 83               190 	mov	dph,a
   0030 E0                  191 	movx	a,@dptr
   0031 90s00rFB            192 	mov	dptr,#_BUFFER_out_c_1_1
   0034 F0                  193 	movx	@dptr,a
                    0035    194 	C$buffer.c$33$1$1 ==.
                            195 ;	../buffer.c:33: out ++;
   0035 90s00r01            196 	mov	dptr,#_out
   0038 EA                  197 	mov	a,r2
   0039 04                  198 	inc	a
   003A F0                  199 	movx	@dptr,a
                    003B    200 	C$buffer.c$34$1$1 ==.
                            201 ;	../buffer.c:34: return c;
   003B 90s00rFB            202 	mov	dptr,#_BUFFER_out_c_1_1
   003E E0                  203 	movx	a,@dptr
                    003F    204 	C$buffer.c$35$1$1 ==.
                    003F    205 	XG$BUFFER_out$0$0 ==.
   003F F5 82               206 	mov	dpl,a
   0041 22                  207 	ret
                            208 ;------------------------------------------------------------
                            209 ;Allocation info for local variables in function 'BUFFER_clear'
                            210 ;------------------------------------------------------------
                            211 ;------------------------------------------------------------
                    0042    212 	G$BUFFER_clear$0$0 ==.
                    0042    213 	C$buffer.c$40$1$1 ==.
                            214 ;	../buffer.c:40: void BUFFER_clear() {
                            215 ;	-----------------------------------------
                            216 ;	 function BUFFER_clear
                            217 ;	-----------------------------------------
   0042                     218 _BUFFER_clear:
                    0042    219 	C$buffer.c$41$1$1 ==.
                            220 ;	../buffer.c:41: in = 0;
   0042 90s00r00            221 	mov	dptr,#_in
                    0045    222 	C$buffer.c$42$1$1 ==.
                            223 ;	../buffer.c:42: out = 0;
   0045 E4                  224 	clr	a
   0046 F0                  225 	movx	@dptr,a
   0047 90s00r01            226 	mov	dptr,#_out
   004A F0                  227 	movx	@dptr,a
                    004B    228 	C$buffer.c$43$1$1 ==.
                    004B    229 	XG$BUFFER_clear$0$0 ==.
   004B 22                  230 	ret
                            231 ;------------------------------------------------------------
                            232 ;Allocation info for local variables in function 'testBufferOneAndThreeChar'
                            233 ;------------------------------------------------------------
                            234 ;testsInError              Allocated with name '_testBufferOneAndThreeChar_testsInError_1_1'
                            235 ;------------------------------------------------------------
                    004C    236 	G$testBufferOneAndThreeChar$0$0 ==.
                    004C    237 	C$buffer.c$47$1$1 ==.
                            238 ;	../buffer.c:47: int testBufferOneAndThreeChar() {
                            239 ;	-----------------------------------------
                            240 ;	 function testBufferOneAndThreeChar
                            241 ;	-----------------------------------------
   004C                     242 _testBufferOneAndThreeChar:
                    004C    243 	C$buffer.c$50$1$1 ==.
                            244 ;	../buffer.c:50: BUFFER_in(1);
   004C 75 82 01            245 	mov	dpl,#0x01
   004F 12s00r00            246 	lcall	_BUFFER_in
                    0052    247 	C$buffer.c$51$1$1 ==.
                            248 ;	../buffer.c:51: testsInError += assertEquals(BUFFER_out(), 1, "BF_01");
   0052 12s00r22            249 	lcall	_BUFFER_out
   0055 E5 82               250 	mov	a,dpl
   0057 FA                  251 	mov	r2,a
   0058 33                  252 	rlc	a
   0059 95 E0               253 	subb	a,acc
   005B FB                  254 	mov	r3,a
   005C 90s00r00            255 	mov	dptr,#_assertEquals_PARM_2
   005F 74 01               256 	mov	a,#0x01
   0061 F0                  257 	movx	@dptr,a
   0062 A3                  258 	inc	dptr
   0063 E4                  259 	clr	a
   0064 F0                  260 	movx	@dptr,a
   0065 90s00r00            261 	mov	dptr,#_assertEquals_PARM_3
   0068 74r00               262 	mov	a,#__str_0
   006A F0                  263 	movx	@dptr,a
   006B A3                  264 	inc	dptr
   006C 74s00               265 	mov	a,#(__str_0 >> 8)
   006E F0                  266 	movx	@dptr,a
   006F A3                  267 	inc	dptr
   0070 74 80               268 	mov	a,#0x80
   0072 F0                  269 	movx	@dptr,a
   0073 8A 82               270 	mov	dpl,r2
   0075 8B 83               271 	mov	dph,r3
   0077 12s00r00            272 	lcall	_assertEquals
   007A AA 82               273 	mov	r2,dpl
   007C AB 83               274 	mov	r3,dph
                    007E    275 	C$buffer.c$53$1$1 ==.
                            276 ;	../buffer.c:53: BUFFER_in(20);
   007E 75 82 14            277 	mov	dpl,#0x14
   0081 C0 02               278 	push	ar2
   0083 C0 03               279 	push	ar3
   0085 12s00r00            280 	lcall	_BUFFER_in
                    0088    281 	C$buffer.c$54$1$1 ==.
                            282 ;	../buffer.c:54: BUFFER_in(30);
   0088 75 82 1E            283 	mov	dpl,#0x1E
   008B 12s00r00            284 	lcall	_BUFFER_in
                    008E    285 	C$buffer.c$55$1$1 ==.
                            286 ;	../buffer.c:55: BUFFER_in(40);
   008E 75 82 28            287 	mov	dpl,#0x28
   0091 12s00r00            288 	lcall	_BUFFER_in
                    0094    289 	C$buffer.c$57$1$1 ==.
                            290 ;	../buffer.c:57: testsInError += assertEquals(BUFFER_out(), 20, "BF_02");
   0094 12s00r22            291 	lcall	_BUFFER_out
   0097 E5 82               292 	mov	a,dpl
   0099 FC                  293 	mov	r4,a
   009A 33                  294 	rlc	a
   009B 95 E0               295 	subb	a,acc
   009D FD                  296 	mov	r5,a
   009E 90s00r00            297 	mov	dptr,#_assertEquals_PARM_2
   00A1 74 14               298 	mov	a,#0x14
   00A3 F0                  299 	movx	@dptr,a
   00A4 A3                  300 	inc	dptr
   00A5 E4                  301 	clr	a
   00A6 F0                  302 	movx	@dptr,a
   00A7 90s00r00            303 	mov	dptr,#_assertEquals_PARM_3
   00AA 74r06               304 	mov	a,#__str_1
   00AC F0                  305 	movx	@dptr,a
   00AD A3                  306 	inc	dptr
   00AE 74s00               307 	mov	a,#(__str_1 >> 8)
   00B0 F0                  308 	movx	@dptr,a
   00B1 A3                  309 	inc	dptr
   00B2 74 80               310 	mov	a,#0x80
   00B4 F0                  311 	movx	@dptr,a
   00B5 8C 82               312 	mov	dpl,r4
   00B7 8D 83               313 	mov	dph,r5
   00B9 12s00r00            314 	lcall	_assertEquals
   00BC AC 82               315 	mov	r4,dpl
   00BE AD 83               316 	mov	r5,dph
   00C0 D0 03               317 	pop	ar3
   00C2 D0 02               318 	pop	ar2
   00C4 EC                  319 	mov	a,r4
   00C5 2A                  320 	add	a,r2
   00C6 FA                  321 	mov	r2,a
   00C7 ED                  322 	mov	a,r5
   00C8 3B                  323 	addc	a,r3
   00C9 FB                  324 	mov	r3,a
                    00CA    325 	C$buffer.c$58$1$1 ==.
                            326 ;	../buffer.c:58: testsInError += assertEquals(BUFFER_out(), 30, "BF_03");
   00CA C0 02               327 	push	ar2
   00CC C0 03               328 	push	ar3
   00CE 12s00r22            329 	lcall	_BUFFER_out
   00D1 E5 82               330 	mov	a,dpl
   00D3 FC                  331 	mov	r4,a
   00D4 33                  332 	rlc	a
   00D5 95 E0               333 	subb	a,acc
   00D7 FD                  334 	mov	r5,a
   00D8 90s00r00            335 	mov	dptr,#_assertEquals_PARM_2
   00DB 74 1E               336 	mov	a,#0x1E
   00DD F0                  337 	movx	@dptr,a
   00DE A3                  338 	inc	dptr
   00DF E4                  339 	clr	a
   00E0 F0                  340 	movx	@dptr,a
   00E1 90s00r00            341 	mov	dptr,#_assertEquals_PARM_3
   00E4 74r0C               342 	mov	a,#__str_2
   00E6 F0                  343 	movx	@dptr,a
   00E7 A3                  344 	inc	dptr
   00E8 74s00               345 	mov	a,#(__str_2 >> 8)
   00EA F0                  346 	movx	@dptr,a
   00EB A3                  347 	inc	dptr
   00EC 74 80               348 	mov	a,#0x80
   00EE F0                  349 	movx	@dptr,a
   00EF 8C 82               350 	mov	dpl,r4
   00F1 8D 83               351 	mov	dph,r5
   00F3 12s00r00            352 	lcall	_assertEquals
   00F6 AC 82               353 	mov	r4,dpl
   00F8 AD 83               354 	mov	r5,dph
   00FA D0 03               355 	pop	ar3
   00FC D0 02               356 	pop	ar2
   00FE EC                  357 	mov	a,r4
   00FF 2A                  358 	add	a,r2
   0100 FA                  359 	mov	r2,a
   0101 ED                  360 	mov	a,r5
   0102 3B                  361 	addc	a,r3
   0103 FB                  362 	mov	r3,a
                    0104    363 	C$buffer.c$59$1$1 ==.
                            364 ;	../buffer.c:59: testsInError += assertEquals(BUFFER_out(), 40, "BF_03");
   0104 C0 02               365 	push	ar2
   0106 C0 03               366 	push	ar3
   0108 12s00r22            367 	lcall	_BUFFER_out
   010B E5 82               368 	mov	a,dpl
   010D FC                  369 	mov	r4,a
   010E 33                  370 	rlc	a
   010F 95 E0               371 	subb	a,acc
   0111 FD                  372 	mov	r5,a
   0112 90s00r00            373 	mov	dptr,#_assertEquals_PARM_2
   0115 74 28               374 	mov	a,#0x28
   0117 F0                  375 	movx	@dptr,a
   0118 A3                  376 	inc	dptr
   0119 E4                  377 	clr	a
   011A F0                  378 	movx	@dptr,a
   011B 90s00r00            379 	mov	dptr,#_assertEquals_PARM_3
   011E 74r0C               380 	mov	a,#__str_2
   0120 F0                  381 	movx	@dptr,a
   0121 A3                  382 	inc	dptr
   0122 74s00               383 	mov	a,#(__str_2 >> 8)
   0124 F0                  384 	movx	@dptr,a
   0125 A3                  385 	inc	dptr
   0126 74 80               386 	mov	a,#0x80
   0128 F0                  387 	movx	@dptr,a
   0129 8C 82               388 	mov	dpl,r4
   012B 8D 83               389 	mov	dph,r5
   012D 12s00r00            390 	lcall	_assertEquals
   0130 AC 82               391 	mov	r4,dpl
   0132 AD 83               392 	mov	r5,dph
   0134 D0 03               393 	pop	ar3
   0136 D0 02               394 	pop	ar2
   0138 EC                  395 	mov	a,r4
   0139 2A                  396 	add	a,r2
   013A FA                  397 	mov	r2,a
   013B ED                  398 	mov	a,r5
   013C 3B                  399 	addc	a,r3
                    013D    400 	C$buffer.c$61$1$1 ==.
                            401 ;	../buffer.c:61: return testsInError;
                    013D    402 	C$buffer.c$62$1$1 ==.
                    013D    403 	XG$testBufferOneAndThreeChar$0$0 ==.
   013D 8A 82               404 	mov	dpl,r2
   013F F5 83               405 	mov	dph,a
   0141 22                  406 	ret
                            407 ;------------------------------------------------------------
                            408 ;Allocation info for local variables in function 'testBufferClear'
                            409 ;------------------------------------------------------------
                            410 ;testsInError              Allocated with name '_testBufferClear_testsInError_1_1'
                            411 ;------------------------------------------------------------
                    0142    412 	G$testBufferClear$0$0 ==.
                    0142    413 	C$buffer.c$64$1$1 ==.
                            414 ;	../buffer.c:64: int testBufferClear() {
                            415 ;	-----------------------------------------
                            416 ;	 function testBufferClear
                            417 ;	-----------------------------------------
   0142                     418 _testBufferClear:
                    0142    419 	C$buffer.c$67$1$1 ==.
                            420 ;	../buffer.c:67: BUFFER_in(14);
   0142 75 82 0E            421 	mov	dpl,#0x0E
   0145 12s00r00            422 	lcall	_BUFFER_in
                    0148    423 	C$buffer.c$68$1$1 ==.
                            424 ;	../buffer.c:68: BUFFER_in(15);
   0148 75 82 0F            425 	mov	dpl,#0x0F
   014B 12s00r00            426 	lcall	_BUFFER_in
                    014E    427 	C$buffer.c$69$1$1 ==.
                            428 ;	../buffer.c:69: BUFFER_clear();
   014E 12s00r42            429 	lcall	_BUFFER_clear
                    0151    430 	C$buffer.c$70$1$1 ==.
                            431 ;	../buffer.c:70: BUFFER_in(16);
   0151 75 82 10            432 	mov	dpl,#0x10
   0154 12s00r00            433 	lcall	_BUFFER_in
                    0157    434 	C$buffer.c$71$1$1 ==.
                            435 ;	../buffer.c:71: testsInError += assertEquals(BUFFER_out(), 16, "BFC_01");
   0157 12s00r22            436 	lcall	_BUFFER_out
   015A E5 82               437 	mov	a,dpl
   015C FA                  438 	mov	r2,a
   015D 33                  439 	rlc	a
   015E 95 E0               440 	subb	a,acc
   0160 FB                  441 	mov	r3,a
   0161 90s00r00            442 	mov	dptr,#_assertEquals_PARM_2
   0164 74 10               443 	mov	a,#0x10
   0166 F0                  444 	movx	@dptr,a
   0167 A3                  445 	inc	dptr
   0168 E4                  446 	clr	a
   0169 F0                  447 	movx	@dptr,a
   016A 90s00r00            448 	mov	dptr,#_assertEquals_PARM_3
   016D 74r12               449 	mov	a,#__str_3
   016F F0                  450 	movx	@dptr,a
   0170 A3                  451 	inc	dptr
   0171 74s00               452 	mov	a,#(__str_3 >> 8)
   0173 F0                  453 	movx	@dptr,a
   0174 A3                  454 	inc	dptr
   0175 74 80               455 	mov	a,#0x80
   0177 F0                  456 	movx	@dptr,a
   0178 8A 82               457 	mov	dpl,r2
   017A 8B 83               458 	mov	dph,r3
                    017C    459 	C$buffer.c$73$1$1 ==.
                            460 ;	../buffer.c:73: return testsInError;
                    017C    461 	C$buffer.c$74$1$1 ==.
                    017C    462 	XG$testBufferClear$0$0 ==.
   017C 02s00r00            463 	ljmp	_assertEquals
                            464 ;------------------------------------------------------------
                            465 ;Allocation info for local variables in function 'testBufferLimit'
                            466 ;------------------------------------------------------------
                            467 ;n                         Allocated with name '_testBufferLimit_n_1_1'
                            468 ;------------------------------------------------------------
                    017F    469 	G$testBufferLimit$0$0 ==.
                    017F    470 	C$buffer.c$76$1$1 ==.
                            471 ;	../buffer.c:76: int testBufferLimit() {
                            472 ;	-----------------------------------------
                            473 ;	 function testBufferLimit
                            474 ;	-----------------------------------------
   017F                     475 _testBufferLimit:
                    017F    476 	C$buffer.c$79$1$1 ==.
                            477 ;	../buffer.c:79: BUFFER_clear();
   017F 12s00r42            478 	lcall	_BUFFER_clear
                    0182    479 	C$buffer.c$81$1$1 ==.
                            480 ;	../buffer.c:81: for (n = 0; n < BUFFER_SIZE; n++) {
   0182 90s00rFC            481 	mov	dptr,#_testBufferLimit_n_1_1
   0185 E4                  482 	clr	a
   0186 F0                  483 	movx	@dptr,a
   0187 A3                  484 	inc	dptr
   0188 F0                  485 	movx	@dptr,a
   0189                     486 00103$:
   0189 90s00rFC            487 	mov	dptr,#_testBufferLimit_n_1_1
   018C E0                  488 	movx	a,@dptr
   018D FA                  489 	mov	r2,a
   018E A3                  490 	inc	dptr
   018F E0                  491 	movx	a,@dptr
   0190 FB                  492 	mov	r3,a
   0191 C3                  493 	clr	c
   0192 EA                  494 	mov	a,r2
   0193 94 FA               495 	subb	a,#0xFA
   0195 EB                  496 	mov	a,r3
   0196 64 80               497 	xrl	a,#0x80
   0198 94 80               498 	subb	a,#0x80
   019A 50 28               499 	jnc	00106$
                    019C    500 	C$buffer.c$82$1$1 ==.
                            501 ;	../buffer.c:82: BUFFER_in(n % 20);
   019C 90s00r00            502 	mov	dptr,#__modsint_PARM_2
   019F 74 14               503 	mov	a,#0x14
   01A1 F0                  504 	movx	@dptr,a
   01A2 A3                  505 	inc	dptr
   01A3 E4                  506 	clr	a
   01A4 F0                  507 	movx	@dptr,a
   01A5 8A 82               508 	mov	dpl,r2
   01A7 8B 83               509 	mov	dph,r3
   01A9 C0 02               510 	push	ar2
   01AB C0 03               511 	push	ar3
   01AD 12s00r00            512 	lcall	__modsint
   01B0 12s00r00            513 	lcall	_BUFFER_in
   01B3 D0 03               514 	pop	ar3
   01B5 D0 02               515 	pop	ar2
                    01B7    516 	C$buffer.c$81$1$1 ==.
                            517 ;	../buffer.c:81: for (n = 0; n < BUFFER_SIZE; n++) {
   01B7 90s00rFC            518 	mov	dptr,#_testBufferLimit_n_1_1
   01BA 74 01               519 	mov	a,#0x01
   01BC 2A                  520 	add	a,r2
   01BD F0                  521 	movx	@dptr,a
   01BE E4                  522 	clr	a
   01BF 3B                  523 	addc	a,r3
   01C0 A3                  524 	inc	dptr
   01C1 F0                  525 	movx	@dptr,a
   01C2 80 C5               526 	sjmp	00103$
   01C4                     527 00106$:
                    01C4    528 	C$buffer.c$85$1$1 ==.
                            529 ;	../buffer.c:85: for (n = 0; n < BUFFER_SIZE; n++) {
   01C4 90s00rFC            530 	mov	dptr,#_testBufferLimit_n_1_1
   01C7 E4                  531 	clr	a
   01C8 F0                  532 	movx	@dptr,a
   01C9 A3                  533 	inc	dptr
   01CA F0                  534 	movx	@dptr,a
   01CB                     535 00107$:
   01CB 90s00rFC            536 	mov	dptr,#_testBufferLimit_n_1_1
   01CE E0                  537 	movx	a,@dptr
   01CF FA                  538 	mov	r2,a
   01D0 A3                  539 	inc	dptr
   01D1 E0                  540 	movx	a,@dptr
   01D2 FB                  541 	mov	r3,a
   01D3 C3                  542 	clr	c
   01D4 EA                  543 	mov	a,r2
   01D5 94 FA               544 	subb	a,#0xFA
   01D7 EB                  545 	mov	a,r3
   01D8 64 80               546 	xrl	a,#0x80
   01DA 94 80               547 	subb	a,#0x80
   01DC 50 6E               548 	jnc	00110$
                    01DE    549 	C$buffer.c$86$2$3 ==.
                            550 ;	../buffer.c:86: if (assertEquals(BUFFER_out(), n % 20, "BFL_01")) {
   01DE C0 02               551 	push	ar2
   01E0 C0 03               552 	push	ar3
   01E2 12s00r22            553 	lcall	_BUFFER_out
   01E5 AC 82               554 	mov	r4,dpl
   01E7 D0 03               555 	pop	ar3
   01E9 D0 02               556 	pop	ar2
   01EB EC                  557 	mov	a,r4
   01EC 33                  558 	rlc	a
   01ED 95 E0               559 	subb	a,acc
   01EF FD                  560 	mov	r5,a
   01F0 90s00r00            561 	mov	dptr,#__modsint_PARM_2
   01F3 74 14               562 	mov	a,#0x14
   01F5 F0                  563 	movx	@dptr,a
   01F6 A3                  564 	inc	dptr
   01F7 E4                  565 	clr	a
   01F8 F0                  566 	movx	@dptr,a
   01F9 8A 82               567 	mov	dpl,r2
   01FB 8B 83               568 	mov	dph,r3
   01FD C0 02               569 	push	ar2
   01FF C0 03               570 	push	ar3
   0201 C0 04               571 	push	ar4
   0203 C0 05               572 	push	ar5
   0205 12s00r00            573 	lcall	__modsint
   0208 AE 82               574 	mov	r6,dpl
   020A AF 83               575 	mov	r7,dph
   020C D0 05               576 	pop	ar5
   020E D0 04               577 	pop	ar4
   0210 90s00r00            578 	mov	dptr,#_assertEquals_PARM_2
   0213 EE                  579 	mov	a,r6
   0214 F0                  580 	movx	@dptr,a
   0215 A3                  581 	inc	dptr
   0216 EF                  582 	mov	a,r7
   0217 F0                  583 	movx	@dptr,a
   0218 90s00r00            584 	mov	dptr,#_assertEquals_PARM_3
   021B 74r19               585 	mov	a,#__str_4
   021D F0                  586 	movx	@dptr,a
   021E A3                  587 	inc	dptr
   021F 74s00               588 	mov	a,#(__str_4 >> 8)
   0221 F0                  589 	movx	@dptr,a
   0222 A3                  590 	inc	dptr
   0223 74 80               591 	mov	a,#0x80
   0225 F0                  592 	movx	@dptr,a
   0226 8C 82               593 	mov	dpl,r4
   0228 8D 83               594 	mov	dph,r5
   022A 12s00r00            595 	lcall	_assertEquals
   022D E5 82               596 	mov	a,dpl
   022F 85 83 F0            597 	mov	b,dph
   0232 D0 03               598 	pop	ar3
   0234 D0 02               599 	pop	ar2
   0236 45 F0               600 	orl	a,b
   0238 60 04               601 	jz	00109$
                    023A    602 	C$buffer.c$87$3$4 ==.
                            603 ;	../buffer.c:87: return 1;
   023A 90 00 01            604 	mov	dptr,#0x0001
   023D 22                  605 	ret
   023E                     606 00109$:
                    023E    607 	C$buffer.c$85$1$1 ==.
                            608 ;	../buffer.c:85: for (n = 0; n < BUFFER_SIZE; n++) {
   023E 90s00rFC            609 	mov	dptr,#_testBufferLimit_n_1_1
   0241 74 01               610 	mov	a,#0x01
   0243 2A                  611 	add	a,r2
   0244 F0                  612 	movx	@dptr,a
   0245 E4                  613 	clr	a
   0246 3B                  614 	addc	a,r3
   0247 A3                  615 	inc	dptr
   0248 F0                  616 	movx	@dptr,a
   0249 02s01rCB            617 	ljmp	00107$
   024C                     618 00110$:
                    024C    619 	C$buffer.c$91$1$1 ==.
                            620 ;	../buffer.c:91: return 0;
   024C 90 00 00            621 	mov	dptr,#0x0000
                    024F    622 	C$buffer.c$92$1$1 ==.
                    024F    623 	XG$testBufferLimit$0$0 ==.
   024F 22                  624 	ret
                            625 ;------------------------------------------------------------
                            626 ;Allocation info for local variables in function 'testBufferLotsOfChar'
                            627 ;------------------------------------------------------------
                            628 ;n                         Allocated with name '_testBufferLotsOfChar_n_1_1'
                            629 ;------------------------------------------------------------
                    0250    630 	G$testBufferLotsOfChar$0$0 ==.
                    0250    631 	C$buffer.c$94$1$1 ==.
                            632 ;	../buffer.c:94: int testBufferLotsOfChar() {
                            633 ;	-----------------------------------------
                            634 ;	 function testBufferLotsOfChar
                            635 ;	-----------------------------------------
   0250                     636 _testBufferLotsOfChar:
                    0250    637 	C$buffer.c$97$1$1 ==.
                            638 ;	../buffer.c:97: for (n = BUFFER_SIZE / 2; n < BUFFER_SIZE * 2; n++) {
   0250 90s00rFE            639 	mov	dptr,#_testBufferLotsOfChar_n_1_1
   0253 74 7D               640 	mov	a,#0x7D
   0255 F0                  641 	movx	@dptr,a
   0256 A3                  642 	inc	dptr
   0257 E4                  643 	clr	a
   0258 F0                  644 	movx	@dptr,a
   0259                     645 00103$:
   0259 90s00rFE            646 	mov	dptr,#_testBufferLotsOfChar_n_1_1
   025C E0                  647 	movx	a,@dptr
   025D FA                  648 	mov	r2,a
   025E A3                  649 	inc	dptr
   025F E0                  650 	movx	a,@dptr
   0260 FB                  651 	mov	r3,a
   0261 C3                  652 	clr	c
   0262 EA                  653 	mov	a,r2
   0263 94 F4               654 	subb	a,#0xF4
   0265 EB                  655 	mov	a,r3
   0266 64 80               656 	xrl	a,#0x80
   0268 94 81               657 	subb	a,#0x81
   026A 50 6D               658 	jnc	00106$
                    026C    659 	C$buffer.c$98$1$1 ==.
                            660 ;	../buffer.c:98: BUFFER_in(n % 20);
   026C 90s00r00            661 	mov	dptr,#__modsint_PARM_2
   026F 74 14               662 	mov	a,#0x14
   0271 F0                  663 	movx	@dptr,a
   0272 A3                  664 	inc	dptr
   0273 E4                  665 	clr	a
   0274 F0                  666 	movx	@dptr,a
   0275 8A 82               667 	mov	dpl,r2
   0277 8B 83               668 	mov	dph,r3
   0279 C0 02               669 	push	ar2
   027B C0 03               670 	push	ar3
   027D 12s00r00            671 	lcall	__modsint
   0280 AC 82               672 	mov	r4,dpl
   0282 AD 83               673 	mov	r5,dph
   0284 8C 06               674 	mov	ar6,r4
   0286 8E 82               675 	mov	dpl,r6
   0288 C0 04               676 	push	ar4
   028A C0 05               677 	push	ar5
   028C 12s00r00            678 	lcall	_BUFFER_in
                    028F    679 	C$buffer.c$99$2$2 ==.
                            680 ;	../buffer.c:99: if (assertEquals(BUFFER_out(), n % 20, "BFL_02")) {
   028F 12s00r22            681 	lcall	_BUFFER_out
   0292 AE 82               682 	mov	r6,dpl
   0294 D0 05               683 	pop	ar5
   0296 D0 04               684 	pop	ar4
   0298 EE                  685 	mov	a,r6
   0299 33                  686 	rlc	a
   029A 95 E0               687 	subb	a,acc
   029C FF                  688 	mov	r7,a
   029D 90s00r00            689 	mov	dptr,#_assertEquals_PARM_2
   02A0 EC                  690 	mov	a,r4
   02A1 F0                  691 	movx	@dptr,a
   02A2 A3                  692 	inc	dptr
   02A3 ED                  693 	mov	a,r5
   02A4 F0                  694 	movx	@dptr,a
   02A5 90s00r00            695 	mov	dptr,#_assertEquals_PARM_3
   02A8 74r20               696 	mov	a,#__str_5
   02AA F0                  697 	movx	@dptr,a
   02AB A3                  698 	inc	dptr
   02AC 74s00               699 	mov	a,#(__str_5 >> 8)
   02AE F0                  700 	movx	@dptr,a
   02AF A3                  701 	inc	dptr
   02B0 74 80               702 	mov	a,#0x80
   02B2 F0                  703 	movx	@dptr,a
   02B3 8E 82               704 	mov	dpl,r6
   02B5 8F 83               705 	mov	dph,r7
   02B7 12s00r00            706 	lcall	_assertEquals
   02BA E5 82               707 	mov	a,dpl
   02BC 85 83 F0            708 	mov	b,dph
   02BF D0 03               709 	pop	ar3
   02C1 D0 02               710 	pop	ar2
   02C3 45 F0               711 	orl	a,b
   02C5 60 04               712 	jz	00105$
                    02C7    713 	C$buffer.c$100$3$3 ==.
                            714 ;	../buffer.c:100: return 1;
   02C7 90 00 01            715 	mov	dptr,#0x0001
   02CA 22                  716 	ret
   02CB                     717 00105$:
                    02CB    718 	C$buffer.c$97$1$1 ==.
                            719 ;	../buffer.c:97: for (n = BUFFER_SIZE / 2; n < BUFFER_SIZE * 2; n++) {
   02CB 90s00rFE            720 	mov	dptr,#_testBufferLotsOfChar_n_1_1
   02CE 74 01               721 	mov	a,#0x01
   02D0 2A                  722 	add	a,r2
   02D1 F0                  723 	movx	@dptr,a
   02D2 E4                  724 	clr	a
   02D3 3B                  725 	addc	a,r3
   02D4 A3                  726 	inc	dptr
   02D5 F0                  727 	movx	@dptr,a
   02D6 02s02r59            728 	ljmp	00103$
   02D9                     729 00106$:
                    02D9    730 	C$buffer.c$104$1$1 ==.
                            731 ;	../buffer.c:104: return 0;
   02D9 90 00 00            732 	mov	dptr,#0x0000
                    02DC    733 	C$buffer.c$105$1$1 ==.
                    02DC    734 	XG$testBufferLotsOfChar$0$0 ==.
   02DC 22                  735 	ret
                            736 ;------------------------------------------------------------
                            737 ;Allocation info for local variables in function 'testBuffer'
                            738 ;------------------------------------------------------------
                            739 ;testsInError              Allocated with name '_testBuffer_testsInError_1_1'
                            740 ;------------------------------------------------------------
                    02DD    741 	G$testBuffer$0$0 ==.
                    02DD    742 	C$buffer.c$107$1$1 ==.
                            743 ;	../buffer.c:107: int testBuffer() {
                            744 ;	-----------------------------------------
                            745 ;	 function testBuffer
                            746 ;	-----------------------------------------
   02DD                     747 _testBuffer:
                    02DD    748 	C$buffer.c$110$1$1 ==.
                            749 ;	../buffer.c:110: testsInError += testBufferOneAndThreeChar();
   02DD 12s00r4C            750 	lcall	_testBufferOneAndThreeChar
   02E0 AA 82               751 	mov	r2,dpl
   02E2 AB 83               752 	mov	r3,dph
                    02E4    753 	C$buffer.c$111$1$1 ==.
                            754 ;	../buffer.c:111: testsInError += testBufferClear();
   02E4 C0 02               755 	push	ar2
   02E6 C0 03               756 	push	ar3
   02E8 12s01r42            757 	lcall	_testBufferClear
   02EB AC 82               758 	mov	r4,dpl
   02ED AD 83               759 	mov	r5,dph
   02EF D0 03               760 	pop	ar3
   02F1 D0 02               761 	pop	ar2
   02F3 EC                  762 	mov	a,r4
   02F4 2A                  763 	add	a,r2
   02F5 FA                  764 	mov	r2,a
   02F6 ED                  765 	mov	a,r5
   02F7 3B                  766 	addc	a,r3
   02F8 FB                  767 	mov	r3,a
                    02F9    768 	C$buffer.c$112$1$1 ==.
                            769 ;	../buffer.c:112: testsInError += testBufferLimit();
   02F9 C0 02               770 	push	ar2
   02FB C0 03               771 	push	ar3
   02FD 12s01r7F            772 	lcall	_testBufferLimit
   0300 AC 82               773 	mov	r4,dpl
   0302 AD 83               774 	mov	r5,dph
   0304 D0 03               775 	pop	ar3
   0306 D0 02               776 	pop	ar2
   0308 EC                  777 	mov	a,r4
   0309 2A                  778 	add	a,r2
   030A FA                  779 	mov	r2,a
   030B ED                  780 	mov	a,r5
   030C 3B                  781 	addc	a,r3
   030D FB                  782 	mov	r3,a
                    030E    783 	C$buffer.c$113$1$1 ==.
                            784 ;	../buffer.c:113: testsInError += testBufferLotsOfChar();
   030E C0 02               785 	push	ar2
   0310 C0 03               786 	push	ar3
   0312 12s02r50            787 	lcall	_testBufferLotsOfChar
   0315 AC 82               788 	mov	r4,dpl
   0317 AD 83               789 	mov	r5,dph
   0319 D0 03               790 	pop	ar3
   031B D0 02               791 	pop	ar2
   031D EC                  792 	mov	a,r4
   031E 2A                  793 	add	a,r2
   031F FA                  794 	mov	r2,a
   0320 ED                  795 	mov	a,r5
   0321 3B                  796 	addc	a,r3
                    0322    797 	C$buffer.c$115$1$1 ==.
                            798 ;	../buffer.c:115: return testsInError;
                    0322    799 	C$buffer.c$116$1$1 ==.
                    0322    800 	XG$testBuffer$0$0 ==.
   0322 8A 82               801 	mov	dpl,r2
   0324 F5 83               802 	mov	dph,a
   0326 22                  803 	ret
                            804 	.area CSEG    (CODE)
                            805 	.area CONST   (CODE)
                    0000    806 Fbuffer$_str_0$0$0 == .
   0000                     807 __str_0:
   0000 42 46 5F 30 31      808 	.ascii "BF_01"
   0005 00                  809 	.db 0x00
                    0006    810 Fbuffer$_str_1$0$0 == .
   0006                     811 __str_1:
   0006 42 46 5F 30 32      812 	.ascii "BF_02"
   000B 00                  813 	.db 0x00
                    000C    814 Fbuffer$_str_2$0$0 == .
   000C                     815 __str_2:
   000C 42 46 5F 30 33      816 	.ascii "BF_03"
   0011 00                  817 	.db 0x00
                    0012    818 Fbuffer$_str_3$0$0 == .
   0012                     819 __str_3:
   0012 42 46 43 5F 30 31   820 	.ascii "BFC_01"
   0018 00                  821 	.db 0x00
                    0019    822 Fbuffer$_str_4$0$0 == .
   0019                     823 __str_4:
   0019 42 46 4C 5F 30 31   824 	.ascii "BFL_01"
   001F 00                  825 	.db 0x00
                    0020    826 Fbuffer$_str_5$0$0 == .
   0020                     827 __str_5:
   0020 42 46 4C 5F 30 32   828 	.ascii "BFL_02"
   0026 00                  829 	.db 0x00
                            830 	.area XINIT   (CODE)
                    0000    831 Fbuffer$__xinit_in$0$0 == .
   0000                     832 __xinit__in:
   0000 00                  833 	.db #0x00	; 0
                    0001    834 Fbuffer$__xinit_out$0$0 == .
   0001                     835 __xinit__out:
   0001 00                  836 	.db #0x00	; 0
                            837 	.area CABS    (ABS,CODE)

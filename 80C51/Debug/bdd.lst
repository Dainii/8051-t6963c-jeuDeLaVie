                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.0 #6037 (Oct 31 2010) (MINGW32)
                              4 ; This file was generated Mon Jan 23 19:50:59 2017
                              5 ;--------------------------------------------------------
                              6 	.module bdd
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _BDD_assert_PARM_2
                             13 	.globl _BDD_clear
                             14 	.globl _BDD_assert
                             15 ;--------------------------------------------------------
                             16 ; special function registers
                             17 ;--------------------------------------------------------
                             18 	.area RSEG    (ABS,DATA)
   0000                      19 	.org 0x0000
                             20 ;--------------------------------------------------------
                             21 ; special function bits
                             22 ;--------------------------------------------------------
                             23 	.area RSEG    (ABS,DATA)
   0000                      24 	.org 0x0000
                             25 ;--------------------------------------------------------
                             26 ; overlayable register banks
                             27 ;--------------------------------------------------------
                             28 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      29 	.ds 8
                             30 ;--------------------------------------------------------
                             31 ; internal ram data
                             32 ;--------------------------------------------------------
                             33 	.area DSEG    (DATA)
                    0000     34 LBDD_assert$sloc0$1$0==.
   0000                      35 _BDD_assert_sloc0_1_0:
   0000                      36 	.ds 1
                             37 ;--------------------------------------------------------
                             38 ; overlayable items in internal ram 
                             39 ;--------------------------------------------------------
                             40 	.area OSEG    (OVR,DATA)
                             41 ;--------------------------------------------------------
                             42 ; indirectly addressable internal ram data
                             43 ;--------------------------------------------------------
                             44 	.area ISEG    (DATA)
                             45 ;--------------------------------------------------------
                             46 ; absolute internal ram data
                             47 ;--------------------------------------------------------
                             48 	.area IABS    (ABS,DATA)
                             49 	.area IABS    (ABS,DATA)
                             50 ;--------------------------------------------------------
                             51 ; bit data
                             52 ;--------------------------------------------------------
                             53 	.area BSEG    (BIT)
                             54 ;--------------------------------------------------------
                             55 ; paged external ram data
                             56 ;--------------------------------------------------------
                             57 	.area PSEG    (PAG,XDATA)
                             58 ;--------------------------------------------------------
                             59 ; external ram data
                             60 ;--------------------------------------------------------
                             61 	.area XSEG    (XDATA)
                    0000     62 LBDD_clear$n$1$1==.
   0000                      63 _BDD_clear_n_1_1:
   0000                      64 	.ds 1
                    0001     65 LBDD_assert$testId$1$1==.
   0001                      66 _BDD_assert_PARM_2:
   0001                      67 	.ds 3
                    0004     68 LBDD_assert$expectedContent$1$1==.
   0004                      69 _BDD_assert_expectedContent_1_1:
   0004                      70 	.ds 3
                    0007     71 LBDD_assert$x$1$1==.
   0007                      72 _BDD_assert_x_1_1:
   0007                      73 	.ds 1
                    0008     74 LBDD_assert$y$1$1==.
   0008                      75 _BDD_assert_y_1_1:
   0008                      76 	.ds 1
                    0009     77 LBDD_assert$unexpectedContent$1$1==.
   0009                      78 _BDD_assert_unexpectedContent_1_1:
   0009                      79 	.ds 2
                             80 ;--------------------------------------------------------
                             81 ; absolute external ram data
                             82 ;--------------------------------------------------------
                             83 	.area XABS    (ABS,XDATA)
                             84 ;--------------------------------------------------------
                             85 ; external initialized ram data
                             86 ;--------------------------------------------------------
                             87 	.area XISEG   (XDATA)
                             88 	.area HOME    (CODE)
                             89 	.area GSINIT0 (CODE)
                             90 	.area GSINIT1 (CODE)
                             91 	.area GSINIT2 (CODE)
                             92 	.area GSINIT3 (CODE)
                             93 	.area GSINIT4 (CODE)
                             94 	.area GSINIT5 (CODE)
                             95 	.area GSINIT  (CODE)
                             96 	.area GSFINAL (CODE)
                             97 	.area CSEG    (CODE)
                             98 ;--------------------------------------------------------
                             99 ; global & static initialisations
                            100 ;--------------------------------------------------------
                            101 	.area HOME    (CODE)
                            102 	.area GSINIT  (CODE)
                            103 	.area GSFINAL (CODE)
                            104 	.area GSINIT  (CODE)
                            105 ;--------------------------------------------------------
                            106 ; Home
                            107 ;--------------------------------------------------------
                            108 	.area HOME    (CODE)
                            109 	.area HOME    (CODE)
                            110 ;--------------------------------------------------------
                            111 ; code
                            112 ;--------------------------------------------------------
                            113 	.area CSEG    (CODE)
                            114 ;------------------------------------------------------------
                            115 ;Allocation info for local variables in function 'BDD_clear'
                            116 ;------------------------------------------------------------
                            117 ;n                         Allocated with name '_BDD_clear_n_1_1'
                            118 ;address                   Allocated with name '_BDD_clear_address_1_1'
                            119 ;------------------------------------------------------------
                    0000    120 	G$BDD_clear$0$0 ==.
                    0000    121 	C$bdd.c$10$0$0 ==.
                            122 ;	../bdd.c:10: void BDD_clear() {
                            123 ;	-----------------------------------------
                            124 ;	 function BDD_clear
                            125 ;	-----------------------------------------
   0000                     126 _BDD_clear:
                    0002    127 	ar2 = 0x02
                    0003    128 	ar3 = 0x03
                    0004    129 	ar4 = 0x04
                    0005    130 	ar5 = 0x05
                    0006    131 	ar6 = 0x06
                    0007    132 	ar7 = 0x07
                    0000    133 	ar0 = 0x00
                    0001    134 	ar1 = 0x01
                    0000    135 	C$bdd.c$14$1$1 ==.
                            136 ;	../bdd.c:14: address = T6963C_calculateAddress(BDD_SCREEN_X - 1, BDD_SCREEN_Y - 1);
   0000 90s00r00            137 	mov	dptr,#_T6963C_calculateAddress_PARM_2
   0003 74 09               138 	mov	a,#0x09
   0005 F0                  139 	movx	@dptr,a
   0006 75 82 12            140 	mov	dpl,#0x12
   0009 12s00r00            141 	lcall	_T6963C_calculateAddress
   000C AA 82               142 	mov	r2,dpl
   000E AB 83               143 	mov	r3,dph
                    0010    144 	C$bdd.c$15$1$1 ==.
                            145 ;	../bdd.c:15: T6963C_autoRepeat(address, 0x03, BDD_SCREEN_WIDTH + 2);
   0010 90s00r00            146 	mov	dptr,#_T6963C_autoRepeat_PARM_2
   0013 74 03               147 	mov	a,#0x03
   0015 F0                  148 	movx	@dptr,a
   0016 90s00r00            149 	mov	dptr,#_T6963C_autoRepeat_PARM_3
   0019 74 0C               150 	mov	a,#0x0C
   001B F0                  151 	movx	@dptr,a
   001C A3                  152 	inc	dptr
   001D E4                  153 	clr	a
   001E F0                  154 	movx	@dptr,a
   001F 8A 82               155 	mov	dpl,r2
   0021 8B 83               156 	mov	dph,r3
   0023 12s00r00            157 	lcall	_T6963C_autoRepeat
                    0026    158 	C$bdd.c$17$1$1 ==.
                            159 ;	../bdd.c:17: for (n=0; n < BDD_SCREEN_HEIGHT; n++) {
   0026 90s00r00            160 	mov	dptr,#_BDD_clear_n_1_1
   0029 E4                  161 	clr	a
   002A F0                  162 	movx	@dptr,a
   002B                     163 00101$:
   002B 90s00r00            164 	mov	dptr,#_BDD_clear_n_1_1
   002E E0                  165 	movx	a,@dptr
   002F FA                  166 	mov	r2,a
   0030 BA 05 00            167 	cjne	r2,#0x05,00109$
   0033                     168 00109$:
   0033 50 6D               169 	jnc	00104$
                    0035    170 	C$bdd.c$18$2$2 ==.
                            171 ;	../bdd.c:18: address = T6963C_calculateAddress(BDD_SCREEN_X - 1, BDD_SCREEN_Y + n);
   0035 90s00r00            172 	mov	dptr,#_T6963C_calculateAddress_PARM_2
   0038 74 0A               173 	mov	a,#0x0A
   003A 2A                  174 	add	a,r2
   003B F0                  175 	movx	@dptr,a
   003C 75 82 12            176 	mov	dpl,#0x12
   003F C0 02               177 	push	ar2
   0041 12s00r00            178 	lcall	_T6963C_calculateAddress
   0044 AB 82               179 	mov	r3,dpl
   0046 AC 83               180 	mov	r4,dph
                    0048    181 	C$bdd.c$19$2$2 ==.
                            182 ;	../bdd.c:19: T6963C_dataWrite(address, 0x03);
   0048 90s00r00            183 	mov	dptr,#_T6963C_dataWrite_PARM_2
   004B 74 03               184 	mov	a,#0x03
   004D F0                  185 	movx	@dptr,a
   004E 8B 82               186 	mov	dpl,r3
   0050 8C 83               187 	mov	dph,r4
   0052 C0 03               188 	push	ar3
   0054 C0 04               189 	push	ar4
   0056 12s00r00            190 	lcall	_T6963C_dataWrite
   0059 D0 04               191 	pop	ar4
   005B D0 03               192 	pop	ar3
   005D D0 02               193 	pop	ar2
                    005F    194 	C$bdd.c$20$2$2 ==.
                            195 ;	../bdd.c:20: address += 1;
   005F 0B                  196 	inc	r3
   0060 BB 00 01            197 	cjne	r3,#0x00,00111$
   0063 0C                  198 	inc	r4
   0064                     199 00111$:
                    0064    200 	C$bdd.c$22$2$2 ==.
                            201 ;	../bdd.c:22: T6963C_autoRepeat(address, 0x0E, BDD_SCREEN_WIDTH);
   0064 90s00r00            202 	mov	dptr,#_T6963C_autoRepeat_PARM_2
   0067 74 0E               203 	mov	a,#0x0E
   0069 F0                  204 	movx	@dptr,a
   006A 90s00r00            205 	mov	dptr,#_T6963C_autoRepeat_PARM_3
   006D 74 0A               206 	mov	a,#0x0A
   006F F0                  207 	movx	@dptr,a
   0070 A3                  208 	inc	dptr
   0071 E4                  209 	clr	a
   0072 F0                  210 	movx	@dptr,a
   0073 8B 82               211 	mov	dpl,r3
   0075 8C 83               212 	mov	dph,r4
   0077 C0 02               213 	push	ar2
   0079 C0 03               214 	push	ar3
   007B C0 04               215 	push	ar4
   007D 12s00r00            216 	lcall	_T6963C_autoRepeat
   0080 D0 04               217 	pop	ar4
   0082 D0 03               218 	pop	ar3
                    0084    219 	C$bdd.c$24$2$2 ==.
                            220 ;	../bdd.c:24: address += BDD_SCREEN_WIDTH;
   0084 74 0A               221 	mov	a,#0x0A
   0086 2B                  222 	add	a,r3
   0087 FB                  223 	mov	r3,a
   0088 E4                  224 	clr	a
   0089 3C                  225 	addc	a,r4
   008A FC                  226 	mov	r4,a
                    008B    227 	C$bdd.c$25$2$2 ==.
                            228 ;	../bdd.c:25: T6963C_dataWrite(address, 0x03);
   008B 90s00r00            229 	mov	dptr,#_T6963C_dataWrite_PARM_2
   008E 74 03               230 	mov	a,#0x03
   0090 F0                  231 	movx	@dptr,a
   0091 8B 82               232 	mov	dpl,r3
   0093 8C 83               233 	mov	dph,r4
   0095 12s00r00            234 	lcall	_T6963C_dataWrite
   0098 D0 02               235 	pop	ar2
                    009A    236 	C$bdd.c$17$1$1 ==.
                            237 ;	../bdd.c:17: for (n=0; n < BDD_SCREEN_HEIGHT; n++) {
   009A 90s00r00            238 	mov	dptr,#_BDD_clear_n_1_1
   009D EA                  239 	mov	a,r2
   009E 04                  240 	inc	a
   009F F0                  241 	movx	@dptr,a
   00A0 80 89               242 	sjmp	00101$
   00A2                     243 00104$:
                    00A2    244 	C$bdd.c$28$1$1 ==.
                            245 ;	../bdd.c:28: address = T6963C_calculateAddress(BDD_SCREEN_X - 1, BDD_SCREEN_Y + BDD_SCREEN_HEIGHT);
   00A2 90s00r00            246 	mov	dptr,#_T6963C_calculateAddress_PARM_2
   00A5 74 0F               247 	mov	a,#0x0F
   00A7 F0                  248 	movx	@dptr,a
   00A8 75 82 12            249 	mov	dpl,#0x12
   00AB 12s00r00            250 	lcall	_T6963C_calculateAddress
   00AE AA 82               251 	mov	r2,dpl
   00B0 AB 83               252 	mov	r3,dph
                    00B2    253 	C$bdd.c$29$1$1 ==.
                            254 ;	../bdd.c:29: T6963C_autoRepeat(address, 0x03, BDD_SCREEN_WIDTH + 2);
   00B2 90s00r00            255 	mov	dptr,#_T6963C_autoRepeat_PARM_2
   00B5 74 03               256 	mov	a,#0x03
   00B7 F0                  257 	movx	@dptr,a
   00B8 90s00r00            258 	mov	dptr,#_T6963C_autoRepeat_PARM_3
   00BB 74 0C               259 	mov	a,#0x0C
   00BD F0                  260 	movx	@dptr,a
   00BE A3                  261 	inc	dptr
   00BF E4                  262 	clr	a
   00C0 F0                  263 	movx	@dptr,a
   00C1 8A 82               264 	mov	dpl,r2
   00C3 8B 83               265 	mov	dph,r3
                    00C5    266 	C$bdd.c$30$1$1 ==.
                    00C5    267 	XG$BDD_clear$0$0 ==.
   00C5 02s00r00            268 	ljmp	_T6963C_autoRepeat
                            269 ;------------------------------------------------------------
                            270 ;Allocation info for local variables in function 'BDD_assert'
                            271 ;------------------------------------------------------------
                            272 ;sloc0                     Allocated with name '_BDD_assert_sloc0_1_0'
                            273 ;testId                    Allocated with name '_BDD_assert_PARM_2'
                            274 ;expectedContent           Allocated with name '_BDD_assert_expectedContent_1_1'
                            275 ;x                         Allocated with name '_BDD_assert_x_1_1'
                            276 ;y                         Allocated with name '_BDD_assert_y_1_1'
                            277 ;foundContent              Allocated with name '_BDD_assert_foundContent_1_1'
                            278 ;e                         Allocated with name '_BDD_assert_e_1_1'
                            279 ;unexpectedContent         Allocated with name '_BDD_assert_unexpectedContent_1_1'
                            280 ;------------------------------------------------------------
                    00C8    281 	G$BDD_assert$0$0 ==.
                    00C8    282 	C$bdd.c$39$1$1 ==.
                            283 ;	../bdd.c:39: int BDD_assert(BddExpectedContent expectedContent, char *testId) {
                            284 ;	-----------------------------------------
                            285 ;	 function BDD_assert
                            286 ;	-----------------------------------------
   00C8                     287 _BDD_assert:
   00C8 AA F0               288 	mov	r2,b
   00CA AB 83               289 	mov	r3,dph
   00CC E5 82               290 	mov	a,dpl
   00CE 90s00r04            291 	mov	dptr,#_BDD_assert_expectedContent_1_1
   00D1 F0                  292 	movx	@dptr,a
   00D2 A3                  293 	inc	dptr
   00D3 EB                  294 	mov	a,r3
   00D4 F0                  295 	movx	@dptr,a
   00D5 A3                  296 	inc	dptr
   00D6 EA                  297 	mov	a,r2
   00D7 F0                  298 	movx	@dptr,a
                    00D8    299 	C$bdd.c$42$1$1 ==.
                            300 ;	../bdd.c:42: int unexpectedContent = 0;
   00D8 90s00r09            301 	mov	dptr,#_BDD_assert_unexpectedContent_1_1
   00DB E4                  302 	clr	a
   00DC F0                  303 	movx	@dptr,a
   00DD A3                  304 	inc	dptr
   00DE F0                  305 	movx	@dptr,a
                    00DF    306 	C$bdd.c$44$1$1 ==.
                            307 ;	../bdd.c:44: for (y = 0; y < BDD_SCREEN_HEIGHT; y++) {
   00DF 90s00r08            308 	mov	dptr,#_BDD_assert_y_1_1
   00E2 E4                  309 	clr	a
   00E3 F0                  310 	movx	@dptr,a
   00E4 90s00r04            311 	mov	dptr,#_BDD_assert_expectedContent_1_1
   00E7 E0                  312 	movx	a,@dptr
   00E8 FA                  313 	mov	r2,a
   00E9 A3                  314 	inc	dptr
   00EA E0                  315 	movx	a,@dptr
   00EB FB                  316 	mov	r3,a
   00EC A3                  317 	inc	dptr
   00ED E0                  318 	movx	a,@dptr
   00EE FC                  319 	mov	r4,a
   00EF                     320 00109$:
   00EF 90s00r08            321 	mov	dptr,#_BDD_assert_y_1_1
   00F2 E0                  322 	movx	a,@dptr
   00F3 FD                  323 	mov	r5,a
   00F4 BD 05 00            324 	cjne	r5,#0x05,00121$
   00F7                     325 00121$:
   00F7 40 03               326 	jc	00122$
   00F9 02s01rD6            327 	ljmp	00112$
   00FC                     328 00122$:
                    00FC    329 	C$bdd.c$45$2$2 ==.
                            330 ;	../bdd.c:45: for (x = 0; x < BDD_SCREEN_WIDTH; x++) {
   00FC 90s00r07            331 	mov	dptr,#_BDD_assert_x_1_1
   00FF E4                  332 	clr	a
   0100 F0                  333 	movx	@dptr,a
   0101 ED                  334 	mov	a,r5
   0102 FE                  335 	mov	r6,a
   0103 75 F0 0B            336 	mov	b,#0x0B
   0106 A4                  337 	mul	ab
   0107 2A                  338 	add	a,r2
   0108 FF                  339 	mov	r7,a
   0109 E4                  340 	clr	a
   010A 3B                  341 	addc	a,r3
   010B F8                  342 	mov	r0,a
   010C 8C 01               343 	mov	ar1,r4
   010E 74 0A               344 	mov	a,#0x0A
   0110 2D                  345 	add	a,r5
   0111 FD                  346 	mov	r5,a
   0112                     347 00105$:
   0112 90s00r07            348 	mov	dptr,#_BDD_assert_x_1_1
   0115 E0                  349 	movx	a,@dptr
   0116 F5*00               350 	mov	_BDD_assert_sloc0_1_0,a
   0118 C3                  351 	clr	c
   0119 94 0A               352 	subb	a,#0x0A
   011B 40 03               353 	jc	00123$
   011D 02s01rCC            354 	ljmp	00111$
   0120                     355 00123$:
                    0120    356 	C$bdd.c$46$1$1 ==.
                            357 ;	../bdd.c:46: e = expectedContent[y][x] - 32;
   0120 C0 02               358 	push	ar2
   0122 C0 03               359 	push	ar3
   0124 C0 04               360 	push	ar4
   0126 E5*00               361 	mov	a,_BDD_assert_sloc0_1_0
   0128 2F                  362 	add	a,r7
   0129 FA                  363 	mov	r2,a
   012A E4                  364 	clr	a
   012B 38                  365 	addc	a,r0
   012C FB                  366 	mov	r3,a
   012D 89 04               367 	mov	ar4,r1
   012F 8A 82               368 	mov	dpl,r2
   0131 8B 83               369 	mov	dph,r3
   0133 8C F0               370 	mov	b,r4
   0135 12s00r00            371 	lcall	__gptrget
   0138 24 E0               372 	add	a,#0xe0
   013A FA                  373 	mov	r2,a
                    013B    374 	C$bdd.c$47$3$3 ==.
                            375 ;	../bdd.c:47: foundContent = T6963C_readFrom(BDD_SCREEN_X + x, BDD_SCREEN_Y + y);
   013B 74 13               376 	mov	a,#0x13
   013D 25*00               377 	add	a,_BDD_assert_sloc0_1_0
   013F FB                  378 	mov	r3,a
   0140 90s00r00            379 	mov	dptr,#_T6963C_readFrom_PARM_2
   0143 ED                  380 	mov	a,r5
   0144 F0                  381 	movx	@dptr,a
   0145 8B 82               382 	mov	dpl,r3
   0147 C0 02               383 	push	ar2
   0149 C0 04               384 	push	ar4
   014B C0 05               385 	push	ar5
   014D C0 06               386 	push	ar6
   014F C0 07               387 	push	ar7
   0151 C0 00               388 	push	ar0
   0153 C0 01               389 	push	ar1
   0155 12s00r00            390 	lcall	_T6963C_readFrom
   0158 AB 82               391 	mov	r3,dpl
   015A D0 01               392 	pop	ar1
   015C D0 00               393 	pop	ar0
   015E D0 07               394 	pop	ar7
   0160 D0 06               395 	pop	ar6
   0162 D0 05               396 	pop	ar5
   0164 D0 04               397 	pop	ar4
   0166 D0 02               398 	pop	ar2
                    0168    399 	C$bdd.c$48$3$3 ==.
                            400 ;	../bdd.c:48: if (foundContent != e) {
   0168 EB                  401 	mov	a,r3
   0169 B5 02 08            402 	cjne	a,ar2,00124$
   016C D0 04               403 	pop	ar4
   016E D0 03               404 	pop	ar3
   0170 D0 02               405 	pop	ar2
   0172 80 4E               406 	sjmp	00107$
   0174                     407 00124$:
   0174 D0 04               408 	pop	ar4
   0176 D0 03               409 	pop	ar3
                    0178    410 	C$bdd.c$49$1$1 ==.
                            411 ;	../bdd.c:49: T6963C_writeAt(BDD_SCREEN_X + x, BDD_SCREEN_Y + y, 'X' - 0x20);
   0178 C0 03               412 	push	ar3
   017A C0 04               413 	push	ar4
   017C 74 13               414 	mov	a,#0x13
   017E 25*00               415 	add	a,_BDD_assert_sloc0_1_0
   0180 FA                  416 	mov	r2,a
   0181 90s00r00            417 	mov	dptr,#_T6963C_writeAt_PARM_2
   0184 74 0A               418 	mov	a,#0x0A
   0186 2E                  419 	add	a,r6
   0187 F0                  420 	movx	@dptr,a
   0188 90s00r00            421 	mov	dptr,#_T6963C_writeAt_PARM_3
   018B 74 38               422 	mov	a,#0x38
   018D F0                  423 	movx	@dptr,a
   018E 8A 82               424 	mov	dpl,r2
   0190 C0 02               425 	push	ar2
   0192 C0 03               426 	push	ar3
   0194 C0 04               427 	push	ar4
   0196 C0 05               428 	push	ar5
   0198 C0 06               429 	push	ar6
   019A C0 07               430 	push	ar7
   019C C0 00               431 	push	ar0
   019E C0 01               432 	push	ar1
   01A0 12s00r00            433 	lcall	_T6963C_writeAt
   01A3 D0 01               434 	pop	ar1
   01A5 D0 00               435 	pop	ar0
   01A7 D0 07               436 	pop	ar7
   01A9 D0 06               437 	pop	ar6
   01AB D0 05               438 	pop	ar5
   01AD D0 04               439 	pop	ar4
   01AF D0 03               440 	pop	ar3
   01B1 D0 02               441 	pop	ar2
                    01B3    442 	C$bdd.c$50$4$4 ==.
                            443 ;	../bdd.c:50: unexpectedContent = 1;
   01B3 90s00r09            444 	mov	dptr,#_BDD_assert_unexpectedContent_1_1
   01B6 74 01               445 	mov	a,#0x01
   01B8 F0                  446 	movx	@dptr,a
   01B9 A3                  447 	inc	dptr
   01BA E4                  448 	clr	a
   01BB F0                  449 	movx	@dptr,a
                    01BC    450 	C$bdd.c$59$1$1 ==.
                            451 ;	../bdd.c:59: return unexpectedContent;
   01BC D0 04               452 	pop	ar4
   01BE D0 03               453 	pop	ar3
   01C0 D0 02               454 	pop	ar2
                    01C2    455 	C$bdd.c$50$2$3 ==.
                            456 ;	../bdd.c:50: unexpectedContent = 1;
   01C2                     457 00107$:
                    01C2    458 	C$bdd.c$45$2$2 ==.
                            459 ;	../bdd.c:45: for (x = 0; x < BDD_SCREEN_WIDTH; x++) {
   01C2 90s00r07            460 	mov	dptr,#_BDD_assert_x_1_1
   01C5 E0                  461 	movx	a,@dptr
   01C6 24 01               462 	add	a,#0x01
   01C8 F0                  463 	movx	@dptr,a
   01C9 02s01r12            464 	ljmp	00105$
   01CC                     465 00111$:
                    01CC    466 	C$bdd.c$44$1$1 ==.
                            467 ;	../bdd.c:44: for (y = 0; y < BDD_SCREEN_HEIGHT; y++) {
   01CC 90s00r08            468 	mov	dptr,#_BDD_assert_y_1_1
   01CF E0                  469 	movx	a,@dptr
   01D0 24 01               470 	add	a,#0x01
   01D2 F0                  471 	movx	@dptr,a
   01D3 02s00rEF            472 	ljmp	00109$
   01D6                     473 00112$:
                    01D6    474 	C$bdd.c$55$1$1 ==.
                            475 ;	../bdd.c:55: if (unexpectedContent) {
   01D6 90s00r09            476 	mov	dptr,#_BDD_assert_unexpectedContent_1_1
   01D9 E0                  477 	movx	a,@dptr
   01DA FA                  478 	mov	r2,a
   01DB A3                  479 	inc	dptr
   01DC E0                  480 	movx	a,@dptr
   01DD FB                  481 	mov	r3,a
   01DE 4A                  482 	orl	a,r2
   01DF 60 2B               483 	jz	00104$
                    01E1    484 	C$bdd.c$56$2$5 ==.
                            485 ;	../bdd.c:56: printf("Erreur bdd %s\r\n", testId);
   01E1 C0 02               486 	push	ar2
   01E3 C0 03               487 	push	ar3
   01E5 90s00r01            488 	mov	dptr,#_BDD_assert_PARM_2
   01E8 E0                  489 	movx	a,@dptr
   01E9 C0 E0               490 	push	acc
   01EB A3                  491 	inc	dptr
   01EC E0                  492 	movx	a,@dptr
   01ED C0 E0               493 	push	acc
   01EF A3                  494 	inc	dptr
   01F0 E0                  495 	movx	a,@dptr
   01F1 C0 E0               496 	push	acc
   01F3 74r00               497 	mov	a,#__str_0
   01F5 C0 E0               498 	push	acc
   01F7 74s00               499 	mov	a,#(__str_0 >> 8)
   01F9 C0 E0               500 	push	acc
   01FB 74 80               501 	mov	a,#0x80
   01FD C0 E0               502 	push	acc
   01FF 12s00r00            503 	lcall	_printf
   0202 E5 81               504 	mov	a,sp
   0204 24 FA               505 	add	a,#0xfa
   0206 F5 81               506 	mov	sp,a
   0208 D0 03               507 	pop	ar3
   020A D0 02               508 	pop	ar2
   020C                     509 00104$:
                    020C    510 	C$bdd.c$59$1$1 ==.
                            511 ;	../bdd.c:59: return unexpectedContent;
   020C 8A 82               512 	mov	dpl,r2
   020E 8B 83               513 	mov	dph,r3
                    0210    514 	C$bdd.c$60$1$1 ==.
                    0210    515 	XG$BDD_assert$0$0 ==.
   0210 22                  516 	ret
                            517 	.area CSEG    (CODE)
                            518 	.area CONST   (CODE)
                    0000    519 Fbdd$_str_0$0$0 == .
   0000                     520 __str_0:
   0000 45 72 72 65 75 72   521 	.ascii "Erreur bdd %s"
        20 62 64 64 20 25
        73
   000D 0D                  522 	.db 0x0D
   000E 0A                  523 	.db 0x0A
   000F 00                  524 	.db 0x00
                            525 	.area XINIT   (CODE)
                            526 	.area CABS    (ABS,CODE)

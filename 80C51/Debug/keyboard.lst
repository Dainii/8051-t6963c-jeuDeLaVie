                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.0 #6037 (Oct 31 2010) (MINGW32)
                              4 ; This file was generated Mon Jan 23 19:50:58 2017
                              5 ;--------------------------------------------------------
                              6 	.module keyboard
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _testKeyboardArrows
                             13 	.globl _KEYBOARD_readArrows
                             14 	.globl _testKeyboard
                             15 ;--------------------------------------------------------
                             16 ; special function registers
                             17 ;--------------------------------------------------------
                             18 	.area RSEG    (ABS,DATA)
   0000                      19 	.org 0x0000
                             20 ;--------------------------------------------------------
                             21 ; special function bits
                             22 ;--------------------------------------------------------
                             23 	.area RSEG    (ABS,DATA)
   0000                      24 	.org 0x0000
                             25 ;--------------------------------------------------------
                             26 ; overlayable register banks
                             27 ;--------------------------------------------------------
                             28 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      29 	.ds 8
                             30 ;--------------------------------------------------------
                             31 ; internal ram data
                             32 ;--------------------------------------------------------
                             33 	.area DSEG    (DATA)
                             34 ;--------------------------------------------------------
                             35 ; overlayable items in internal ram 
                             36 ;--------------------------------------------------------
                             37 	.area OSEG    (OVR,DATA)
                             38 ;--------------------------------------------------------
                             39 ; indirectly addressable internal ram data
                             40 ;--------------------------------------------------------
                             41 	.area ISEG    (DATA)
                             42 ;--------------------------------------------------------
                             43 ; absolute internal ram data
                             44 ;--------------------------------------------------------
                             45 	.area IABS    (ABS,DATA)
                             46 	.area IABS    (ABS,DATA)
                             47 ;--------------------------------------------------------
                             48 ; bit data
                             49 ;--------------------------------------------------------
                             50 	.area BSEG    (BIT)
                             51 ;--------------------------------------------------------
                             52 ; paged external ram data
                             53 ;--------------------------------------------------------
                             54 	.area PSEG    (PAG,XDATA)
                             55 ;--------------------------------------------------------
                             56 ; external ram data
                             57 ;--------------------------------------------------------
                             58 	.area XSEG    (XDATA)
                    0000     59 LKEYBOARD_readArrows$keyboard$1$1==.
   0000                      60 _KEYBOARD_readArrows_keyboard_1_1:
   0000                      61 	.ds 3
                    0003     62 LtestKeyboardArrows$keys$1$1==.
   0003                      63 _testKeyboardArrows_keys_1_1:
   0003                      64 	.ds 4
                             65 ;--------------------------------------------------------
                             66 ; absolute external ram data
                             67 ;--------------------------------------------------------
                             68 	.area XABS    (ABS,XDATA)
                             69 ;--------------------------------------------------------
                             70 ; external initialized ram data
                             71 ;--------------------------------------------------------
                             72 	.area XISEG   (XDATA)
                             73 	.area HOME    (CODE)
                             74 	.area GSINIT0 (CODE)
                             75 	.area GSINIT1 (CODE)
                             76 	.area GSINIT2 (CODE)
                             77 	.area GSINIT3 (CODE)
                             78 	.area GSINIT4 (CODE)
                             79 	.area GSINIT5 (CODE)
                             80 	.area GSINIT  (CODE)
                             81 	.area GSFINAL (CODE)
                             82 	.area CSEG    (CODE)
                             83 ;--------------------------------------------------------
                             84 ; global & static initialisations
                             85 ;--------------------------------------------------------
                             86 	.area HOME    (CODE)
                             87 	.area GSINIT  (CODE)
                             88 	.area GSFINAL (CODE)
                             89 	.area GSINIT  (CODE)
                             90 ;--------------------------------------------------------
                             91 ; Home
                             92 ;--------------------------------------------------------
                             93 	.area HOME    (CODE)
                             94 	.area HOME    (CODE)
                             95 ;--------------------------------------------------------
                             96 ; code
                             97 ;--------------------------------------------------------
                             98 	.area CSEG    (CODE)
                             99 ;------------------------------------------------------------
                            100 ;Allocation info for local variables in function 'KEYBOARD_readArrows'
                            101 ;------------------------------------------------------------
                            102 ;keyboard                  Allocated with name '_KEYBOARD_readArrows_keyboard_1_1'
                            103 ;------------------------------------------------------------
                    0000    104 	G$KEYBOARD_readArrows$0$0 ==.
                    0000    105 	C$keyboard.c$20$0$0 ==.
                            106 ;	../keyboard.c:20: Arrow KEYBOARD_readArrows(unsigned char *keyboard) {
                            107 ;	-----------------------------------------
                            108 ;	 function KEYBOARD_readArrows
                            109 ;	-----------------------------------------
   0000                     110 _KEYBOARD_readArrows:
                    0002    111 	ar2 = 0x02
                    0003    112 	ar3 = 0x03
                    0004    113 	ar4 = 0x04
                    0005    114 	ar5 = 0x05
                    0006    115 	ar6 = 0x06
                    0007    116 	ar7 = 0x07
                    0000    117 	ar0 = 0x00
                    0001    118 	ar1 = 0x01
   0000 AA F0               119 	mov	r2,b
   0002 AB 83               120 	mov	r3,dph
   0004 E5 82               121 	mov	a,dpl
   0006 90s00r00            122 	mov	dptr,#_KEYBOARD_readArrows_keyboard_1_1
   0009 F0                  123 	movx	@dptr,a
   000A A3                  124 	inc	dptr
   000B EB                  125 	mov	a,r3
   000C F0                  126 	movx	@dptr,a
   000D A3                  127 	inc	dptr
   000E EA                  128 	mov	a,r2
   000F F0                  129 	movx	@dptr,a
                    0010    130 	C$keyboard.c$21$1$1 ==.
                            131 ;	../keyboard.c:21: if (keyboard[0] == KEY_8){
   0010 90s00r00            132 	mov	dptr,#_KEYBOARD_readArrows_keyboard_1_1
   0013 E0                  133 	movx	a,@dptr
   0014 FA                  134 	mov	r2,a
   0015 A3                  135 	inc	dptr
   0016 E0                  136 	movx	a,@dptr
   0017 FB                  137 	mov	r3,a
   0018 A3                  138 	inc	dptr
   0019 E0                  139 	movx	a,@dptr
   001A FC                  140 	mov	r4,a
   001B 8A 82               141 	mov	dpl,r2
   001D 8B 83               142 	mov	dph,r3
   001F 8C F0               143 	mov	b,r4
   0021 12s00r00            144 	lcall	__gptrget
   0024 FD                  145 	mov	r5,a
   0025 BD FD 04            146 	cjne	r5,#0xFD,00102$
                    0028    147 	C$keyboard.c$22$2$2 ==.
                            148 ;	../keyboard.c:22: return ARROW_UP;
   0028 75 82 01            149 	mov	dpl,#0x01
   002B 22                  150 	ret
   002C                     151 00102$:
                    002C    152 	C$keyboard.c$25$1$1 ==.
                            153 ;	../keyboard.c:25: if (keyboard[1] == KEY_4){
   002C 74 01               154 	mov	a,#0x01
   002E 2A                  155 	add	a,r2
   002F FD                  156 	mov	r5,a
   0030 E4                  157 	clr	a
   0031 3B                  158 	addc	a,r3
   0032 FE                  159 	mov	r6,a
   0033 8C 07               160 	mov	ar7,r4
   0035 8D 82               161 	mov	dpl,r5
   0037 8E 83               162 	mov	dph,r6
   0039 8F F0               163 	mov	b,r7
   003B 12s00r00            164 	lcall	__gptrget
   003E FD                  165 	mov	r5,a
   003F BD FE 04            166 	cjne	r5,#0xFE,00104$
                    0042    167 	C$keyboard.c$26$2$3 ==.
                            168 ;	../keyboard.c:26: return ARROW_LEFT;
   0042 75 82 03            169 	mov	dpl,#0x03
   0045 22                  170 	ret
   0046                     171 00104$:
                    0046    172 	C$keyboard.c$29$1$1 ==.
                            173 ;	../keyboard.c:29: if (keyboard[1] == KEY_6){
   0046 BD FB 04            174 	cjne	r5,#0xFB,00106$
                    0049    175 	C$keyboard.c$30$2$4 ==.
                            176 ;	../keyboard.c:30: return ARROW_RIGHT;
   0049 75 82 04            177 	mov	dpl,#0x04
   004C 22                  178 	ret
   004D                     179 00106$:
                    004D    180 	C$keyboard.c$33$1$1 ==.
                            181 ;	../keyboard.c:33: if (keyboard[2] == KEY_2){
   004D 74 02               182 	mov	a,#0x02
   004F 2A                  183 	add	a,r2
   0050 FA                  184 	mov	r2,a
   0051 E4                  185 	clr	a
   0052 3B                  186 	addc	a,r3
   0053 FB                  187 	mov	r3,a
   0054 8A 82               188 	mov	dpl,r2
   0056 8B 83               189 	mov	dph,r3
   0058 8C F0               190 	mov	b,r4
   005A 12s00r00            191 	lcall	__gptrget
   005D FA                  192 	mov	r2,a
   005E BA FD 04            193 	cjne	r2,#0xFD,00108$
                    0061    194 	C$keyboard.c$34$2$5 ==.
                            195 ;	../keyboard.c:34: return ARROW_DOWN;
   0061 75 82 02            196 	mov	dpl,#0x02
                    0064    197 	C$keyboard.c$37$1$1 ==.
                            198 ;	../keyboard.c:37: return ARROW_NEUTRAL;
                    0064    199 	C$keyboard.c$38$1$1 ==.
                    0064    200 	XG$KEYBOARD_readArrows$0$0 ==.
   0064 22                  201 	ret
   0065                     202 00108$:
   0065 75 82 00            203 	mov	dpl,#0x00
   0068 22                  204 	ret
                            205 ;------------------------------------------------------------
                            206 ;Allocation info for local variables in function 'testKeyboardArrows'
                            207 ;------------------------------------------------------------
                            208 ;testsInError              Allocated with name '_testKeyboardArrows_testsInError_1_1'
                            209 ;keys                      Allocated with name '_testKeyboardArrows_keys_1_1'
                            210 ;------------------------------------------------------------
                    0069    211 	G$testKeyboardArrows$0$0 ==.
                    0069    212 	C$keyboard.c$42$1$1 ==.
                            213 ;	../keyboard.c:42: int testKeyboardArrows() {
                            214 ;	-----------------------------------------
                            215 ;	 function testKeyboardArrows
                            216 ;	-----------------------------------------
   0069                     217 _testKeyboardArrows:
                    0069    218 	C$keyboard.c$44$1$1 ==.
                            219 ;	../keyboard.c:44: unsigned char keys[4] = {KEY_NONE, KEY_NONE, KEY_NONE, KEY_NONE};
   0069 90s00r03            220 	mov	dptr,#_testKeyboardArrows_keys_1_1
   006C 74 FF               221 	mov	a,#0xFF
   006E F0                  222 	movx	@dptr,a
   006F 90s00r04            223 	mov	dptr,#(_testKeyboardArrows_keys_1_1 + 0x0001)
   0072 74 FF               224 	mov	a,#0xFF
   0074 F0                  225 	movx	@dptr,a
   0075 90s00r05            226 	mov	dptr,#(_testKeyboardArrows_keys_1_1 + 0x0002)
   0078 74 FF               227 	mov	a,#0xFF
   007A F0                  228 	movx	@dptr,a
   007B 90s00r06            229 	mov	dptr,#(_testKeyboardArrows_keys_1_1 + 0x0003)
   007E 74 FF               230 	mov	a,#0xFF
   0080 F0                  231 	movx	@dptr,a
                    0081    232 	C$keyboard.c$46$1$1 ==.
                            233 ;	../keyboard.c:46: testsInError += assertEquals(KEYBOARD_readArrows(keys), ARROW_NEUTRAL, "KB001");
   0081 90s00r03            234 	mov	dptr,#_testKeyboardArrows_keys_1_1
   0084 75 F0 00            235 	mov	b,#0x00
   0087 12s00r00            236 	lcall	_KEYBOARD_readArrows
   008A AA 82               237 	mov	r2,dpl
   008C 7B 00               238 	mov	r3,#0x00
   008E 90s00r00            239 	mov	dptr,#_assertEquals_PARM_2
   0091 E4                  240 	clr	a
   0092 F0                  241 	movx	@dptr,a
   0093 A3                  242 	inc	dptr
   0094 F0                  243 	movx	@dptr,a
   0095 90s00r00            244 	mov	dptr,#_assertEquals_PARM_3
   0098 74r00               245 	mov	a,#__str_0
   009A F0                  246 	movx	@dptr,a
   009B A3                  247 	inc	dptr
   009C 74s00               248 	mov	a,#(__str_0 >> 8)
   009E F0                  249 	movx	@dptr,a
   009F A3                  250 	inc	dptr
   00A0 74 80               251 	mov	a,#0x80
   00A2 F0                  252 	movx	@dptr,a
   00A3 8A 82               253 	mov	dpl,r2
   00A5 8B 83               254 	mov	dph,r3
   00A7 12s00r00            255 	lcall	_assertEquals
   00AA AA 82               256 	mov	r2,dpl
   00AC AB 83               257 	mov	r3,dph
                    00AE    258 	C$keyboard.c$48$1$1 ==.
                            259 ;	../keyboard.c:48: keys[0] = KEY_8;
                    00AE    260 	C$keyboard.c$49$1$1 ==.
                            261 ;	../keyboard.c:49: testsInError +=assertEquals(KEYBOARD_readArrows(keys), ARROW_UP, "KB002");
   00AE 90s00r03            262 	mov	dptr,#_testKeyboardArrows_keys_1_1
   00B1 74 FD               263 	mov	a,#0xFD
   00B3 F0                  264 	movx	@dptr,a
   00B4 75 F0 00            265 	mov	b,#0x00
   00B7 C0 02               266 	push	ar2
   00B9 C0 03               267 	push	ar3
   00BB 12s00r00            268 	lcall	_KEYBOARD_readArrows
   00BE AC 82               269 	mov	r4,dpl
   00C0 7D 00               270 	mov	r5,#0x00
   00C2 90s00r00            271 	mov	dptr,#_assertEquals_PARM_2
   00C5 74 01               272 	mov	a,#0x01
   00C7 F0                  273 	movx	@dptr,a
   00C8 A3                  274 	inc	dptr
   00C9 E4                  275 	clr	a
   00CA F0                  276 	movx	@dptr,a
   00CB 90s00r00            277 	mov	dptr,#_assertEquals_PARM_3
   00CE 74r06               278 	mov	a,#__str_1
   00D0 F0                  279 	movx	@dptr,a
   00D1 A3                  280 	inc	dptr
   00D2 74s00               281 	mov	a,#(__str_1 >> 8)
   00D4 F0                  282 	movx	@dptr,a
   00D5 A3                  283 	inc	dptr
   00D6 74 80               284 	mov	a,#0x80
   00D8 F0                  285 	movx	@dptr,a
   00D9 8C 82               286 	mov	dpl,r4
   00DB 8D 83               287 	mov	dph,r5
   00DD 12s00r00            288 	lcall	_assertEquals
   00E0 AC 82               289 	mov	r4,dpl
   00E2 AD 83               290 	mov	r5,dph
   00E4 D0 03               291 	pop	ar3
   00E6 D0 02               292 	pop	ar2
   00E8 EC                  293 	mov	a,r4
   00E9 2A                  294 	add	a,r2
   00EA FA                  295 	mov	r2,a
   00EB ED                  296 	mov	a,r5
   00EC 3B                  297 	addc	a,r3
   00ED FB                  298 	mov	r3,a
                    00EE    299 	C$keyboard.c$50$1$1 ==.
                            300 ;	../keyboard.c:50: keys[0] = KEY_NONE;
   00EE 90s00r03            301 	mov	dptr,#_testKeyboardArrows_keys_1_1
   00F1 74 FF               302 	mov	a,#0xFF
   00F3 F0                  303 	movx	@dptr,a
                    00F4    304 	C$keyboard.c$51$1$1 ==.
                            305 ;	../keyboard.c:51: keys[1] = KEY_4;
   00F4 90s00r04            306 	mov	dptr,#(_testKeyboardArrows_keys_1_1 + 0x0001)
   00F7 74 FE               307 	mov	a,#0xFE
   00F9 F0                  308 	movx	@dptr,a
                    00FA    309 	C$keyboard.c$52$1$1 ==.
                            310 ;	../keyboard.c:52: testsInError +=assertEquals(KEYBOARD_readArrows(keys), ARROW_LEFT, "KB003");
   00FA 90s00r03            311 	mov	dptr,#_testKeyboardArrows_keys_1_1
   00FD 75 F0 00            312 	mov	b,#0x00
   0100 C0 02               313 	push	ar2
   0102 C0 03               314 	push	ar3
   0104 12s00r00            315 	lcall	_KEYBOARD_readArrows
   0107 AC 82               316 	mov	r4,dpl
   0109 7D 00               317 	mov	r5,#0x00
   010B 90s00r00            318 	mov	dptr,#_assertEquals_PARM_2
   010E 74 03               319 	mov	a,#0x03
   0110 F0                  320 	movx	@dptr,a
   0111 A3                  321 	inc	dptr
   0112 E4                  322 	clr	a
   0113 F0                  323 	movx	@dptr,a
   0114 90s00r00            324 	mov	dptr,#_assertEquals_PARM_3
   0117 74r0C               325 	mov	a,#__str_2
   0119 F0                  326 	movx	@dptr,a
   011A A3                  327 	inc	dptr
   011B 74s00               328 	mov	a,#(__str_2 >> 8)
   011D F0                  329 	movx	@dptr,a
   011E A3                  330 	inc	dptr
   011F 74 80               331 	mov	a,#0x80
   0121 F0                  332 	movx	@dptr,a
   0122 8C 82               333 	mov	dpl,r4
   0124 8D 83               334 	mov	dph,r5
   0126 12s00r00            335 	lcall	_assertEquals
   0129 AC 82               336 	mov	r4,dpl
   012B AD 83               337 	mov	r5,dph
   012D D0 03               338 	pop	ar3
   012F D0 02               339 	pop	ar2
   0131 EC                  340 	mov	a,r4
   0132 2A                  341 	add	a,r2
   0133 FA                  342 	mov	r2,a
   0134 ED                  343 	mov	a,r5
   0135 3B                  344 	addc	a,r3
   0136 FB                  345 	mov	r3,a
                    0137    346 	C$keyboard.c$53$1$1 ==.
                            347 ;	../keyboard.c:53: keys[1] = KEY_6;
   0137 90s00r04            348 	mov	dptr,#(_testKeyboardArrows_keys_1_1 + 0x0001)
   013A 74 FB               349 	mov	a,#0xFB
   013C F0                  350 	movx	@dptr,a
                    013D    351 	C$keyboard.c$54$1$1 ==.
                            352 ;	../keyboard.c:54: testsInError +=assertEquals(KEYBOARD_readArrows(keys), ARROW_RIGHT, "KB004");
   013D 90s00r03            353 	mov	dptr,#_testKeyboardArrows_keys_1_1
   0140 75 F0 00            354 	mov	b,#0x00
   0143 C0 02               355 	push	ar2
   0145 C0 03               356 	push	ar3
   0147 12s00r00            357 	lcall	_KEYBOARD_readArrows
   014A AC 82               358 	mov	r4,dpl
   014C 7D 00               359 	mov	r5,#0x00
   014E 90s00r00            360 	mov	dptr,#_assertEquals_PARM_2
   0151 74 04               361 	mov	a,#0x04
   0153 F0                  362 	movx	@dptr,a
   0154 A3                  363 	inc	dptr
   0155 E4                  364 	clr	a
   0156 F0                  365 	movx	@dptr,a
   0157 90s00r00            366 	mov	dptr,#_assertEquals_PARM_3
   015A 74r12               367 	mov	a,#__str_3
   015C F0                  368 	movx	@dptr,a
   015D A3                  369 	inc	dptr
   015E 74s00               370 	mov	a,#(__str_3 >> 8)
   0160 F0                  371 	movx	@dptr,a
   0161 A3                  372 	inc	dptr
   0162 74 80               373 	mov	a,#0x80
   0164 F0                  374 	movx	@dptr,a
   0165 8C 82               375 	mov	dpl,r4
   0167 8D 83               376 	mov	dph,r5
   0169 12s00r00            377 	lcall	_assertEquals
   016C AC 82               378 	mov	r4,dpl
   016E AD 83               379 	mov	r5,dph
   0170 D0 03               380 	pop	ar3
   0172 D0 02               381 	pop	ar2
   0174 EC                  382 	mov	a,r4
   0175 2A                  383 	add	a,r2
   0176 FA                  384 	mov	r2,a
   0177 ED                  385 	mov	a,r5
   0178 3B                  386 	addc	a,r3
   0179 FB                  387 	mov	r3,a
                    017A    388 	C$keyboard.c$55$1$1 ==.
                            389 ;	../keyboard.c:55: keys[1] = KEY_NONE;
   017A 90s00r04            390 	mov	dptr,#(_testKeyboardArrows_keys_1_1 + 0x0001)
   017D 74 FF               391 	mov	a,#0xFF
   017F F0                  392 	movx	@dptr,a
                    0180    393 	C$keyboard.c$56$1$1 ==.
                            394 ;	../keyboard.c:56: keys[2] = KEY_2;
   0180 90s00r05            395 	mov	dptr,#(_testKeyboardArrows_keys_1_1 + 0x0002)
   0183 74 FD               396 	mov	a,#0xFD
   0185 F0                  397 	movx	@dptr,a
                    0186    398 	C$keyboard.c$57$1$1 ==.
                            399 ;	../keyboard.c:57: testsInError +=assertEquals(KEYBOARD_readArrows(keys), ARROW_DOWN, "KB005");
   0186 90s00r03            400 	mov	dptr,#_testKeyboardArrows_keys_1_1
   0189 75 F0 00            401 	mov	b,#0x00
   018C C0 02               402 	push	ar2
   018E C0 03               403 	push	ar3
   0190 12s00r00            404 	lcall	_KEYBOARD_readArrows
   0193 AC 82               405 	mov	r4,dpl
   0195 7D 00               406 	mov	r5,#0x00
   0197 90s00r00            407 	mov	dptr,#_assertEquals_PARM_2
   019A 74 02               408 	mov	a,#0x02
   019C F0                  409 	movx	@dptr,a
   019D A3                  410 	inc	dptr
   019E E4                  411 	clr	a
   019F F0                  412 	movx	@dptr,a
   01A0 90s00r00            413 	mov	dptr,#_assertEquals_PARM_3
   01A3 74r18               414 	mov	a,#__str_4
   01A5 F0                  415 	movx	@dptr,a
   01A6 A3                  416 	inc	dptr
   01A7 74s00               417 	mov	a,#(__str_4 >> 8)
   01A9 F0                  418 	movx	@dptr,a
   01AA A3                  419 	inc	dptr
   01AB 74 80               420 	mov	a,#0x80
   01AD F0                  421 	movx	@dptr,a
   01AE 8C 82               422 	mov	dpl,r4
   01B0 8D 83               423 	mov	dph,r5
   01B2 12s00r00            424 	lcall	_assertEquals
   01B5 AC 82               425 	mov	r4,dpl
   01B7 AD 83               426 	mov	r5,dph
   01B9 D0 03               427 	pop	ar3
   01BB D0 02               428 	pop	ar2
   01BD EC                  429 	mov	a,r4
   01BE 2A                  430 	add	a,r2
   01BF FA                  431 	mov	r2,a
   01C0 ED                  432 	mov	a,r5
   01C1 3B                  433 	addc	a,r3
                    01C2    434 	C$keyboard.c$59$1$1 ==.
                            435 ;	../keyboard.c:59: return testsInError;
                    01C2    436 	C$keyboard.c$60$1$1 ==.
                    01C2    437 	XG$testKeyboardArrows$0$0 ==.
   01C2 8A 82               438 	mov	dpl,r2
   01C4 F5 83               439 	mov	dph,a
   01C6 22                  440 	ret
                            441 ;------------------------------------------------------------
                            442 ;Allocation info for local variables in function 'testKeyboard'
                            443 ;------------------------------------------------------------
                            444 ;testsInError              Allocated with name '_testKeyboard_testsInError_1_1'
                            445 ;------------------------------------------------------------
                    01C7    446 	G$testKeyboard$0$0 ==.
                    01C7    447 	C$keyboard.c$62$1$1 ==.
                            448 ;	../keyboard.c:62: int testKeyboard() {
                            449 ;	-----------------------------------------
                            450 ;	 function testKeyboard
                            451 ;	-----------------------------------------
   01C7                     452 _testKeyboard:
                    01C7    453 	C$keyboard.c$65$1$1 ==.
                            454 ;	../keyboard.c:65: testsInError += testKeyboardArrows();
                    01C7    455 	C$keyboard.c$67$1$1 ==.
                            456 ;	../keyboard.c:67: return testsInError;
                    01C7    457 	C$keyboard.c$68$1$1 ==.
                    01C7    458 	XG$testKeyboard$0$0 ==.
   01C7 02s00r69            459 	ljmp	_testKeyboardArrows
                            460 	.area CSEG    (CODE)
                            461 	.area CONST   (CODE)
                    0000    462 Fkeyboard$_str_0$0$0 == .
   0000                     463 __str_0:
   0000 4B 42 30 30 31      464 	.ascii "KB001"
   0005 00                  465 	.db 0x00
                    0006    466 Fkeyboard$_str_1$0$0 == .
   0006                     467 __str_1:
   0006 4B 42 30 30 32      468 	.ascii "KB002"
   000B 00                  469 	.db 0x00
                    000C    470 Fkeyboard$_str_2$0$0 == .
   000C                     471 __str_2:
   000C 4B 42 30 30 33      472 	.ascii "KB003"
   0011 00                  473 	.db 0x00
                    0012    474 Fkeyboard$_str_3$0$0 == .
   0012                     475 __str_3:
   0012 4B 42 30 30 34      476 	.ascii "KB004"
   0017 00                  477 	.db 0x00
                    0018    478 Fkeyboard$_str_4$0$0 == .
   0018                     479 __str_4:
   0018 4B 42 30 30 35      480 	.ascii "KB005"
   001D 00                  481 	.db 0x00
                            482 	.area XINIT   (CODE)
                            483 	.area CABS    (ABS,CODE)
